{"version":3,"sources":["../../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../../node_modules/@babel/runtime/helpers/nonIterableRest.js","../../node_modules/@babel/runtime/helpers/slicedToArray.js","../../node_modules/marked/lib/marked.js","../index.js","../../node_modules/@emmetio/stream-reader/dist/stream-reader.es.js","../../node_modules/@emmetio/stream-reader-utils/dist/stream-reader-utils.es.js","../../node_modules/@emmetio/extract-abbreviation/dist/extract-abbreviation.es.js","../../node_modules/@emmetio/node/dist/node.es.js","../lib/repeat.js","../lib/quoted.js","../lib/text.js","../lib/attribute.js","../lib/element.js","../lib/parser.js","../../node_modules/@emmetio/html-snippets-resolver/dist/html-snippets-resolver.es.js","../../node_modules/@emmetio/implicit-tag/dist/implicit-tag.es.js","../../node_modules/@emmetio/html-transform/dist/html-transform.es.js","../../node_modules/@emmetio/variable-resolver/dist/variable-resolver.es.js","../../node_modules/@emmetio/output-renderer/dist/output-renderer.es.js","../lib/template.js","../lib/utils.js","../format/html.js","../format/assets/indent-format.js","../format/haml.js","../format/slim.js","../format/pug.js","../../node_modules/@emmetio/css-abbreviation/dist/css-abbreviation.es.js","../lib/score.js","../lib/snippets.js","../format/css.js","../../node_modules/@emmetio/snippets/dist/snippets.es.js","../../node_modules/@emmetio/lorem/dist/lorem.es.js","../../node_modules/@emmetio/snippets-registry/dist/snippets-registry.es.js","../../node_modules/@emmetio/output-profile/dist/output-profile.es.js","../lib/html.js","../lib/css.js","../lib/snippets-registry.js","../../node_modules/@emmetio/html-matcher/dist/html-matcher.es.js","../extension.js","../lib/config.js","../lib/stream-reader.js","../lib/extract-abbreviation.js","../lib/snippet.js","../lib/abbreviation.js","../lib/commands/expand-abbreviation.js","../lib/commands/formatted-line-break.js","../lib/commands/wrap-with-abbreviation.js","../lib/abbreviation-marker.js","../lib/autocomplete.js","../lib/model/syntax-model.js","../lib/model/html.js","../lib/model/index.js","../lib/match-tag.js","../lib/rename-tag.js","../../../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/bundle-url.js","../../../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/bundle-loader.js","js/playground.js","../../../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js"],"names":["root","block","newline","code","fences","noop","hr","heading","nptable","blockquote","list","html","def","table","lheading","paragraph","text","Lexer","options","tokens","links","Object","create","marked","defaults","rules","normal","pedantic","gfm","tables","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","_comment","merge","lex","src","lexer","prototype","token","top","next","loose","cap","bull","b","listStart","listItems","t","space","i","tag","l","isordered","istask","ischecked","exec","substring","length","push","type","rtrim","lang","trim","depth","header","splitCells","align","split","cells","test","ordered","start","match","indexOf","RegExp","smartLists","slice","join","charAt","undefined","task","checked","sanitize","pre","sanitizer","toLowerCase","href","title","Error","charCodeAt","inline","escape","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","TextRenderer","Parser","slugger","Slugger","seen","encode","escapeTest","escapeReplace","ch","replacements","escapeTestNoEncode","escapeReplaceNoEncode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","name","val","cleanUrl","base","prot","decodeURIComponent","e","originIndependentUrl","resolveUrl","baseUrls","encodeURI","_punctuation","_escapes","_scheme","_email","_attribute","_href","_extended_email","_backpedal","output","out","prevCapZero","inLink","inRawBlock","lastParenIndex","findClosingBracket","linkLen","outputLink","escapes","codespan","mangle","smartypants","image","Math","random","toString","infostring","escaped","highlight","langPrefix","quote","level","raw","headerIds","headerPrefix","slug","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","baseUrl","parse","parser","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","errMsg","silent","console","log","value","hasOwnProperty","originalSlug","obj","target","key","arguments","call","tableRow","count","offset","str","curr","splice","c","invert","suffLen","currChar","substr","callback","pending","done","err","message","setOptions","getDefaults","inlineLexer","module","exports","define","amd","window","global","const","let","StreamReader","constructor","string","end","pos","eof","limit","eat","ok","eatWhile","backUp","current","error","originalMessage","SINGLE_QUOTE","DOUBLE_QUOTE","defaultOptions","throws","eatQuoted","stream","assign","isQuote","isNumber","isAlpha","from","to","isAlphaNumeric","isWhiteSpace","isSpace","defaultOptions$1","eatPair","open","close","stack","extractAbbreviation","sol","prev","ESCAPE","TAB","SPACE","DASH","SLASH","COLON","EQUALS","ANGLE_LEFT","ANGLE_RIGHT","isAtHTMLTag","eatIdent","eatAttributeWithUnquotedValue","eatAttribute","eatAttributeWithQuotedValue","isUnquotedValue","isIdent","SQUARE_BRACE_L","SQUARE_BRACE_R","ROUND_BRACE_L","ROUND_BRACE_R","CURLY_BRACE_L","CURLY_BRACE_R","specialChars","Set","map","bracePairs","Map","set","syntax","lookAhead","prefix","line","min","max","offsetPastAutoClosed","getStartOffset","isCloseBrace","isOpenBrace","get","has","isAbbreviation","abbreviation","location","compiledPrefix","result","consumePair","consumeArray","arr","consumed","Node","Attribute","clone","valueOf","attributes","repeat","selfClosing","children","parent","previous","_attributes","Array","isArray","forEach","attr","setAttribute","attributesMap","reduce","boolean","isGroup","isTextOnly","firstChild","lastChild","childIndex","nextSibling","previousSibling","classList","getAttribute","filter","uniqueClass","createAttribute","curAttr","replaceAttribute","hasAttribute","curAttribute","newName","newValue","ix","removeAttribute","clearAttributes","addClass","normalize","hasClass","concat","removeClass","appendChild","node","insertAt","insertBefore","newNode","refNode","remove","removeChild","deep","child","walk","fn","_level","ctx","use","args","apply","attrs","implied","consumeTextNode","DOT","index","tree","registry","resolveNode","resolve","snippet","add","delete","childTarget","findDeepestNode","mergeAttributes","mergeClassNames","attrMap","a","newAttrs","values","classNames","resolveImplicitName","inlineElements","elementMap","p","ul","ol","tr","tbody","thead","tfoot","colgroup","select","optgroup","audio","video","object","parentName","implicitTags","findUnescapedTokens","tlen","size","len","range","replaceRanges","ranges","r","offsetLength","descendingOrder","matches","Number","numberingToken","applyNumbering","applyNumbering$1","repeater","findRepeater","replaceNumbering","copy","replaceNumberingRanges","getNumberingRanges","range$$1","lastRange","unescapeString","_value","placeholder","caret","reUrl","reEmail","reProto","prepare","amount","implicit","insert","updated","insertContent","setNodeContent","inserted","insertContentIntoPlaceholder","state","replaced","replacePlaceholder","_state","element","modifier","reElement","reModifier","blockCandidates1","className","blockCandidates2","bem","expandClassNames","lookup","createBlockLookup","expandShortNotation","cl","startsWith","m","originalClass","getBlockName","arrClassNames","Boolean","find","jsx","oldName","reSupporterNames","xsl","supportedAddons","addons","keys","addonOpt","appliedAddons","replaceVariables","variables","replaceInNode","il","replaceInString","model","createModel","v","reVariable","validMatches","render","defaultFieldsRenderer","OutputNode","fieldsRenderer","_fieldsRenderer","beforeOpen","afterOpen","beforeClose","afterClose","beforeText","afterText","indent","indentText","lines","splitByLines","nl","renderFields","_wrap","before","after","defaultField","field","formatter","fieldState","run","getFieldsModel","mark","nodes","outNode","largestIndex","fields","getIndentLevel","reNl","updateFormatting","formatNodeValue","isInline","CSSValue","HASH","consumeColor","isHex","Color","alpha","g","toHex","short","isShortHex","toShortHex","toRGB","toFixed","hex","num","pad","isAlphaNumericWord","isAlphaWord","PERCENT","DOT$1","consumeNumericValue","eatNumber","NumericValue","unit","afterNegative","prevPos","DOLLAR","DASH$1","AT","consumeKeyword","isVariableName","isKeyword","Keyword","consumeQuoted","QuotedString","LBRACE","RBRACE","COMMA","consumeArgumentList","arg","argsList","consumeArgument","consumeKeywordOrFunction","kw","FunctionCall","EXCL","DOLLAR$1","PLUS","DASH$2","AT$1","abbr","consumeIdent","consumeValue","isIdentPrefix","css","latin","ru","sp","langs","wordCount","skipCommon","dict","startWithCommon","isRepeating","isRoot","rand","floor","sample","iterations","choice","sentence","words","capitalize","word","toUpperCase","insertCommas","hasComma","totalCommas","totalWords","common","SnippetsRegistry","Snippet","SnippetsStorage","data","_string","_regexp","_disabled","load","disabled","disable","enable","k","reset","clear","regexp","_registry","snippets","store","sort","all","fillResult","Profile","tagCase","attributeCase","attributeQuotes","format","formatSkip","formatForce","inlineBreak","compactBooleanAttributes","booleanAttributes","selfClosingStyle","quoteChar","strcase","attribute","isBooleanAttribute","selfClose","expand","parseAbbreviation","resolveSnippets","cssExpand","htmlExpand","cssParse","htmlParse","getIndex","addChild","eatToken","Token","LANGLE","RANGLE","LSQUARE","RSQUARE","LROUND","RROUND","LCURLY","RCURLY","eatPaired","SLASH$1","RIGHT_ANGLE$1","eatAttributes","eatAttributeName","eatAttributeValue","isTerminator","isAttributeName","valueStart","valueEnd","eatUnquoted","isUnquoted","isNaN","LEFT_ANGLE","RIGHT_ANGLE","UNDERSCORE","eatTagName","isTagName","eatArray","codes","eatSection","allowUnclosed","toCharCodes","comment","open$1","close$1","cdata","xml","special","empty","isEmpty","getName","last","consumeSpecial","tag$$1","comparePos","extract","getAbbreviation","parseHTML","getSyntax","emmetWrapWithAbbreviation","bundleURL","getBundleURLCached","getBundleURL","getBaseURL","require","loadBundlesLazy","bundles","id","Promise","LazyPromise","reject","loadBundles","then","loadBundle","bundleLoaders","registerBundleLoader","loader","register","bundle","lastIndexOf","bundleLoader","resolved","catch","executor","promise","onSuccess","onError","spec","toast","device","editor","GARelay","appUser","testId","projectId","assessment","instructions","sandboxWindow","batchedProgress","assessmentProgress","savingBatchedProgress","SPECS","firebase","firestore","collection","SUBMISSIONS","challengeInfo","testOverMsg","notify","msg","toastr","mdc","snackbar","MDCSnackbar","attachTo","querySelector","textContent","timeoutMs","signOut","event","preventDefault","auth","ga","hitType","eventCategory","eventAction","eventLabel","setupAccount","userIconBtn","photoURL","img","document","createElement","usrMenu","menu","MDCMenu","addEventListener","setFixedPosition","prepareEmulatorPreview","switchPreviewToEmulator","switchPreviewToInstructions","showCountdown","Intl","endingAt","deadline","Date","timeSplainer","timer","rtf","RelativeTimeFormat","numeric","displayCountdown","diff","diffType","ellapsedDiff","updateProjectWork","changes","doc","update","createProject","email","starterCodebase","fetch","response","entry","firstSeen","now","ref","project","updateLastSeenTime","lastSeen","createOrUpdateProject","query","where","snapshot","created","docs","setupInstructions","challengeIndex","assessmentName","displayName","about","challenges","guide","safelyIncrementChallengeIndex","challengeLength","normalised","navigateToChallengeInstructions","intructions","innerHTML","appTitle","progress","challengeLen","displayProgressAndInstructions","localStorage","setItem","btn","challangeSlots","x","slot","getAssessmentSpec","specification","progressTo","getCode","codebase","getValue","JSON","getItem","initProject","started","aName","completedChallenge","wait","challengeIntro","playCode","payload","postMessage","origin","handleChallengeNavClicks","closest","isActive","isPassing","navState","step","setTheStage","topAppBar","MDCTopAppBar","ripple","MDCRipple","unbounded","iconButton","MDCIconButtonToggle","listen","detail","isOn","sandbox","viewer","contentWindow","mode","CodeMirror","codeEditor","theme","autofocus","lineNumbers","lineWrapping","matchBrackets","autoCloseBrackets","extraKeys","Tab","Enter","saveWorkBatched","performance","perf","lastRun","saveWork","handleSandboxMessages","feedback","advancement","completed","normalisedIndex","handleSpecialKeyCombinations","which","keyCode","ctrlKey","proceed","whereAmI","stage","setValue","existingWork","deferredEnter","user","assessmentDoc","default","enter","script","async","charset","onerror","onload","getElementsByTagName"],"mappings":"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BACA,IAAA,oEACF,EAAA,iTACC,GAAA,wBACD,EAAA,gCACC,GAAA,iDACC,IAAA,0CACA,IAAA,iBACC,KAAA,uCACA,KAAA,mDACF,GAAA,yDACC,IAAA,oEACA,IAAA,6DACA,IAAA,0CACD,GAAA,wBACA,GAAA,mCACC,IAAA,uDACA,IAAA,oIACD,GAAA,iCACC,IAAA,uDACD,GAAA,yCACA,GAAA,OACC,IAAA,8DACA,IAAA,uDACA,IAAA,YACA,IAAA,YACC,KAAA,cACD,IAAA,qCACD,GAAA,YACC,IAAA,mBACA,IAAA,0CACA,IAAA,uCACA,IAAA,sBACD,GAAA,gBACA,GAAA,WACC,IAAA,kBACA,IAAA,eACA,IAAA,kCACA,IAAA,+BACA,IAAA,wDACD,GAAA,OACA,GAAA,cACC,IAAA,oBACA,IAAA,kBACD,GAAA,WACC,IAAA,iBACA,IAAA,eACD,GAAA,YACD,EAAA,SACC,GAAA,uGACA,GAAA,yCACA,GAAA,wCACD,EAAA,OACC,GAAA,yCACA,GAAA,cACC,IAAA,aACC,KAAA,mBACA,KAAA,qCACA,KAAA,0FACD,IAAA,wBACF,EAAA,SACE,IAAA,aACA,IAAA,iBACA,IAAA,YACD,GAAA,gBACC,IAAA,aACA,IAAA,iBACA,IAAA,YACD,GAAA,cACA,GAAA,eACA,GAAA,aACA,GAAA,UACC,IAAA,iCACA,IAAA,iBACA,IAAA,0EACA,IAAA,kCACD,GAAA,UACC,IAAA,QACA,IAAA,iCACA,IAAA,UACD,GAAA,6CACC,IAAA,8DACA,IAAA,+CACA,IAAA,+CACF,EAAA,UACC,GAAA,iBACE,KAAA,0CACA,KAAA,2CACA,KAAA,+BACF,GAAA,eACC,IAAA,mDACD,GAAA,gBACA,GAAA,cACD,EAAA,SACE,IAAA,6CACA,IAAA,6CACF,EAAA,QACE,IAAA,uCACF,EAAA,MACC,GAAA,uCACC,IAAA,oCACA,IAAA,qBACD,GAAA,uDACA,GAAA,yDACA,GAAA,gDACA,GAAA,cACA,GAAA,wFACA,GAAA,uCACC,IAAA,8BACD,GAAA,eACC,IAAA,iWACC,KAAA,mBACA,KAAA,8BACD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","file":"playground.3ef86f5f.js","sourceRoot":"../../src/playground","sourcesContent":["function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}\\.)/;\nblock.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ {0,3}(`{3,}|~{3,})([^`\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (cap = this.rules.nptable.exec(src)) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) */, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull.length > 1 ? b.length === 1\n            : (b.length > 1 || (this.options.smartLists && b !== bull))) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (cap = this.rules.table.exec(src)) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s_])__(?!_)|^\\*\\*([^\\s*])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_|[^\\spunctuation])|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_|[^\\spunctuation])|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n))|(?= {2,}\\n))/\n};\n\n// list of punctuation marks from common mark spec\n// without ` and ] to workaround Rule 17 (inline code blocks/links)\ninline._punctuation = '!\"#$%&\\'()*+,\\\\-./:;<=>?@\\\\[^_{|}~';\ninline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|`(?!`)|[^\\[\\]\\\\`])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?= {2,}\\n|[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace(/\\{2,\\}/g, '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += escape(cap[1]);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      var lastParenIndex = findClosingBracket(cap[2], '()');\n      if (lastParenIndex > -1) {\n        var linkLen = cap[0].length - (cap[2].length - lastParenIndex) - (cap[3] || '').length;\n        cap[2] = cap[2].substring(0, lastParenIndex);\n        cap[0] = cap[0].substring(0, linkLen).trim();\n        cap[3] = '';\n      }\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, infostring, escaped) {\n  var lang = (infostring || '').match(/\\S*/)[0];\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw, slugger) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + slugger.slug(raw)\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n  this.slugger = new Slugger();\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)),\n        this.slugger);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n      var checked = this.token.checked;\n      var task = this.token.task;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n      return this.renderer.listitem(body, task, checked);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n    default: {\n      var errMsg = 'Token with \"' + this.token.type + '\" type was not found.';\n      if (this.options.silent) {\n        console.log(errMsg);\n      } else {\n        throw new Error(errMsg);\n      }\n    }\n  }\n};\n\n/**\n * Slugger generates header id\n */\n\nfunction Slugger () {\n  this.seen = {};\n}\n\n/**\n * Convert string to unique id\n */\n\nSlugger.prototype.slug = function (value) {\n  var slug = value\n    .toLowerCase()\n    .trim()\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n    .replace(/\\s/g, '-');\n\n  if (this.seen.hasOwnProperty(slug)) {\n    var originalSlug = slug;\n    do {\n      this.seen[originalSlug]++;\n      slug = originalSlug + '-' + this.seen[originalSlug];\n    } while (this.seen.hasOwnProperty(slug));\n  }\n  this.seen[slug] = 0;\n\n  return slug;\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var level = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.Slugger = Slugger;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n","'use strict';\n\nconst defaultSyntaxes = {\n\tmarkup: 'html',\n\tstylesheet: 'css'\n};\n\nconst knownSyntaxes = {\n\tmarkup: ['html', 'xml', 'xsl', 'jsx', 'js', 'pug', 'slim', 'haml'],\n\tstylesheet: ['css', 'sass', 'scss', 'less', 'sss', 'stylus']\n};\n\n/**\n * Config resolver: returns compiled config that can be used in\n * `@emmetio/expand-abbreviation` module for expanding abbreviations\n * @param {EmmetConfig} config Config object\n * @param {EmmetConfigParams} [params] Additional params like `.syntax` and `.project` for\n * config resolving\n * @returns {Object}\n */\nexport default function compileConfig(config, params) {\n\tparams = createParams(config, params || {});\n\n\tconst resolved = resolveConfig(config, params);\n\n\t// Copy extra fields from original config\n\tconst knownFields = ['globals', 'syntax', 'project'];\n\tfor (const p in config) {\n\t\tif (knownFields.indexOf(p) === -1) {\n\t\t\tresolved[p] = config[p];\n\t\t}\n\t}\n\n\treturn resolved;\n}\n\n/**\n * Resolves config for markup syntax\n * @param {EmmetConfig} config\n * @param {EmmetConfigParams} params\n * @return {Object}\n */\nfunction resolveConfig(config, { type, syntax, project }) {\n\treturn {\n\t\tsyntax,\n\t\ttype,\n\t\tproject,\n\t\tformat:  mergeConfig(config, 'format', type, syntax, project),\n\t\tprofile: mergeConfig(config, 'profile', type, syntax, project),\n\t\toptions: mergeConfig(config, 'options', type, syntax, project),\n\t\tvariables: mergeConfig(config, 'variables', type, syntax, project),\n\t\tsnippets: getConfig(config, 'snippets', type, syntax, project).filter(Boolean)\n\t};\n}\n\n/**\n * @param {EmmetConfig} config \n * @param {EmmetConfigParams} params \n * @returns {EmmetConfigParams}\n */\nfunction createParams(config, params) {\n\tlet { type, syntax } = params;\n\n\tif (!type && !syntax) {\n\t\ttype = 'markup';\n\t\tsyntax = defaultSyntaxes[type];\n\t} else if (!type && syntax) {\n\t\tif (knownSyntaxes.markup.indexOf(syntax) !== -1) {\n\t\t\ttype = 'markup';\n\t\t} else if (knownSyntaxes.stylesheet.indexOf(syntax) !== -1) {\n\t\t\ttype = 'stylesheet';\n\t\t} else {\n\t\t\ttype = get(config, ['syntax', syntax, 'type'])\n\t\t\t\t|| get(config, ['project', params.project, 'syntax', syntax, 'type']);\n\t\t}\n\t} else if (!syntax) {\n\t\tsyntax = defaultSyntaxes[type];\n\t}\n\n\treturn { ...params, type, syntax };\n}\n\nfunction mergeConfig(config, key, type, syntax, project) {\n\treturn getConfig(config, key, type, syntax, project)\n\t\t.reduce((out, obj) => ({ ...out, ...obj }), {});\n}\n\nfunction getConfig(config, key, type, syntax, project) {\n\treturn [\n\t\tget(config, ['globals', type, key]),\n\t\tget(config, ['project', project, 'globals', type, key]),\n\t\tget(config, ['syntax', syntax, key]),\n\t\tget(config, ['project', project, 'syntax', syntax, key])\n\t].filter(Boolean);\n}\n\n/**\n * Safe dot-property getter for `obj`: returns value of `obj` by given `key`,\n * separated by `.`, but doesn’t throw error if any of the property key exists\n * @param {Object} obj\n * @param {String[]} key\n * @param {*} [defaultValue] \n * @return {*}\n */\nfunction get(obj, key, defaultValue) {\n\tlet result = obj;\n\n\tfor (let i = 0; i < key.length; i++) {\n\t\tif (result == null) {\n\t\t\tbreak;\n\t\t}\n\n\t\tresult = result[key[i]];\n\t}\n\n\treturn result != null ? result : defaultValue;\n}\n","/**\n * A streaming, character code-based string reader\n */\nclass StreamReader {\n\tconstructor(string, start, end) {\n\t\tif (end == null && typeof string === 'string') {\n\t\t\tend = string.length;\n\t\t}\n\n\t\tthis.string = string;\n\t\tthis.pos = this.start = start || 0;\n\t\tthis.end = end;\n\t}\n\n\t/**\n\t * Returns true only if the stream is at the end of the file.\n\t * @returns {Boolean}\n\t */\n\teof() {\n\t\treturn this.pos >= this.end;\n\t}\n\n\t/**\n\t * Creates a new stream instance which is limited to given `start` and `end`\n\t * range. E.g. its `eof()` method will look at `end` property, not actual\n\t * stream end\n\t * @param  {Point} start\n\t * @param  {Point} end\n\t * @return {StreamReader}\n\t */\n\tlimit(start, end) {\n\t\treturn new this.constructor(this.string, start, end);\n\t}\n\n\t/**\n\t * Returns the next character code in the stream without advancing it.\n\t * Will return NaN at the end of the file.\n\t * @returns {Number}\n\t */\n\tpeek() {\n\t\treturn this.string.charCodeAt(this.pos);\n\t}\n\n\t/**\n\t * Returns the next character in the stream and advances it.\n\t * Also returns <code>undefined</code> when no more characters are available.\n\t * @returns {Number}\n\t */\n\tnext() {\n\t\tif (this.pos < this.string.length) {\n\t\t\treturn this.string.charCodeAt(this.pos++);\n\t\t}\n\t}\n\n\t/**\n\t * `match` can be a character code or a function that takes a character code\n\t * and returns a boolean. If the next character in the stream 'matches'\n\t * the given argument, it is consumed and returned.\n\t * Otherwise, `false` is returned.\n\t * @param {Number|Function} match\n\t * @returns {Boolean}\n\t */\n\teat(match) {\n\t\tconst ch = this.peek();\n\t\tconst ok = typeof match === 'function' ? match(ch) : ch === match;\n\n\t\tif (ok) {\n\t\t\tthis.next();\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\t/**\n\t * Repeatedly calls <code>eat</code> with the given argument, until it\n\t * fails. Returns <code>true</code> if any characters were eaten.\n\t * @param {Object} match\n\t * @returns {Boolean}\n\t */\n\teatWhile(match) {\n\t\tconst start = this.pos;\n\t\twhile (!this.eof() && this.eat(match)) {}\n\t\treturn this.pos !== start;\n\t}\n\n\t/**\n\t * Backs up the stream n characters. Backing it up further than the\n\t * start of the current token will cause things to break, so be careful.\n\t * @param {Number} n\n\t */\n\tbackUp(n) {\n\t\tthis.pos -= (n || 1);\n\t}\n\n\t/**\n\t * Get the string between the start of the current token and the\n\t * current stream position.\n\t * @returns {String}\n\t */\n\tcurrent() {\n\t\treturn this.substring(this.start, this.pos);\n\t}\n\n\t/**\n\t * Returns substring for given range\n\t * @param  {Number} start\n\t * @param  {Number} [end]\n\t * @return {String}\n\t */\n\tsubstring(start, end) {\n\t\treturn this.string.slice(start, end);\n\t}\n\n\t/**\n\t * Creates error object with current stream state\n\t * @param {String} message\n\t * @return {Error}\n\t */\n\terror(message) {\n\t\tconst err = new Error(`${message} at char ${this.pos + 1}`);\n\t\terr.originalMessage = message;\n\t\terr.pos = this.pos;\n\t\terr.string = this.string;\n\t\treturn err;\n\t}\n}\n\nexport default StreamReader;\n","/**\n * Methods for consuming quoted values\n */\n\nconst SINGLE_QUOTE = 39; // '\nconst DOUBLE_QUOTE = 34; // \"\n\nconst defaultOptions = {\n\tescape: 92,   // \\ character\n\tthrows: false\n};\n\n/**\n * Consumes 'single' or \"double\"-quoted string from given string, if possible\n * @param  {StreamReader} stream\n * @param  {Number}  options.escape A character code of quote-escape symbol\n * @param  {Boolean} options.throws Throw error if quotes string can’t be properly consumed\n * @return {Boolean} `true` if quoted string was consumed. The contents\n *                   of quoted string will be availabe as `stream.current()`\n */\nvar eatQuoted = function(stream, options) {\n\toptions = options ? Object.assign({}, defaultOptions, options) : defaultOptions;\n\tconst start = stream.pos;\n\tconst quote = stream.peek();\n\n\tif (stream.eat(isQuote)) {\n\t\twhile (!stream.eof()) {\n\t\t\tswitch (stream.next()) {\n\t\t\t\tcase quote:\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn true;\n\n\t\t\t\tcase options.escape:\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then stream wasn’t properly consumed.\n\t\t// Revert stream and decide what to do\n\t\tstream.pos = start;\n\n\t\tif (options.throws) {\n\t\t\tthrow stream.error('Unable to consume quoted string');\n\t\t}\n\t}\n\n\treturn false;\n};\n\nfunction isQuote(code) {\n\treturn code === SINGLE_QUOTE || code === DOUBLE_QUOTE;\n}\n\n/**\n * Check if given code is a number\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isNumber(code) {\n\treturn code > 47 && code < 58;\n}\n\n/**\n * Check if given character code is alpha code (letter through A to Z)\n * @param  {Number}  code\n * @param  {Number}  [from]\n * @param  {Number}  [to]\n * @return {Boolean}\n */\nfunction isAlpha(code, from, to) {\n\tfrom = from || 65; // A\n\tto   = to   || 90; // Z\n\tcode &= ~32; // quick hack to convert any char code to uppercase char code\n\n\treturn code >= from && code <= to;\n}\n\n/**\n * Check if given character code is alpha-numeric (letter through A to Z or number)\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAlphaNumeric(code) {\n\treturn isNumber(code) || isAlpha(code);\n}\n\nfunction isWhiteSpace(code) {\n\treturn code === 32   /* space */\n\t\t|| code === 9    /* tab */\n\t\t|| code === 160; /* non-breaking space */\n}\n\n/**\n * Check if given character code is a space\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isSpace(code) {\n\treturn isWhiteSpace(code)\n\t\t|| code === 10  /* LF */\n\t\t|| code === 13; /* CR */\n}\n\nconst defaultOptions$1 = {\n\tescape: 92,   // \\ character\n\tthrows: false\n};\n\n/**\n * Eats paired characters substring, for example `(foo)` or `[bar]`\n * @param  {StreamReader} stream\n * @param  {Number} open      Character code of pair openinig\n * @param  {Number} close     Character code of pair closing\n * @param  {Object} [options]\n * @return {Boolean}       Returns `true` if chacarter pair was successfully\n *                         consumed, it’s content will be available as `stream.current()`\n */\nfunction eatPair(stream, open, close, options) {\n\toptions = options ? Object.assign({}, defaultOptions$1, options) : defaultOptions$1;\n\tconst start = stream.pos;\n\n\tif (stream.eat(open)) {\n\t\tlet stack = 1, ch;\n\n\t\twhile (!stream.eof()) {\n\t\t\tif (eatQuoted(stream, options)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tch = stream.next();\n\t\t\tif (ch === open) {\n\t\t\t\tstack++;\n\t\t\t} else if (ch === close) {\n\t\t\t\tstack--;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if (ch === options.escape) {\n\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then paired character can’t be consumed\n\t\tstream.pos = start;\n\n\t\tif (options.throws) {\n\t\t\tthrow stream.error(`Unable to find matching pair for ${String.fromCharCode(open)}`);\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport { eatQuoted, isQuote, isAlpha, isNumber, isAlphaNumeric, isSpace, isWhiteSpace, eatPair };\n","/**\n * Minimalistic backwards stream reader\n */\nclass StreamReader {\n\tconstructor(string, start) {\n\t\tthis.string = string;\n\t\tthis.start = start || 0;\n\t\tthis.pos = this.string.length;\n\t}\n\n\tsol() {\n\t\treturn this.pos === this.start;\n\t}\n\n\tpeek(offset) {\n\t\treturn this.string.charCodeAt(this.pos - 1 + (offset || 0));\n\t}\n\n\tprev() {\n\t\tif (!this.sol()) {\n\t\t\treturn this.string.charCodeAt(--this.pos);\n\t\t}\n\t}\n\n\teat(match) {\n\t\tif (this.sol()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst ok = typeof match === 'function'\n\t\t\t? match(this.peek())\n\t\t\t: match === this.peek();\n\n\t\tif (ok) {\n\t\t\tthis.pos--;\n\t\t}\n\n\t\treturn ok;\n\t}\n\n\teatWhile(match) {\n\t\tconst start = this.pos;\n\t\twhile (this.eat(match)) {}\n\t\treturn this.pos < start;\n\t}\n}\n\n/**\n * Quotes-related utilities\n */\n\nconst SINGLE_QUOTE = 39; // '\nconst DOUBLE_QUOTE = 34; // \"\nconst ESCAPE       = 92; // \\\n\n/**\n * Check if given character code is a quote\n * @param  {Number}  c\n * @return {Boolean}\n */\nfunction isQuote(c) {\n\treturn c === SINGLE_QUOTE || c === DOUBLE_QUOTE;\n}\n\n/**\n * Consumes quoted value, if possible\n * @param  {StreamReader} stream\n * @return {Boolean}      Returns `true` is value was consumed\n */\nfunction eatQuoted(stream) {\n\tconst start = stream.pos;\n\tconst quote = stream.prev();\n\n\tif (isQuote(quote)) {\n\t\twhile (!stream.sol()) {\n\t\t\tif (stream.prev() === quote && stream.peek() !== ESCAPE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tstream.pos = start;\n\treturn false;\n}\n\nconst TAB         = 9;\nconst SPACE       = 32;\nconst DASH        = 45; // -\nconst SLASH       = 47; // /\nconst COLON       = 58; // :\nconst EQUALS      = 61; // =\nconst ANGLE_LEFT  = 60; // <\nconst ANGLE_RIGHT = 62; // >\n\n/**\n * Check if given reader’s current position points at the end of HTML tag\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nvar isAtHTMLTag = function (stream) {\n\tconst start = stream.pos;\n\n\tif (!stream.eat(ANGLE_RIGHT)) {\n\t\treturn false;\n\t}\n\n\tlet ok = false;\n\tstream.eat(SLASH); // possibly self-closed element\n\n\twhile (!stream.sol()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\n\t\tif (eatIdent(stream)) {\n\t\t\t// ate identifier: could be a tag name, boolean attribute or unquoted\n\t\t\t// attribute value\n\t\t\tif (stream.eat(SLASH)) {\n\t\t\t\t// either closing tag or invalid tag\n\t\t\t\tok = stream.eat(ANGLE_LEFT);\n\t\t\t\tbreak;\n\t\t\t} else if (stream.eat(ANGLE_LEFT)) {\n\t\t\t\t// opening tag\n\t\t\t\tok = true;\n\t\t\t\tbreak;\n\t\t\t} else if (stream.eat(isWhiteSpace)) {\n\t\t\t\t// boolean attribute\n\t\t\t\tcontinue;\n\t\t\t} else if (stream.eat(EQUALS)) {\n\t\t\t\t// simple unquoted value or invalid attribute\n\t\t\t\tif (eatIdent(stream)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} else if (eatAttributeWithUnquotedValue(stream)) {\n\t\t\t\t// identifier was a part of unquoted value\n\t\t\t\tok = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// invalid tag\n\t\t\tbreak;\n\t\t}\n\n\t\tif (eatAttribute(stream)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tstream.pos = start;\n\treturn ok;\n};\n\n/**\n * Eats HTML attribute from given string.\n * @param  {StreamReader} state\n * @return {Boolean}       `true` if attribute was consumed.\n */\nfunction eatAttribute(stream) {\n\treturn eatAttributeWithQuotedValue(stream) || eatAttributeWithUnquotedValue(stream);\n}\n\n/**\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatAttributeWithQuotedValue(stream) {\n\tconst start = stream.pos;\n\tif (eatQuoted(stream) && stream.eat(EQUALS) && eatIdent(stream)) {\n\t\treturn true;\n\t}\n\n\tstream.pos = start;\n\treturn false;\n}\n\n/**\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatAttributeWithUnquotedValue(stream) {\n\tconst start = stream.pos;\n\tif (stream.eatWhile(isUnquotedValue) && stream.eat(EQUALS) && eatIdent(stream)) {\n\t\treturn true;\n\t}\n\n\tstream.pos = start;\n\treturn false;\n}\n\n/**\n * Eats HTML identifier from stream\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatIdent(stream) {\n\treturn stream.eatWhile(isIdent);\n}\n\n/**\n * Check if given character code belongs to HTML identifier\n * @param  {Number}  c\n * @return {Boolean}\n */\nfunction isIdent(c) {\n\treturn c === COLON || c === DASH || isAlpha(c) || isNumber(c);\n}\n\n/**\n * Check if given character code is alpha code (letter though A to Z)\n * @param  {Number}  c\n * @return {Boolean}\n */\nfunction isAlpha(c) {\n\tc &= ~32; // quick hack to convert any char code to uppercase char code\n\treturn c >= 65 && c <= 90; // A-Z\n}\n\n/**\n * Check if given code is a number\n * @param  {Number}  c\n * @return {Boolean}\n */\nfunction isNumber(c) {\n\treturn c > 47 && c < 58;\n}\n\n/**\n * Check if given code is a whitespace\n * @param  {Number}  c\n * @return {Boolean}\n */\nfunction isWhiteSpace(c) {\n\treturn c === SPACE || c === TAB;\n}\n\n/**\n * Check if given code may belong to unquoted attribute value\n * @param  {Number}  c\n * @return {Boolean}\n */\nfunction isUnquotedValue(c) {\n\treturn c && c !== EQUALS && !isWhiteSpace(c) && !isQuote(c);\n}\n\nconst code = ch => ch.charCodeAt(0);\nconst SQUARE_BRACE_L = code('[');\nconst SQUARE_BRACE_R = code(']');\nconst ROUND_BRACE_L  = code('(');\nconst ROUND_BRACE_R  = code(')');\nconst CURLY_BRACE_L  = code('{');\nconst CURLY_BRACE_R  = code('}');\n\nconst specialChars = new Set('#.*:$-_!@%^+>/'.split('').map(code));\nconst bracePairs = new Map()\n\t.set(SQUARE_BRACE_L, SQUARE_BRACE_R)\n\t.set(ROUND_BRACE_L,  ROUND_BRACE_R)\n\t.set(CURLY_BRACE_L,  CURLY_BRACE_R);\n\nconst defaultOptions = {\n\tsyntax: 'markup',\n\tlookAhead: null,\n\tprefix: ''\n};\n\n/**\n * Extracts Emmet abbreviation from given string.\n * The goal of this module is to extract abbreviation from current editor’s line,\n * e.g. like this: `<span>.foo[title=bar|]</span>` -> `.foo[title=bar]`, where\n * `|` is a current caret position.\n * @param {String}  line A text line where abbreviation should be expanded\n * @param {Number}  [pos] Caret position in line. If not given, uses end-of-line\n * @param {Object}  [options]\n * @param {Boolean} [options.lookAhead] Allow parser to look ahead of `pos` index for\n * searching of missing abbreviation parts. Most editors automatically inserts\n * closing braces for `[`, `{` and `(`, which will most likely be right after\n * current caret position. So in order to properly expand abbreviation, user\n * must explicitly move caret right after auto-inserted braces. With this option\n * enabled, parser will search for closing braces right after `pos`. Default is `true`\n * @param {String} [options.syntax] Name of context syntax of expanded abbreviation.\n * Either 'markup' (default) or 'stylesheet'. In 'stylesheet' syntax, braces `[]`\n * and `{}` are not supported thus not extracted.\n * @param {String} [options.prefix] A string that should precede abbreviation in\n * order to make it successfully extracted. If given, the abbreviation will be\n * extracted from the nearest `prefix` occurrence.\n * @return {Object} Object with `abbreviation` and its `location` in given line\n * if abbreviation can be extracted, `null` otherwise\n */\nfunction extractAbbreviation(line, pos, options) {\n\t// make sure `pos` is within line range\n\tpos = Math.min(line.length, Math.max(0, pos == null ? line.length : pos));\n\n\tif (typeof options === 'boolean') {\n\t\toptions = Object.assign({}, defaultOptions, { lookAhead: options });\n\t} else {\n\t\toptions = Object.assign({}, defaultOptions, options);\n\t}\n\n\tif (options.lookAhead == null || options.lookAhead === true) {\n\t\tpos = offsetPastAutoClosed(line, pos, options);\n\t}\n\n\tlet c;\n\tconst start = getStartOffset(line, pos, options.prefix);\n\tif (start === -1) {\n\t\treturn null;\n\t}\n\n\tconst stream = new StreamReader(line, start);\n\tstream.pos = pos;\n\tconst stack = [];\n\n\twhile (!stream.sol()) {\n\t\tc = stream.peek();\n\n\t\tif (isCloseBrace(c, options.syntax)) {\n\t\t\tstack.push(c);\n\t\t} else if (isOpenBrace(c, options.syntax)) {\n\t\t\tif (stack.pop() !== bracePairs.get(c)) {\n\t\t\t\t// unexpected brace\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (has(stack, SQUARE_BRACE_R) || has(stack, CURLY_BRACE_R)) {\n\t\t\t// respect all characters inside attribute sets or text nodes\n\t\t\tstream.pos--;\n\t\t\tcontinue;\n\t\t} else if (isAtHTMLTag(stream) || !isAbbreviation(c)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tstream.pos--;\n\t}\n\n\tif (!stack.length && stream.pos !== pos) {\n\t\t// found something, remove some invalid symbols from the\n\t\t// beginning and return abbreviation\n\t\tconst abbreviation = line.slice(stream.pos, pos).replace(/^[*+>^]+/, '');\n\t\treturn {\n\t\t\tabbreviation,\n\t\t\tlocation: pos - abbreviation.length,\n\t\t\tstart: options.prefix\n\t\t\t\t? start - options.prefix.length\n\t\t\t\t: pos - abbreviation.length,\n\t\t\tend: pos\n\t\t};\n\t}\n}\n\n/**\n * Returns new `line` index which is right after characters beyound `pos` that\n * editor will likely automatically close, e.g. }, ], and quotes\n * @param {String} line\n * @param {Number} pos\n * @return {Number}\n */\nfunction offsetPastAutoClosed(line, pos, options) {\n\t// closing quote is allowed only as a next character\n\tif (isQuote(line.charCodeAt(pos))) {\n\t\tpos++;\n\t}\n\n\t// offset pointer until non-autoclosed character is found\n\twhile (isCloseBrace(line.charCodeAt(pos), options.syntax)) {\n\t\tpos++;\n\t}\n\n\treturn pos;\n}\n\n/**\n * Returns start offset (left limit) in `line` where we should stop looking for\n * abbreviation: it’s nearest to `pos` location of `prefix` token\n * @param {String} line\n * @param {Number} pos\n * @param {String} prefix\n * @return {Number}\n */\nfunction getStartOffset(line, pos, prefix) {\n\tif (!prefix) {\n\t\treturn 0;\n\t}\n\n\tconst stream = new StreamReader(line);\n\tconst compiledPrefix = String(prefix).split('').map(code);\n\tstream.pos = pos;\n\tlet result;\n\n\twhile (!stream.sol()) {\n\t\tif (consumePair(stream, SQUARE_BRACE_R, SQUARE_BRACE_L) || consumePair(stream, CURLY_BRACE_R, CURLY_BRACE_L)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult = stream.pos;\n\t\tif (consumeArray(stream, compiledPrefix)) {\n\t\t\treturn result;\n\t\t}\n\n\t\tstream.pos--;\n\t}\n\n\treturn -1;\n}\n\n/**\n * Consumes full character pair, if possible\n * @param {StreamReader} stream\n * @param {Number} close\n * @param {Number} open\n * @return {Boolean}\n */\nfunction consumePair(stream, close, open) {\n\tconst start = stream.pos;\n\tif (stream.eat(close)) {\n\t\twhile (!stream.sol()) {\n\t\t\tif (stream.eat(open)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tstream.pos--;\n\t\t}\n\t}\n\n\tstream.pos = start;\n\treturn false;\n}\n\n/**\n * Consumes all character codes from given array, right-to-left, if possible\n * @param {StreamReader} stream\n * @param {Number[]} arr\n */\nfunction consumeArray(stream, arr) {\n\tconst start = stream.pos;\n\tlet consumed = false;\n\n\tfor (let i = arr.length - 1; i >= 0 && !stream.sol(); i--) {\n\t\tif (!stream.eat(arr[i])) {\n\t\t\tbreak;\n\t\t}\n\n\t\tconsumed = i === 0;\n\t}\n\n\tif (!consumed) {\n\t\tstream.pos = start;\n\t}\n\n\treturn consumed;\n}\n\nfunction has(arr, value) {\n\treturn arr.indexOf(value) !== -1;\n}\n\nfunction isAbbreviation(c) {\n\treturn (c > 64 && c < 91)   // uppercase letter\n\t\t|| (c > 96 && c < 123)  // lowercase letter\n\t\t|| (c > 47 && c < 58)   // number\n\t\t|| specialChars.has(c); // special character\n}\n\nfunction isOpenBrace(c, syntax) {\n\treturn c === ROUND_BRACE_L || (syntax === 'markup' && (c === SQUARE_BRACE_L || c === CURLY_BRACE_L));\n}\n\nfunction isCloseBrace(c, syntax) {\n\treturn c === ROUND_BRACE_R || (syntax === 'markup' && (c === SQUARE_BRACE_R || c === CURLY_BRACE_R));\n}\n\nexport default extractAbbreviation;\n","/**\n * Attribute descriptor of parsed abbreviation node\n * @param {String} name Attribute name\n * @param {String} value Attribute value\n * @param {Object} options Additional custom attribute options\n * @param {Boolean} options.boolean Attribute is boolean (e.g. name equals value)\n * @param {Boolean} options.implied Attribute is implied (e.g. must be outputted\n * only if contains non-null value)\n */\nclass Attribute {\n\tconstructor(name, value, options) {\n\t\tthis.name = name;\n\t\tthis.value = value != null ? value : null;\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Create a copy of current attribute\n\t * @return {Attribute}\n\t */\n\tclone() {\n\t\treturn new Attribute(this.name, this.value, Object.assign({}, this.options));\n\t}\n\n\t/**\n\t * A string representation of current node\n\t */\n\tvalueOf() {\n\t\treturn `${this.name}=\"${this.value}\"`;\n\t}\n}\n\n/**\n * A parsed abbreviation AST node. Nodes build up an abbreviation AST tree\n */\nclass Node {\n\t/**\n\t * Creates a new node\n\t * @param {String} [name] Node name\n\t * @param {Array} [attributes] Array of attributes to add\n\t */\n\tconstructor(name, attributes) {\n\t\t// own properties\n\t\tthis.name = name || null;\n\t\tthis.value = null;\n\t\tthis.repeat = null;\n\t\tthis.selfClosing = false;\n\n\t\tthis.children = [];\n\n\t\t/** @type {Node} Pointer to parent node */\n\t\tthis.parent = null;\n\n\t\t/** @type {Node} Pointer to next sibling */\n\t\tthis.next = null;\n\n\t\t/** @type {Node} Pointer to previous sibling */\n\t\tthis.previous = null;\n\n\t\tthis._attributes = [];\n\n\t\tif (Array.isArray(attributes)) {\n\t\t\tattributes.forEach(attr => this.setAttribute(attr));\n\t\t}\n\t}\n\n\t/**\n\t * Array of current node attributes\n\t * @return {Attribute[]} Array of attributes\n\t */\n\tget attributes() {\n\t\treturn this._attributes;\n\t}\n\n\t/**\n\t * A shorthand to retreive node attributes as map\n\t * @return {Object}\n\t */\n\tget attributesMap() {\n\t\treturn this.attributes.reduce((out, attr) => {\n\t\t\tout[attr.name] = attr.options.boolean ? attr.name : attr.value;\n\t\t\treturn out;\n\t\t}, {});\n\t}\n\n\t/**\n\t * Check if current node is a grouping one, e.g. has no actual representation\n\t * and is used for grouping subsequent nodes only\n\t * @return {Boolean}\n\t */\n\tget isGroup() {\n\t\treturn !this.name && !this.value && !this._attributes.length;\n\t}\n\n\t/**\n\t * Check if given node is a text-only node, e.g. contains only value\n\t * @return {Boolean}\n\t */\n\tget isTextOnly() {\n\t\treturn !this.name && !!this.value && !this._attributes.length;\n\t}\n\n\t/**\n\t * Returns first child node\n\t * @return {Node}\n\t */\n\tget firstChild() {\n\t\treturn this.children[0];\n\t}\n\n\t/**\n\t * Returns last child of current node\n\t * @return {Node}\n\t */\n\tget lastChild() {\n\t\treturn this.children[this.children.length - 1];\n\t}\n\n\t/**\n\t * Return index of current node in its parent child list\n\t * @return {Number} Returns -1 if current node is a root one\n\t */\n\tget childIndex() {\n\t\treturn this.parent ? this.parent.children.indexOf(this) : -1;\n\t}\n\n\t/**\n\t * Returns next sibling of current node\n\t * @return {Node}\n\t */\n\tget nextSibling() {\n\t\treturn this.next;\n\t}\n\n\t/**\n\t * Returns previous sibling of current node\n\t * @return {Node}\n\t */\n\tget previousSibling() {\n\t\treturn this.previous;\n\t}\n\n\t/**\n\t * Returns array of unique class names in current node\n\t * @return {String[]}\n\t */\n\tget classList() {\n\t\tconst attr = this.getAttribute('class');\n\t\treturn attr && attr.value\n\t\t\t? attr.value.split(/\\s+/g).filter(uniqueClass)\n\t\t\t: [];\n\t}\n\n\t/**\n\t * Convenient alias to create a new node instance\n\t * @param {String} [name] Node name\n\t * @param {Object} [attributes] Attributes hash\n\t * @return {Node}\n\t */\n\tcreate(name, attributes) {\n\t\treturn new Node(name, attributes);\n\t}\n\n\t/**\n\t * Sets given attribute for current node\n\t * @param {String|Object|Attribute} name Attribute name or attribute object\n\t * @param {String} [value] Attribute value\n\t */\n\tsetAttribute(name, value) {\n\t\tconst attr = createAttribute(name, value);\n\t\tconst curAttr = this.getAttribute(name);\n\t\tif (curAttr) {\n\t\t\tthis.replaceAttribute(curAttr, attr);\n\t\t} else {\n\t\t\tthis._attributes.push(attr);\n\t\t}\n\t}\n\n\t/**\n\t * Check if attribute with given name exists in node\n\t * @param  {String} name\n\t * @return {Boolean}\n\t */\n\thasAttribute(name) {\n\t\treturn !!this.getAttribute(name);\n\t}\n\n\t/**\n\t * Returns attribute object by given name\n\t * @param  {String} name\n\t * @return {Attribute}\n\t */\n\tgetAttribute(name) {\n\t\tif (typeof name === 'object') {\n\t\t\tname = name.name;\n\t\t}\n\n\t\tfor (var i = 0; i < this._attributes.length; i++) {\n\t\t\tconst attr = this._attributes[i];\n\t\t\tif (attr.name === name) {\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Replaces attribute with new instance\n\t * @param {String|Attribute} curAttribute Current attribute name or instance\n\t * to replace\n\t * @param {String|Object|Attribute} newName New attribute name or attribute object\n\t * @param {String} [newValue] New attribute value\n\t */\n\treplaceAttribute(curAttribute, newName, newValue) {\n\t\tif (typeof curAttribute === 'string') {\n\t\t\tcurAttribute = this.getAttribute(curAttribute);\n\t\t}\n\n\t\tconst ix = this._attributes.indexOf(curAttribute);\n\t\tif (ix !== -1) {\n\t\t\tthis._attributes.splice(ix, 1, createAttribute(newName, newValue));\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute with given name\n\t * @param  {String|Attribute} attr Atrtibute name or instance\n\t */\n\tremoveAttribute(attr) {\n\t\tif (typeof attr === 'string') {\n\t\t\tattr = this.getAttribute(attr);\n\t\t}\n\n\t\tconst ix = this._attributes.indexOf(attr);\n\t\tif (ix !== -1) {\n\t\t\tthis._attributes.splice(ix, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from current node\n\t */\n\tclearAttributes() {\n\t\tthis._attributes.length = 0;\n\t}\n\n\t/**\n\t * Adds given class name to class attribute\n\t * @param {String} token Class name token\n\t */\n\taddClass(token) {\n\t\ttoken = normalize(token);\n\n\t\tif (!this.hasAttribute('class')) {\n\t\t\tthis.setAttribute('class', token);\n\t\t} else if (token && !this.hasClass(token)) {\n\t\t\tthis.setAttribute('class', this.classList.concat(token).join(' '));\n\t\t}\n\t}\n\n\t/**\n\t * Check if current node contains given class name\n\t * @param {String} token Class name token\n\t * @return {Boolean}\n\t */\n\thasClass(token) {\n\t\treturn this.classList.indexOf(normalize(token)) !== -1;\n\t}\n\n\t/**\n\t * Removes given class name from class attribute\n\t * @param {String} token Class name token\n\t */\n\tremoveClass(token) {\n\t\ttoken = normalize(token);\n\t\tif (this.hasClass(token)) {\n\t\t\tthis.setAttribute('class', this.classList.filter(name => name !== token).join(' '));\n\t\t}\n\t}\n\n\t/**\n\t * Appends child to current node\n\t * @param {Node} node\n\t */\n\tappendChild(node) {\n\t\tthis.insertAt(node, this.children.length);\n\t}\n\n\t/**\n\t * Inserts given `newNode` before `refNode` child node\n\t * @param {Node} newNode\n\t * @param {Node} refNode\n\t */\n\tinsertBefore(newNode, refNode) {\n\t\tthis.insertAt(newNode, this.children.indexOf(refNode));\n\t}\n\n\t/**\n\t * Insert given `node` at `pos` position of child list\n\t * @param {Node} node\n\t * @param {Number} pos\n\t */\n\tinsertAt(node, pos) {\n\t\tif (pos < 0 || pos > this.children.length) {\n\t\t\tthrow new Error('Unable to insert node: position is out of child list range');\n\t\t}\n\n\t\tconst prev = this.children[pos - 1];\n\t\tconst next = this.children[pos];\n\n\t\tnode.remove();\n\t\tnode.parent = this;\n\t\tthis.children.splice(pos, 0, node);\n\n\t\tif (prev) {\n\t\t\tnode.previous = prev;\n\t\t\tprev.next = node;\n\t\t}\n\n\t\tif (next) {\n\t\t\tnode.next = next;\n\t\t\tnext.previous = node;\n\t\t}\n\t}\n\n\t/**\n\t * Removes given child from current node\n\t * @param {Node} node\n\t */\n\tremoveChild(node) {\n\t\tconst ix = this.children.indexOf(node);\n\t\tif (ix !== -1) {\n\t\t\tthis.children.splice(ix, 1);\n\t\t\tif (node.previous) {\n\t\t\t\tnode.previous.next = node.next;\n\t\t\t}\n\n\t\t\tif (node.next) {\n\t\t\t\tnode.next.previous = node.previous;\n\t\t\t}\n\n\t\t\tnode.parent = node.next = node.previous = null;\n\t\t}\n\t}\n\n\t/**\n\t * Removes current node from its parent\n\t */\n\tremove() {\n\t\tif (this.parent) {\n\t\t\tthis.parent.removeChild(this);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a detached copy of current node\n\t * @param {Boolean} deep Clone node contents as well\n\t * @return {Node}\n\t */\n\tclone(deep) {\n\t\tconst clone = new Node(this.name);\n\t\tclone.value = this.value;\n\t\tclone.selfClosing = this.selfClosing;\n\t\tif (this.repeat) {\n\t\t\tclone.repeat = Object.assign({}, this.repeat);\n\t\t}\n\n\t\tthis._attributes.forEach(attr => clone.setAttribute(attr.clone()));\n\n\t\tif (deep) {\n\t\t\tthis.children.forEach(child => clone.appendChild(child.clone(true)));\n\t\t}\n\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Walks on each descendant node and invokes given `fn` function on it.\n\t * The function receives two arguments: the node itself and its depth level\n\t * from current node. If function returns `false`, it stops walking\n\t * @param {Function} fn\n\t */\n\twalk(fn, _level) {\n\t\t_level = _level || 0;\n\t\tlet ctx = this.firstChild;\n\n\t\twhile (ctx) {\n\t\t\t// in case if context node will be detached during `fn` call\n\t\t\tconst next = ctx.next;\n\n\t\t\tif (fn(ctx, _level) === false || ctx.walk(fn, _level + 1) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tctx = next;\n\t\t}\n\t}\n\n\t/**\n\t * A helper method for transformation chaining: runs given `fn` function on\n\t * current node and returns the same node\n\t */\n\tuse(fn) {\n\t\tconst args = [this];\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\targs.push(arguments[i]);\n\t\t}\n\n\t\tfn.apply(null, args);\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tconst attrs = this.attributes.map(attr => {\n\t\t\tattr = this.getAttribute(attr.name);\n\t\t\tconst opt = attr.options;\n\t\t\tlet out = `${opt && opt.implied ? '!' : ''}${attr.name || ''}`;\n\t\t\tif (opt && opt.boolean) {\n\t\t\t\tout += '.';\n\t\t\t} else if (attr.value != null) {\n\t\t\t\tout += `=\"${attr.value}\"`;\n\t\t\t}\n\t\t\treturn out;\n\t\t});\n\n\t\tlet out = `${this.name || ''}`;\n\t\tif (attrs.length) {\n\t\t\tout += `[${attrs.join(' ')}]`;\n\t\t}\n\n\t\tif (this.value != null) {\n\t\t\tout += `{${this.value}}`;\n\t\t}\n\n\t\tif (this.selfClosing) {\n\t\t\tout += '/';\n\t\t}\n\n\t\tif (this.repeat) {\n\t\t\tout += `*${this.repeat.count ? this.repeat.count : ''}`;\n\t\t\tif (this.repeat.value != null) {\n\t\t\t\tout += `@${this.repeat.value}`;\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n}\n\n/**\n * Attribute factory\n * @param  {String|Attribute|Object} name  Attribute name or attribute descriptor\n * @param  {*} value Attribute value\n * @return {Attribute}\n */\nfunction createAttribute(name, value) {\n\tif (name instanceof Attribute) {\n\t\treturn name;\n\t}\n\n\tif (typeof name === 'string') {\n\t\treturn new Attribute(name, value);\n\t}\n\n\tif (name && typeof name === 'object') {\n\t\treturn new Attribute(name.name, name.value, name.options);\n\t}\n}\n\n/**\n * @param  {String} str\n * @return {String}\n */\nfunction normalize(str) {\n\treturn String(str).trim();\n}\n\nfunction uniqueClass(item, i, arr) {\n\treturn item && arr.indexOf(item) === i;\n}\n\nexport default Node;\n","'use strict';\n\nimport { isNumber } from '@emmetio/stream-reader-utils';\n\nconst ASTERISK = 42; // *\n\n/**\n * Consumes node repeat token from current stream position and returns its\n * parsed value\n * @param  {StringReader} stream\n * @return {Object}\n */\nexport default function(stream) {\n\tif (stream.eat(ASTERISK)) {\n\t\tstream.start = stream.pos;\n\n\t\t// XXX think about extending repeat syntax with through numbering\n\t\treturn { count: stream.eatWhile(isNumber) ? +stream.current() : null };\n\t}\n}\n","'use strict';\n\nimport { eatQuoted } from '@emmetio/stream-reader-utils';\n\nconst opt = { throws: true };\n\n/**\n * Consumes quoted literal from current stream position and returns it’s inner,\n * unquoted, value\n * @param  {StringReader} stream\n * @return {String} Returns `null` if unable to consume quoted value from current\n * position\n */\nexport default function(stream) {\n\tif (eatQuoted(stream, opt)) {\n\t\treturn stream.current().slice(1, -1);\n\t}\n}\n","'use strict';\n\nconst TEXT_START = 123; // {\nconst TEXT_END = 125; // }\nconst ESCAPE =  92; // \\ character\n\n/**\n * Consumes text node `{...}` from stream\n * @param  {StreamReader} stream\n * @return {String} Returns consumed text value (without surrounding braces) or\n * `null` if there’s no text at starting position\n */\nexport default function consumeText(stream) {\n\t// NB using own implementation instead of `eatPair()` from @emmetio/stream-reader-utils\n\t// to disable quoted value consuming\n\tconst start = stream.pos;\n\n\tif (stream.eat(TEXT_START)) {\n\t\tlet stack = 1, ch;\n\t\tlet result = '';\n\t\tlet offset = stream.pos;\n\n\t\twhile (!stream.eof()) {\n\t\t\tch = stream.next();\n\t\t\tif (ch === TEXT_START) {\n\t\t\t\tstack++;\n\t\t\t} else if (ch === TEXT_END) {\n\t\t\t\tstack--;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn result + stream.substring(offset, stream.pos - 1);\n\t\t\t\t}\n\t\t\t} else if (ch === ESCAPE) {\n\t\t\t\tch = stream.next();\n\t\t\t\tif (ch === TEXT_START || ch === TEXT_END) {\n\t\t\t\t\tresult += stream.substring(offset, stream.pos - 2) + String.fromCharCode(ch);\n\t\t\t\t\toffset = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then paired character can’t be consumed\n\t\tstream.pos = start;\n\t\tthrow stream.error(`Unable to find closing ${String.fromCharCode(TEXT_END)} for text start`);\n\t}\n\n\treturn null;\n}\n","'use strict';\n\nimport { isWhiteSpace, isSpace, isQuote, isAlphaNumeric } from '@emmetio/stream-reader-utils';\nimport consumeQuoted from './quoted';\nimport consumeTextNode from './text';\n\nconst EXCL       = 33; // .\nconst DOT        = 46; // .\nconst EQUALS     = 61; // =\nconst ATTR_OPEN  = 91; // [\nconst ATTR_CLOSE = 93; // ]\n\nconst reAttributeName = /^\\!?[\\w\\-:\\$@]+\\.?$|^\\!?\\[[\\w\\-:\\$@]+\\]\\.?$/;\n\n/**\n * Consumes attributes defined in square braces from given stream.\n * Example:\n * [attr col=3 title=\"Quoted string\" selected. support={react}]\n * @param {StringReader} stream\n * @returns {Array} Array of consumed attributes\n */\nexport default function(stream) {\n\tif (!stream.eat(ATTR_OPEN)) {\n\t\treturn null;\n\t}\n\n\tconst result = [];\n\tlet token, attr;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\n\t\tif (stream.eat(ATTR_CLOSE)) {\n\t\t\treturn result; // End of attribute set\n\t\t} else if ((token = consumeQuoted(stream)) != null) {\n\t\t\t// Consumed quoted value: anonymous attribute\n\t\t\tresult.push({\n\t\t\t\tname: null,\n\t\t\t\tvalue: token\n\t\t\t});\n\t\t} else if (eatUnquoted(stream)) {\n\t\t\t// Consumed next word: could be either attribute name or unquoted default value\n\t\t\ttoken = stream.current();\n\n\t\t\t// In angular attribute names can be surrounded by []\n\t\t\tif (token[0] === '[' && stream.peek() === ATTR_CLOSE) {\n\t\t\t\tstream.next();\n\t\t\t\ttoken = stream.current();\n\t\t\t}\n\t\t\t\n\t\t\tif (!reAttributeName.test(token)) {\n\t\t\t\t// anonymous attribute\n\t\t\t\tresult.push({ name: null, value: token });\n\t\t\t} else {\n\t\t\t\t// Looks like a regular attribute\n\t\t\t\tattr = parseAttributeName(token);\n\t\t\t\tresult.push(attr);\n\n\t\t\t\tif (stream.eat(EQUALS)) {\n\t\t\t\t\t// Explicitly defined value. Could be a word, a quoted string\n\t\t\t\t\t// or React-like expression\n\t\t\t\t\tif ((token = consumeQuoted(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t} else if ((token = consumeTextNode(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t\tattr.options = {\n\t\t\t\t\t\t\tbefore: '{',\n\t\t\t\t\t\t\tafter: '}'\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (eatUnquoted(stream)) {\n\t\t\t\t\t\tattr.value = stream.current();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow stream.error('Expected attribute name');\n\t\t}\n\t}\n\n\tthrow stream.error('Expected closing \"]\" brace');\n}\n\nfunction parseAttributeName(name) {\n\tconst options = {};\n\n\t// If a first character in attribute name is `!` — it’s an implied\n\t// default attribute\n\tif (name.charCodeAt(0) === EXCL) {\n\t\tname = name.slice(1);\n\t\toptions.implied = true;\n\t}\n\n\t// Check for last character: if it’s a `.`, user wants boolean attribute\n\tif (name.charCodeAt(name.length - 1) === DOT) {\n\t\tname = name.slice(0, name.length - 1);\n\t\toptions.boolean = true;\n\t}\n\n\tconst attr = { name };\n\tif (Object.keys(options).length) {\n\t\tattr.options = options;\n\t}\n\n\treturn attr;\n}\n\n/**\n * Eats token that can be an unquoted value from given stream\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatUnquoted(stream) {\n\tconst start = stream.pos;\n\tif (stream.eatWhile(isUnquoted)) {\n\t\tstream.start = start;\n\t\treturn true;\n\t}\n}\n\nfunction isUnquoted(code) {\n\treturn !isSpace(code) && !isQuote(code)\n\t\t && code !== ATTR_CLOSE && code !== EQUALS;\n}\n","'use strict';\n\nimport Node from '@emmetio/node';\nimport { isAlphaNumeric } from '@emmetio/stream-reader-utils';\nimport consumeAttributes from './attribute';\nimport consumeTextNode from './text';\nimport consumeRepeat from './repeat';\n\nconst HASH    = 35; // #\nconst DOT     = 46; // .\nconst SLASH   = 47; // /\n\n/**\n * Consumes a single element node from current abbreviation stream\n * @param  {StringReader} stream\n * @return {Node}\n */\nexport default function(stream) {\n\t// consume element name, if provided\n\tconst start = stream.pos;\n\tconst node = new Node(eatName(stream));\n\tlet next;\n\n\twhile (!stream.eof()) {\n\t\tif (stream.eat(DOT)) {\n\t\t\tnode.addClass(eatName(stream));\n\t\t} else if (stream.eat(HASH)) {\n\t\t\tnode.setAttribute('id', eatName(stream));\n\t\t} else if (stream.eat(SLASH)) {\n\t\t\t// A self-closing indicator must be at the end of non-grouping node\n\t\t\tif (node.isGroup) {\n\t\t\t\tstream.backUp(1);\n\t\t\t\tthrow stream.error('Unexpected self-closing indicator');\n\t\t\t}\n\t\t\tnode.selfClosing = true;\n\t\t\tif (next = consumeRepeat(stream)) {\n\t\t\t\tnode.repeat = next;\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (next = consumeAttributes(stream)) {\n\t\t\tfor (let i = 0, il = next.length; i < il; i++) {\n\t\t\t\tnode.setAttribute(next[i]);\n\t\t\t}\n\t\t} else if ((next = consumeTextNode(stream)) !== null) {\n\t\t\tnode.value = next;\n\t\t} else if (next = consumeRepeat(stream)) {\n\t\t\tnode.repeat = next;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (start === stream.pos) {\n\t\tthrow stream.error(`Unable to consume abbreviation node, unexpected ${stream.peek()}`);\n\t}\n\n\treturn node;\n}\n\nfunction eatName(stream) {\n\tstream.start = stream.pos;\n\tstream.eatWhile(isName);\n\treturn stream.current();\n}\n\nfunction isName(code) {\n\treturn isAlphaNumeric(code)\n\t\t|| code === 45 /* - */\n\t\t|| code === 58 /* : */\n\t\t|| code === 36 /* $ */\n\t\t|| code === 64 /* @ */\n\t\t|| code === 33 /* ! */\n\t\t|| code === 95 /* _ */\n\t\t|| code === 37 /* % */;\n}\n","'use strict';\n\nimport Node from '@emmetio/node';\nimport StreamReader from '@emmetio/stream-reader';\nimport consumeRepeat from './repeat';\nimport consumeElement from './element';\n\nconst GROUP_START = 40; // (\nconst GROUP_END   = 41; // )\nconst OP_SIBLING  = 43; // +\nconst OP_CHILD    = 62; // >\nconst OP_CLIMB    = 94; // ^\n\n/**\n * Parses given string into a node tree\n * @param  {String} str Abbreviation to parse\n * @return {Node}\n */\nexport default function parse(str) {\n\tconst stream = new StreamReader(str.trim());\n\tconst root = new Node();\n\tlet ctx = root, groupStack = [], ch;\n\n\twhile (!stream.eof()) {\n\t\tch = stream.peek();\n\n\t\tif (ch === GROUP_START) { // start of group\n\t\t\t// The grouping node should be detached to properly handle\n\t\t\t// out-of-bounds `^` operator. Node will be attached right on group end\n\t\t\tconst node = new Node();\n\t\t\tgroupStack.push([node, ctx, stream.pos]);\n\t\t\tctx = node;\n\t\t\tstream.next();\n\t\t\tcontinue;\n\t\t} else if (ch === GROUP_END) { // end of group\n\t\t\tconst lastGroup = groupStack.pop();\n\t\t\tif (!lastGroup) {\n\t\t\t\tthrow stream.error('Unexpected \")\" group end');\n\t\t\t}\n\n\t\t\tconst node = lastGroup[0];\n\t\t\tctx = lastGroup[1];\n\t\t\tstream.next();\n\n\t\t\t// a group can have a repeater\n\t\t\tif (node.repeat = consumeRepeat(stream)) {\n\t\t\t\tctx.appendChild(node);\n\t\t\t} else {\n\t\t\t\t// move all children of group into parent node\n\t\t\t\twhile (node.firstChild) {\n\t\t\t\t\tctx.appendChild(node.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// for convenience, groups can be joined with optional `+` operator\n\t\t\tstream.eat(OP_SIBLING);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst node = consumeElement(stream);\n\t\tctx.appendChild(node);\n\n\t\tif (stream.eof()) {\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (stream.peek()) {\n\t\t\tcase OP_SIBLING:\n\t\t\t\tstream.next();\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CHILD:\n\t\t\t\tstream.next();\n\t\t\t\tctx = node;\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CLIMB:\n\t\t\t\t// it’s perfectly valid to have multiple `^` operators\n\t\t\t\twhile (stream.eat(OP_CLIMB)) {\n\t\t\t\t\tctx = ctx.parent || ctx;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t}\n\t}\n\n\tif (groupStack.length) {\n\t\tstream.pos = groupStack.pop()[2];\n\t\tthrow stream.error('Expected group close');\n\t}\n\n\treturn root;\n}\n\nfunction last(arr) {\n\treturn arr[arr.length - 1];\n}\n","import parse from '@emmetio/abbreviation';\n\n/**\n * For every node in given `tree`, finds matching snippet from `registry` and\n * resolves it into a parsed abbreviation. Resolved node is then updated or\n * replaced with matched abbreviation tree.\n *\n * A HTML registry basically contains aliases to another Emmet abbreviations,\n * e.g. a predefined set of name, attribues and so on, possibly a complex\n * abbreviation with multiple elements. So we have to get snippet, parse it\n * and recursively resolve it.\n *\n * @param  {Node} tree                 Parsed Emmet abbreviation\n * @param  {SnippetsRegistry} registry Registry with all available snippets\n * @return {Node} Updated tree\n */\n\nvar index = function(tree, registry) {\n    tree.walk(node => resolveNode(node, registry));\n    return tree;\n};\n\nfunction resolveNode(node, registry) {\n    const stack = new Set();\n    const resolve = node => {\n        const snippet = registry.resolve(node.name);\n        // A snippet in stack means circular reference.\n        // It can be either a user error or a perfectly valid snippet like\n        // \"img\": \"img[src alt]/\", e.g. an element with predefined shape.\n        // In any case, simply stop parsing and keep element as is\n        if (!snippet || stack.has(snippet)) {\n            return;\n        }\n\n        // In case if matched snippet is a function, pass control into it\n        if (typeof snippet.value === 'function') {\n            return snippet.value(node, registry, resolve);\n        }\n\n        const tree = parse(snippet.value);\n\n        stack.add(snippet);\n        tree.walk(resolve);\n        stack.delete(snippet);\n\n        // move current node contents into new tree\n        const childTarget = findDeepestNode(tree);\n        merge(childTarget, node);\n\n        while (tree.firstChild) {\n            node.parent.insertBefore(tree.firstChild, node);\n        }\n\n        childTarget.parent.insertBefore(node, childTarget);\n        childTarget.remove();\n    };\n\n    resolve(node);\n}\n\n/**\n * Adds data from first node into second node and returns it\n * @param  {Node} from\n * @param  {Node} to\n * @return {Node}\n */\nfunction merge(from, to) {\n    to.name = from.name;\n\n    if (from.selfClosing) {\n        to.selfClosing = true;\n    }\n\n    if (from.value != null) {\n        to.value = from.value;\n    }\n\n    if (from.repeat) {\n        to.repeat = Object.assign({}, from.repeat);\n    }\n\n    return mergeAttributes(from, to);\n}\n\n/**\n * Transfer attributes from first element to second one and preserve first\n * element’s attributes order\n * @param  {Node} from\n * @param  {Node} to\n * @return {Node}\n */\nfunction mergeAttributes(from, to) {\n    mergeClassNames(from, to);\n\n    // It’s important to preserve attributes order: ones in `from` have higher\n    // pripority than in `to`. Collect attributes in map in order they should\n    // appear in `to`\n    const attrMap = new Map();\n\n    let attrs = from.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        attrMap.set(attrs[i].name, attrs[i].clone());\n    }\n\n    attrs = to.attributes.slice();\n    for (let i = 0, attr, a; i < attrs.length; i++) {\n        attr = attrs[i];\n        if (attrMap.has(attr.name)) {\n            a = attrMap.get(attr.name);\n            a.value = attr.value;\n\n            // If user explicitly wrote attribute in abbreviation, it’s no longer\n            // implied and should be outputted even if value is empty\n            if (a.options.implied) {\n                a.options.implied = false;\n            }\n        } else {\n            attrMap.set(attr.name, attr);\n        }\n\n        to.removeAttribute(attr);\n    }\n\n    const newAttrs = Array.from(attrMap.values());\n    for (let i = 0; i < newAttrs.length; i++) {\n        to.setAttribute(newAttrs[i]);\n    }\n\n    return to;\n}\n\n/**\n * Adds class names from first node to second one\n * @param  {Node} from\n * @param  {Node} to\n * @return {Node}\n */\nfunction mergeClassNames(from, to) {\n    const classNames = from.classList;\n    for (let i = 0; i < classNames.length; i++) {\n        to.addClass(classNames[i]);\n    }\n\n    return to;\n}\n\n/**\n * Finds node which is the deepest for in current node or node iteself.\n * @param  {Node} node\n * @return {Node}\n */\nfunction findDeepestNode(node) {\n\twhile (node.children.length) {\n\t\tnode = node.children[node.children.length - 1];\n\t}\n\n\treturn node;\n}\n\nexport default index;\n","const inlineElements = new Set('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'.split(','));\nconst elementMap = {\n    p: 'span',\n    ul: 'li',\n    ol: 'li',\n    table: 'tr',\n    tr: 'td',\n    tbody: 'tr',\n    thead: 'tr',\n    tfoot: 'tr',\n    colgroup: 'col',\n    select: 'option',\n    optgroup: 'option',\n    audio: 'source',\n    video: 'source',\n    object: 'param',\n    map: 'area'\n};\n\n/**\n * Returns best child node name for given parent node name\n * @param  {String} parentName Name of parent node\n * @return {String}\n */\nfunction resolveImplicitName(parentName) {\n    parentName = (parentName || '').toLowerCase();\n    return elementMap[parentName]\n        || (inlineElements.has(parentName) ? 'span' : 'div');\n}\n\nexport default resolveImplicitName;\n","import resolveImplicitTag from '@emmetio/implicit-tag';\n\n/**\n * Adds missing tag names for given tree depending on node’s parent name\n */\nvar implicitTags = function(tree) {\n    tree.walk(node => {\n        // resolve only nameless nodes without content\n        if (node.name == null && node.attributes.length) {\n            node.name = resolveImplicitTag(node.parent.name);\n        }\n    });\n    return tree;\n};\n\n/**\n * Locates all occurances of given `token` which are not escaped (e.g. are not\n * preceded with `\\`) given in `str`\n * @param  {String} str\n * @return {Array}  Array of token ranges\n */\nfunction findUnescapedTokens(str, token) {\n    const result = new Set();\n    const tlen = token.length;\n\n    // 1. Find all occurances of tokens\n    let pos = 0;\n    while ((pos = str.indexOf(token, pos)) !== -1) {\n        result.add(pos);\n        pos += tlen;\n    }\n\n    if (result.size) {\n        // 2. Remove ones that escaped\n        let pos = 0;\n        const len = str.length;\n\n        while (pos < len) {\n            if (str[pos++] === '\\\\') {\n                result.delete(pos++);\n            }\n        }\n    }\n\n    return Array.from(result).map(ix => range(ix, tlen));\n}\n\n/**\n * Replaces `ranges`, generated by `range()` function, with given `value` in `str`\n * @param  {String} str    Where to replace ranges\n * @param  {Array} ranges Ranes, created by `range()` function\n * @param  {String|Function} value  Replacement value. If it’s a function, it\n * will take a range value as argument and should return a new string\n * @return {String}\n */\nfunction replaceRanges(str, ranges, value) {\n\t// should walk from the end of array to keep ranges valid after replacement\n\tfor (let i = ranges.length - 1; i >= 0; i--) {\n\t\tconst r = ranges[i];\n\n        let offset = 0;\n        let offsetLength = 0;\n        let descendingOrder = false;\n\n        if (str.substr(r[0] + r[1], 1) === '@'){\n            if (str.substr(r[0] + r[1] + 1, 1) === '-') {\n                descendingOrder = true;\n            } \n            const matches = str.substr(r[0] + r[1] + 1 + Number(descendingOrder)).match(/^(\\d+)/);\n            if (matches) {\n                offsetLength = matches[1].length + 1 + Number(descendingOrder);\n                offset = parseInt(matches[1]) - 1;\n            } else {\n                offsetLength = 2;\n            }\n        }\n\n\t\tstr = str.substring(0, r[0])\n\t\t\t+ (typeof value === 'function' ? value(str.substr(r[0], r[1]), offset, descendingOrder) : value)\n\t\t\t+ str.substring(r[0] + r[1] + offsetLength);\n\t}\n\n\treturn str;\n}\n\nfunction range(start, length) {\n    return [start, length];\n}\n\nconst numberingToken = '$';\n\n/**\n * Numbering of expanded abbreviation: finds all nodes with `$` in value\n * or attributes and replaces its occurances with repeater value\n */\nvar applyNumbering = function(tree) {\n    tree.walk(applyNumbering$1);\n    return tree;\n};\n\n/**\n * Applies numbering for given node: replaces occurances of numbering token\n * in node’s name, content and attributes\n * @param  {Node} node\n * @return {Node}\n */\nfunction applyNumbering$1(node) {\n    const repeater = findRepeater(node);\n\n    if (repeater && repeater.value != null) {\n        // NB replace numbering in nodes with explicit repeater only:\n        // it solves issues with abbreviations like `xsl:if[test=$foo]` where\n        // `$foo` is preferred output\n        const value = repeater.value;\n        const count = repeater.count;\n\n        node.name = replaceNumbering(node.name, value, count);\n        node.value = replaceNumbering(node.value, value, count);\n        node.attributes.forEach(attr => {\n            const copy = node.getAttribute(attr.name).clone();\n            copy.name = replaceNumbering(attr.name, value, count);\n            copy.value = replaceNumbering(attr.value, value, count);\n            node.replaceAttribute(attr.name, copy);\n        });\n    }\n\n    return node;\n}\n\n/**\n * Returns repeater object for given node\n * @param  {Node} node\n * @return {Object}\n */\nfunction findRepeater(node) {\n    while (node) {\n        if (node.repeat) {\n            return node.repeat;\n        }\n\n        node = node.parent;\n    }\n}\n\n/**\n * Replaces numbering in given string\n * @param  {String} str\n * @param  {Number} value\n * @return {String}\n */\nfunction replaceNumbering(str, value, count) {\n    // replace numbering in strings only: skip explicit wrappers that could\n    // contain unescaped numbering tokens\n    if (typeof str === 'string') {\n        const ranges = getNumberingRanges(str);\n        return replaceNumberingRanges(str, ranges, value, count);\n    }\n\n    return str;\n}\n\n/**\n * Returns numbering ranges, e.g. ranges of `$` occurances, in given string.\n * Multiple adjacent ranges are combined\n * @param  {String} str\n * @return {Array}\n */\nfunction getNumberingRanges(str) {\n    return findUnescapedTokens(str || '', numberingToken)\n    .reduce((out, range$$1) => {\n        // skip ranges that actually belongs to output placeholder or tabstops\n        if (!/[#{]/.test(str[range$$1[0] + 1] || '')) {\n            const lastRange = out[out.length - 1];\n            if (lastRange && lastRange[0] + lastRange[1] === range$$1[0]) {\n                lastRange[1] += range$$1[1];\n            } else {\n                out.push(range$$1);\n            }\n        }\n\n        return out;\n    }, []);\n}\n\n/**\n * @param  {String} str\n * @param  {Array} ranges\n * @param  {Number} value\n * @return {String}\n */\nfunction replaceNumberingRanges(str, ranges, value, count) {\n    const replaced = replaceRanges(str, ranges, (token, offset, descendingOrder) => {\n    let _value = descendingOrder ? String(offset + count - value + 1) : String(value + offset);\n        // pad values for multiple numbering tokens, e.g. 3 for $$$ becomes 003\n        while (_value.length < token.length) {\n            _value = '0' + _value;\n        }\n        return _value;\n    });\n\n    // unescape screened numbering tokens\n    return unescapeString(replaced);\n}\n\n/**\n * Unescapes characters, screened with `\\`, in given string\n * @param  {String} str\n * @return {String}\n */\nfunction unescapeString(str) {\n    let i = 0, result = '';\n    const len = str.length;\n\n    while (i < len) {\n        const ch = str[i++];\n        result += (ch === '\\\\') ? (str[i++] || '') : ch;\n    }\n\n    return result;\n}\n\n/** Placeholder for inserted content */\nconst placeholder = '$#';\n\n/** Placeholder for caret */\nconst caret = '|';\n\nconst reUrl = /^((?:https?|ftp|file):\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/;\nconst reEmail = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\nconst reProto = /^([a-z]+:)?\\/\\//i;\n\n/**\n * Inserts content into node with implicit repeat count: this node is then\n * duplicated for each content item and content itself is inserted either into\n * deepest child or instead of a special token.\n *\n * This method uses two distinct steps: `prepare()` and `insert()` since most\n * likely these steps will be used separately to properly insert content\n * with unescaped `$` numbering markers.\n *\n * @param {Node} tree Parsed abbreviation\n * @param {String[]} content Array of content items to insert\n * @return {Node}\n */\n/**\n * Finds nodes with implicit repeat and creates `amount` copies of it in tree\n * @param  {Node} tree\n * @param  {Number} amount\n * @return {Node}\n */\nfunction prepare(tree, amount) {\n    amount = amount || 1;\n    tree.walk(node => {\n        if (node.repeat && node.repeat.count === null) {\n            for (let i = 0; i < amount; i++) {\n                const clone = node.clone(true);\n                clone.repeat.implicit = true;\n                clone.repeat.count = amount;\n                clone.repeat.value = i + 1;\n                clone.repeat.index = i;\n                node.parent.insertBefore(clone, node);\n            }\n\n            node.remove();\n        }\n    });\n\n    return tree;\n}\n\n/**\n * Inserts content into implicitly repeated nodes, created by `prepare()` method\n * @param  {Node} tree\n * @param  {String[]} content\n * @return {Node}\n */\nfunction insert(tree, content) {\n    if (Array.isArray(content) && content.length) {\n        let updated = false;\n        tree.walk(node => {\n            if (node.repeat && node.repeat.implicit) {\n                updated = true;\n                insertContent(node, content[node.repeat.index]);\n            }\n        });\n\n        if (!updated) {\n            // no node with implicit repeat was found, insert content as\n            // deepest child\n            setNodeContent(findDeepestNode(tree), content.join('\\n'));\n        }\n    }\n\n    return tree;\n}\n\n/**\n * Inserts `content` into given `node`: either replaces output placeholders\n * or inserts it into deepest child node\n * @param  {Node} node\n * @param  {String} content\n * @return {Node}\n */\nfunction insertContent(node, content) {\n\tlet inserted = insertContentIntoPlaceholder(node, content);\n\tnode.walk(child => inserted |= insertContentIntoPlaceholder(child, content));\n\n\tif (!inserted) {\n\t\t// no placeholders were found in node, insert content into deepest child\n\t\tsetNodeContent(findDeepestNode(node), content);\n\t}\n\n\treturn node;\n}\n\n/**\n * Inserts given `content` into placeholders for given `node`. Placeholders\n * might be available in attribute values and node content\n * @param  {Node} node\n * @param  {String} content\n * @return {Boolean} Returns `true` if placeholders were found and replaced in node\n */\nfunction insertContentIntoPlaceholder(node, content) {\n\tconst state = {replaced: false};\n\n\tnode.value = replacePlaceholder(node.value, content, state);\n\tnode.attributes.forEach(attr => {\n\t\tif (attr.value) {\n\t\t\tnode.setAttribute(attr.name, replacePlaceholder(attr.value, content, state));\n\t\t}\n\t});\n\n\treturn state.replaced;\n}\n\n/**\n * Replaces all placeholder occurances in given `str` with `value`\n * @param  {String} str\n * @param  {String} value\n * @param  {Object} [_state] If provided, set `replaced` property of given\n * object to `true` if placeholder was found and replaced\n * @return {String}\n */\nfunction replacePlaceholder(str, value, _state) {\n\tif (typeof str === 'string') {\n\t\tconst ranges = findUnescapedTokens(str, placeholder);\n\t\tif (ranges.length) {\n\t\t\tif (_state) {\n\t\t\t\t_state.replaced = true;\n\t\t\t}\n\n\t\t\tstr = replaceRanges(str, ranges, value);\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * Finds node which is the deepest for in current node or node iteself.\n * @param  {Node} node\n * @return {Node}\n */\nfunction findDeepestNode(node) {\n\twhile (node.children.length) {\n\t\tnode = node.children[node.children.length - 1];\n\t}\n\n\treturn node;\n}\n\n/**\n * Updates content of given node\n * @param {Node} node\n * @param {String} content\n */\nfunction setNodeContent(node, content) {\n\t// find caret position and replace it with content, if possible\n\tif (node.value) {\n\t\tconst ranges = findUnescapedTokens(node.value, caret);\n\t\tif (ranges.length) {\n\t\t\tnode.value = replaceRanges(node.value, ranges, content);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (node.name.toLowerCase() === 'a' || node.hasAttribute('href')) {\n\t\t// special case: inserting content into `<a>` tag\n\t\tif (reUrl.test(content)) {\n\t\t\tnode.setAttribute('href', (reProto.test(content) ? '' : 'http://') + content);\n\t\t} else if (reEmail.test(content)) {\n\t\t\tnode.setAttribute('href', 'mailto:' + content);\n\t\t}\n\t}\n\n\tnode.value = content;\n}\n\nconst defaultOptions = {\n\telement: '__',\n\tmodifier: '_'\n};\n\nconst reElement  = /^(-+)([a-z0-9]+[a-z0-9-]*)/i;\nconst reModifier = /^(_+)([a-z0-9]+[a-z0-9-_]*)/i;\nconst blockCandidates1 = className => /^[a-z]\\-/i.test(className);\nconst blockCandidates2 = className => /^[a-z]/i.test(className);\n\n/**\n * BEM transformer: updates class names written as `-element` and\n * `_modifier` into full class names as described in BEM specs. Also adds missing\n * class names: fir example, if node contains `.block_modifier` class, ensures\n * that element contains `.block` class as well\n */\nvar bem = function(tree, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\n\ttree.walk(node => expandClassNames(node, options));\n\n\tconst lookup = createBlockLookup(tree);\n\ttree.walk(node => expandShortNotation(node, lookup, options));\n\n\treturn tree;\n};\n\n/**\n * Expands existing class names in BEM notation in given `node`.\n * For example, if node contains `b__el_mod` class name, this method ensures\n * that element contains `b__el` class as well\n * @param  {Node} node\n * @param  {Object} options\n * @return {Set}\n */\nfunction expandClassNames(node, options) {\n\tconst classNames = node.classList.reduce((out, cl) => {\n\t\t// remove all modifiers and element prefixes from class name to get a base element name\n\t\tconst ix = cl.indexOf('_');\n\t\tif (ix > 0 && !cl.startsWith('-')) {\n\t\t\tout.add(cl.slice(0, ix));\n\t\t    out.add(cl.slice(ix));\n\t\t\treturn out;\n\t\t}\n\n\t\treturn out.add(cl);\n\t}, new Set());\n\n\tif (classNames.size) {\n\t\tnode.setAttribute('class', Array.from(classNames).join(' '));\n\t}\n}\n\n/**\n * Expands short BEM notation, e.g. `-element` and `_modifier`\n * @param  {Node} node      Parsed Emmet abbreviation node\n * @param  {Map} lookup     BEM block name lookup\n * @param  {Object} options\n */\nfunction expandShortNotation(node, lookup, options) {\n\tconst classNames = node.classList.reduce((out, cl) => {\n\t\tlet prefix, m;\n\t\tconst originalClass = cl;\n\n\t\t// parse element definition (could be only one)\n\t\tif (m = cl.match(reElement)) {\n\t\t\tprefix = getBlockName(node, lookup, m[1]) + options.element + m[2];\n\t\t\tout.add(prefix);\n\t\t\tcl = cl.slice(m[0].length);\n\t\t}\n\n\t\t// parse modifiers definitions \n\t\tif (m = cl.match(reModifier)) {\n\t\t\tif (!prefix) {\n\t\t\t\tprefix = getBlockName(node, lookup, m[1]);\n\t\t\t\tout.add(prefix);\n\t\t\t}\n\n\t\t\tout.add(`${prefix}${options.modifier}${m[2]}`);\n\t\t\tcl = cl.slice(m[0].length);\n\t\t}\n\n\t\tif (cl === originalClass) {\n\t\t\t// class name wasn’t modified: it’s not a BEM-specific class,\n\t\t\t// add it as-is into output\n\t\t\tout.add(originalClass);\n\t\t}\n\n\t\treturn out;\n\t}, new Set());\n\n\tconst arrClassNames = Array.from(classNames).filter(Boolean);\n\tif (arrClassNames.length) {\n\t\tnode.setAttribute('class', arrClassNames.join(' '));\n\t}\n}\n\n/**\n * Creates block name lookup for each node in given tree, e.g. finds block\n * name explicitly for each node\n * @param  {Node} tree\n * @return {Map}\n */\nfunction createBlockLookup(tree) {\n\tconst lookup = new Map();\n\n\ttree.walk(node => {\n\t\tconst classNames = node.classList;\n\t\tif (classNames.length) {\n\t\t\t// guess best block name from class or use parent’s block name\n\t\t\tlookup.set(node,\n\t\t\t\tfind(classNames, blockCandidates1)\n\t\t\t\t|| find(classNames, blockCandidates2)\n\t\t\t\t|| lookup.get(node.parent)\n\t\t\t);\n\t\t}\n\t});\n\n\treturn lookup;\n}\n\n/**\n * Returns block name for given `node` by `prefix`, which tells the depth of\n * of parent node lookup\n * @param  {Node} node\n * @param  {Map} lookup\n * @param  {String} prefix\n * @return {String}\n */\nfunction getBlockName(node, lookup, prefix) {\n\tlet depth = prefix.length > 1 ? prefix.length : 0;\n\n\t// NB don’t walk up to root node, stay at first root child in case of\n\t// too deep prefix\n\twhile (node.parent && node.parent.parent && depth--) {\n\t\tnode = node.parent;\n\t}\n\n\treturn lookup.get(node) || '';\n}\n\nfunction find(arr, filter) {\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif (reElement.test(arr[i]) || reModifier.test(arr[i])) {\n\t\t\tbreak;\n\t\t}\n\t\tif (filter(arr[i])) {\n\t\t\treturn arr[i];\n\t\t}\n\t}\n}\n\n/**\n * JSX transformer: replaces `class` and `for` attributes with `className` and\n * `htmlFor` attributes respectively\n */\nvar jsx = function(tree) {\n\ttree.walk(node => {\n\t\treplace(node, 'class', 'className');\n\t\treplace(node, 'for', 'htmlFor');\n\t});\n\treturn tree;\n};\n\nfunction replace(node, oldName, newName) {\n\tlet attr = node.getAttribute(oldName);\n\tif (attr) {\n\t\tattr.name = newName;\n\t}\n}\n\nconst reSupporterNames = /^xsl:(variable|with\\-param)$/i;\n\n/**\n * XSL transformer: removes `select` attributes from certain nodes that contain\n * children\n */\nvar xsl = function(tree) {\n\ttree.walk(node => {\n\t\tif (reSupporterNames.test(node.name || '') && (node.children.length || node.value)) {\n\t\t\tnode.removeAttribute('select');\n\t\t}\n\t});\n\treturn tree;\n};\n\nconst supportedAddons = { bem, jsx, xsl };\n\n/**\n * Runs additional transforms on given tree.\n * These transforms may introduce side-effects and unexpected result\n * so they are not applied by default, authors must specify which addons\n * in `addons` argument as `{addonName: addonOptions}`\n * @param {Node} tree Parsed Emmet abbreviation\n * @param {Object} addons Add-ons to apply and their options\n */\nvar addons = function(tree, addons) {\n    Object.keys(addons || {}).forEach(key => {\n        if (key in supportedAddons) {\n            const addonOpt = typeof addons[key] === 'object' ? addons[key] : null;\n            tree = tree.use(supportedAddons[key], addonOpt);\n        }\n    });\n\n    return tree;\n};\n\n/**\n * Applies basic HTML-specific transformations for given parsed abbreviation:\n * – resolve implied tag names\n * – insert repeated content\n * – resolve node numbering\n */\nvar index = function(tree, content, appliedAddons) {\n    if (typeof content === 'string') {\n        content = [content];\n    } else if (content && typeof content === 'object' && !Array.isArray(content)) {\n        appliedAddons = content;\n        content = null;\n    }\n\n    return tree\n    .use(implicitTags)\n    .use(prepare, Array.isArray(content) ? content.length : null)\n    .use(applyNumbering)\n    .use(insert, content)\n    .use(addons, appliedAddons);\n};\n\nexport default index;\n","/**\n * Replaces all unescaped ${variable} occurances in given parsed abbreviation\n * `tree` with values provided in `variables` hash. Precede `$` with `\\` to\n * escape it and skip replacement\n * @param {Node} tree Parsed abbreviation tree\n * @param {Object} variables Variables values\n * @return {Node}\n */\nfunction replaceVariables(tree, variables) {\n\tvariables = variables || {};\n    tree.walk(node => replaceInNode(node, variables));\n    return tree;\n}\n\nfunction replaceInNode(node, variables) {\n    // Replace variables in attributes.\n    const attrs = node.attributes;\n\n    for (let i = 0, il = attrs.length; i < il; i++) {\n        const attr = attrs[i];\n        if (typeof attr.value === 'string') {\n            node.setAttribute(attr.name, replaceInString(attr.value, variables));\n        }\n    }\n\n    if (node.value != null) {\n        node.value = replaceInString(node.value, variables);\n    }\n\n    return node;\n}\n\n/**\n * Replaces all unescaped `${variable}` occurances in given string with values\n * from `variables` object\n * @param  {String} string\n * @param  {Object} variables\n * @return {String}\n */\nfunction replaceInString(string, variables) {\n    const model = createModel(string);\n    let offset = 0;\n    let output = '';\n\n    for (let i = 0, il = model.variables.length; i < il; i++) {\n        const v = model.variables[i];\n        let value = v.name in variables ? variables[v.name] : v.name;\n        if (typeof value === 'function') {\n            value = value(model.string, v, offset + v.location);\n        }\n\n        output += model.string.slice(offset, v.location) + value;\n        offset = v.location + v.length;\n    }\n\n    return output + model.string.slice(offset);\n}\n\n/**\n * Creates variable model from given string. The model contains a `string` with\n * all escaped variable tokens written without escape symbol and `variables`\n * property with all unescaped variables and their ranges\n * @param  {String} string\n * @return {Object}\n */\nfunction createModel(string) {\n    const reVariable = /\\$\\{([a-z][\\w\\-]*)\\}/ig;\n    const escapeCharCode = 92; // `\\` symbol\n    const variables = [];\n\n    // We have to replace unescaped (e.g. not preceded with `\\`) tokens.\n    // Instead of writing a stream parser, we’ll cut some edges here:\n    // 1. Find all tokens\n    // 2. Walk string char-by-char and resolve only tokens that are not escaped\n    const tokens = new Map();\n    let m;\n    while (m = reVariable.exec(string)) {\n        tokens.set(m.index, m);\n    }\n\n    if (tokens.size) {\n        let start = 0, pos = 0, len = string.length;\n        let output = '';\n        while (pos < len) {\n            if (string.charCodeAt(pos) === escapeCharCode && tokens.has(pos + 1)) {\n                // Found escape symbol that escapes variable: we should\n                // omit this symbol in output string and skip variable\n                const token = tokens.get(pos + 1);\n                output += string.slice(start, pos) + token[0];\n                start = pos = token.index + token[0].length;\n                tokens.delete(pos + 1);\n                continue;\n            }\n\n            pos++;\n        }\n\n        string = output + string.slice(start);\n\n        // Not using `.map()` here to reduce memory allocations\n        const validMatches = Array.from(tokens.values());\n        for (let i = 0, il = validMatches.length; i < il; i++) {\n            const token = validMatches[i];\n            variables.push({\n                name: token[1],\n                location: token.index,\n                length: token[0].length\n            });\n        }\n    }\n\n    return {string, variables};\n}\n\nexport default replaceVariables;\n","import parseFields from '@emmetio/field-parser';\n\nconst defaultFieldsRenderer = text => text;\n\n/**\n * Output node is an object containing generated output for given Emmet\n * abbreviation node. Output node can be passed to various processors that\n * may shape-up final node output. The final output is simply a concatenation\n * of `.open`, `.text` and `.close` properties and its `.before*` and `.after*`\n * satellites\n * @param {Node}     node           Parsed Emmet abbreviation node\n * @param {Function} fieldsRenderer A function for rendering fielded text (text with\n * tabstops) for current node. @see ./render.js for details\n */\nclass OutputNode {\n\tconstructor(node, fieldsRenderer, options) {\n\t\tif (typeof fieldsRenderer === 'object') {\n\t\t\toptions = fieldsRenderer;\n\t\t\tfieldsRenderer = null;\n\t\t}\n\n\t\tthis.node = node;\n\t\tthis._fieldsRenderer = fieldsRenderer || defaultFieldsRenderer;\n\n\t\tthis.open = null;\n\t\tthis.beforeOpen = '';\n\t\tthis.afterOpen = '';\n\n\t\tthis.close = null;\n\t\tthis.beforeClose = '';\n\t\tthis.afterClose = '';\n\n\t\tthis.text = null;\n\t\tthis.beforeText = '';\n\t\tthis.afterText = '';\n\n\t\tthis.indent = '';\n\t\tthis.newline = '';\n\n\t\tif (options) {\n            Object.assign(this, options);\n        }\n\t}\n\n\tclone() {\n\t\treturn new this.constructor(this.node, this);\n\t}\n\n\t/**\n\t * Properly indents given multiline text\n\t * @param {String} text\n\t */\n\tindentText(text) {\n\t\tconst lines = splitByLines(text);\n        if (lines.length === 1) {\n            // no newlines, nothing to indent\n            return text;\n        }\n\n        // No newline and no indent means no formatting at all:\n        // in this case we should replace newlines with spaces\n        const nl = (!this.newline && !this.indent) ? ' ' : this.newline;\n        return lines.map((line, i) => i ? this.indent + line : line).join(nl);\n\t}\n\n\t/**\n\t * Renders given text with fields\n\t * @param {String} text\n\t * @return {String}\n\t */\n\trenderFields(text) {\n\t\treturn this._fieldsRenderer(text);\n\t}\n\n\ttoString(children) {\n\t\tconst open = this._wrap(this.open, this.beforeOpen, this.afterOpen);\n\t\tconst close = this._wrap(this.close, this.beforeClose, this.afterClose);\n\t\tconst text = this._wrap(this.text, this.beforeText, this.afterText);\n\n\t\treturn open + text + (children != null ? children : '') + close;\n\t}\n\n\t_wrap(str, before, after) {\n\t\tbefore = before != null ? before : '';\n\t\tafter = after != null ? after : '';\n\n        // automatically trim whitespace for non-empty wraps\n        if (str != null) {\n            str = before ? str.replace(/^\\s+/, '') : str;\n            str = after ? str.replace(/\\s+$/, '') : str;\n            return before + this.indentText(str) + after;\n        }\n\n        return '';\n\t}\n}\n\n/**\n * Splits given text by lines\n * @param  {String} text\n * @return {String[]}\n */\nfunction splitByLines(text) {\n\treturn (text || '').split(/\\r\\n|\\r|\\n/g);\n}\n\n/**\n * Default output of field (tabstop)\n * @param  {Number} index       Field index\n * @param  {String} placeholder Field placeholder, can be null\n * @return {String}\n */\nconst defaultField = (index, placeholder) => (placeholder || '');\n\n/**\n * Renders given parsed abbreviation `tree` via `formatter` function.\n\n * @param {Node}     tree      Parsed Emmet abbreviation\n * @param {Function} [field]   Optional function to format field/tabstop (@see `defaultField`)\n * @param {Function} formatter Output formatter function. It takes an output node—\n * a special wrapper for parsed node that holds formatting and output properties—\n * and updates its output properties to shape-up node’s output.\n * Function arguments:\n * \t– `outNode`: OutputNode\n * \t– `renderFields`: a helper function that parses fields/tabstops from given\n * \t   text and replaces them with `field` function output.\n * \t   It also takes care about field indicies and ensures that the same indicies\n * \t   from different nodes won’t collide\n */\nfunction render(tree, field, formatter) {\n    if (typeof formatter === 'undefined') {\n        formatter = field;\n        field = null;\n    }\n\n    field = field || defaultField;\n\n    // Each node may contain fields like `${1:placeholder}`.\n\t// Since most modern editors will link all fields with the same\n\t// index, we have to ensure that different nodes has their own indicies.\n\t// We’ll use this `fieldState` object to globally increment field indices\n\t// during output\n\tconst fieldState = { index: 1 };\n\n    const fieldsRenderer = text => text == null\n        ? field(fieldState.index++)\n        : getFieldsModel(text, fieldState).mark(field);\n\n\treturn run(tree.children, formatter, fieldsRenderer);\n}\n\nfunction run(nodes, formatter, fieldsRenderer) {\n\treturn nodes.map(node => {\n\t\tconst outNode = formatter(new OutputNode(node, fieldsRenderer));\n\t\treturn outNode ? outNode.toString(run(node.children, formatter, fieldsRenderer)) : '';\n\t}).join('');\n}\n\n/**\n * Returns fields (tab-stops) model with properly updated indices that won’t\n * collide with fields in other nodes of foprmatted tree\n * @param  {String|Object} text Text to get fields model from or model itself\n * @param  {Object} fieldState Abbreviation tree-wide field state reference\n * @return {Object} Field model\n */\nfunction getFieldsModel(text, fieldState) {\n\tconst model = typeof text === 'object' ? text : parseFields(text);\n    let largestIndex = -1;\n\n    model.fields.forEach(field => {\n\t\tfield.index += fieldState.index;\n\t\tif (field.index > largestIndex) {\n\t\t\tlargestIndex = field.index;\n\t\t}\n\t});\n\n\tif (largestIndex !== -1) {\n\t\tfieldState.index = largestIndex + 1;\n\t}\n\n    return model;\n}\n\nexport default render;\n","'use strict';\n\nconst TOKEN       = /^(.*?)([A-Z_]+)(.*?)$/;\nconst TOKEN_OPEN  = 91; // [\nconst TOKEN_CLOSE = 93; // ]\n\n/**\n * A basic templating engine.\n * Takes every `[TOKEN]` from given string and replaces it with\n * `TOKEN` value from given `data` attribute. The token itself may contain\n * various characters between `[`, token name and `]`. Contents of `[...]` will\n * be outputted only if `TOKEN` value is not empty. Also, only `TOKEN` name will\n * be replaced with actual value, all other characters will remain as is.\n *\n * Example:\n * ```\n * template('[<NAME>]', {NAME: 'foo'}) -> \"<foo>\"\n * template('[<NAME>]', {}) -> \"\"\n * ```\n */\nexport default function template(str, data) {\n\tif (str == null) {\n\t\treturn str;\n\t}\n\n\t// NB since token may contain inner `[` and `]`, we can’t just use regexp\n\t// for replacement, should manually parse string instead\n\tconst stack = [];\n\tconst replacer = (str, left, token, right) =>\n\t\tdata[token] != null ? left + data[token] + right : '';\n\n\tlet output = '';\n\tlet offset = 0, i = 0;\n\tlet code, lastPos;\n\n\twhile (i < str.length) {\n\t\tcode = str.charCodeAt(i);\n\t\tif (code === TOKEN_OPEN) {\n\t\t\tstack.push(i);\n\t\t} else if (code === TOKEN_CLOSE) {\n\t\t\tlastPos = stack.pop();\n\t\t\tif (!stack.length) {\n\t\t\t\toutput += str.slice(offset, lastPos) +\n\t\t\t\t\tstr.slice(lastPos + 1, i).replace(TOKEN, replacer);\n\t\t\t\toffset = i + 1;\n\t\t\t}\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn output + str.slice(offset);\n}\n","'use strict';\n\nimport parseFields from '@emmetio/field-parser';\n\n/**\n * Various utility methods used by formatters\n */\n\n/**\n * Splits given text by lines\n * @param  {String} text\n * @return {String[]}\n */\nexport function splitByLines(text) {\n\treturn (text || '').split(/\\r\\n|\\r|\\n/g);\n}\n\n/**\n * Check if given node is a first child in its parent\n * @param  {Node}  node\n * @return {Boolean}\n */\nexport function isFirstChild(node) {\n\treturn node.parent.firstChild === node;\n}\n\n/**\n * Check if given node is a last child in its parent node\n * @param  {Node}  node\n * @return {Boolean}\n */\nexport function isLastChild(node) {\n\treturn node.parent.lastChild === node;\n}\n\n/**\n * Check if given node is a root node\n * @param  {Node}  node\n * @return {Boolean}\n */\nexport function isRoot(node) {\n\treturn node && !node.parent;\n}\n\n/**\n * Check if given node is a pseudo-snippet: a text-only node with explicitly\n * defined children\n * @param  {Node}  node\n * @return {Boolean}\n */\nexport function isPseudoSnippet(node) {\n\treturn node.isTextOnly && !!node.children.length;\n}\n\n/**\n * Handles pseudo-snippet node.\n * A pseudo-snippet is a text-only node with explicitly defined children.\n * For such case, we have to figure out if pseudo-snippet contains fields\n * (tab-stops) in node value and “split” it: make contents before field with\n * lowest index node’s “open” part and contents after lowest index — “close”\n * part. With this trick a final output will look like node’s children\n * are nested inside node value\n * @param  {OutputNode} outNode\n * @return {Boolean} Returns “true” if given node is a pseudo-snippets,\n * `false` otherwise\n */\nexport function handlePseudoSnippet(outNode) {\n\tconst node = outNode.node; // original abbreviaiton node\n\n\tif (isPseudoSnippet(node)) {\n\t\tconst fieldsModel = parseFields(node.value);\n\t\tconst field = findLowestIndexField(fieldsModel);\n\t\tif (field) {\n\t\t\tconst parts = splitFieldsModel(fieldsModel, field);\n\t\t\toutNode.open = outNode.renderFields(parts[0]);\n\t\t\toutNode.close = outNode.renderFields(parts[1]);\n\t\t} else {\n\t\t\toutNode.text = outNode.renderFields(fieldsModel);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Finds field with lowest index in given text\n * @param  {Object} model\n * @return {Object}\n */\nexport function findLowestIndexField(model) {\n\treturn model.fields.reduce((result, field) =>\n\t\t!result || field.index < result.index ? field : result\n\t\t, null);\n}\n\n/**\n * Splits given fields model in two parts by given field\n * @param  {Object} model\n * @param  {Object} field\n * @return {Array} Two-items array\n */\nexport function splitFieldsModel(model, field) {\n\tconst ix = model.fields.indexOf(field);\n\n\tconst left = new model.constructor(\n\t\tmodel.string.slice(0, field.location),\n\t\tmodel.fields.slice(0, ix)\n\t);\n\n\tconst right = new model.constructor(\n\t\tmodel.string.slice(field.location + field.length),\n\t\tmodel.fields.slice(ix + 1)\n\t);\n\n\treturn [left, right];\n}\n","'use strict';\n\nimport parseFields from '@emmetio/field-parser';\nimport render from '@emmetio/output-renderer';\nimport template from '../lib/template';\nimport { handlePseudoSnippet, isFirstChild, isRoot, isPseudoSnippet } from '../lib/utils';\n\nconst commentOptions = {\n\t// enable node commenting\n\tenabled: false,\n\n\t// attributes that should trigger node commenting on specific node,\n\t// if commenting is enabled\n\ttrigger: ['id', 'class'],\n\n\t// comment before opening tag\n\tbefore: '',\n\n\t// comment after closing tag\n\tafter: '\\n<!-- /[#ID][.CLASS] -->'\n};\n\n/**\n * Renders given parsed Emmet abbreviation as HTML, formatted according to\n * `profile` options\n * @param  {Node}     tree    Parsed Emmet abbreviation\n * @param  {Profile}  profile Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nexport default function html(tree, profile, options) {\n\toptions = Object.assign({}, options);\n\tconst format = getFormatOptions(options);\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = setFormatting(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\n\t\t\tif (node.name) {\n\t\t\t\tconst name = profile.name(node.name);\n\t\t\t\tconst attrs = formatAttributes(outNode, profile);\n\n\t\t\t\toutNode.open = `<${name}${attrs}${node.selfClosing ? profile.selfClose() : ''}>`;\n\t\t\t\tif (!node.selfClosing) {\n\t\t\t\t\toutNode.close = `</${name}>`;\n\t\t\t\t}\n\n\t\t\t\tcommentNode(outNode, format.comment);\n\t\t\t}\n\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(node.value);\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * @param  {OutputNode} outNode Output wrapper of farsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction setFormatting(outNode, profile) {\n\tconst node = outNode.node;\n\n\tif (shouldFormatNode(node, profile)) {\n\t\toutNode.indent = profile.indent(getIndentLevel(node, profile));\n\t\toutNode.newline = '\\n';\n\t\tconst prefix = outNode.newline + outNode.indent;\n\n\t\t// do not format the very first node in output\n\t\tif (!isRoot(node.parent) || !isFirstChild(node)) {\n\t\t\toutNode.beforeOpen = prefix;\n\t\t\tif (node.isTextOnly) {\n\t\t\t\toutNode.beforeText = prefix;\n\t\t\t}\n\t\t}\n\n\t\tif (hasInnerFormatting(node, profile)) {\n\t\t\tif (!node.isTextOnly) {\n\t\t\t\toutNode.beforeText = prefix + profile.indent(1);\n\t\t\t}\n\t\t\toutNode.beforeClose = prefix;\n\t\t}\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Check if given node should be formatted\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {Boolean}\n */\nfunction shouldFormatNode(node, profile) {\n\tif (!profile.get('format')) {\n\t\treturn false;\n\t}\n\n\tif (node.parent.isTextOnly\n\t\t&& node.parent.children.length === 1\n\t\t&& parseFields(node.parent.value).fields.length) {\n\t\t// Edge case: do not format the only child of text-only node,\n\t\t// but only if parent contains fields\n\t\treturn false;\n\t}\n\n\treturn isInline(node, profile) ? shouldFormatInline(node, profile) : true;\n}\n\n/**\n * Check if given inline node should be formatted as well, e.g. it contains\n * enough adjacent siblings that should force formatting\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {Boolean}\n */\nfunction shouldFormatInline(node, profile) {\n\tif (!isInline(node, profile)) {\n\t\treturn false;\n\t}\n\n\tif (isPseudoSnippet(node)) {\n\t\treturn true;\n\t}\n\n\t// check if inline node is the next sibling of block-level node\n\tif (node.childIndex === 0) {\n\t\t// first node in parent: format if it’s followed by a block-level element\n\t\tlet next = node;\n\t\twhile (next = next.nextSibling) {\n\t\t\tif (!isInline(next, profile)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (!isInline(node.previousSibling, profile)) {\n\t\t// node is right after block-level element\n\t\treturn true;\n\t}\n\n\tif (profile.get('inlineBreak')) {\n\t\t// check for adjacent inline elements before and after current element\n\t\tlet adjacentInline = 1;\n\t\tlet before = node, after = node;\n\n\t\twhile (isInlineElement((before = before.previousSibling), profile)) {\n\t\t\tadjacentInline++;\n\t\t}\n\n\t\twhile (isInlineElement((after = after.nextSibling), profile)) {\n\t\t\tadjacentInline++;\n\t\t}\n\n\t\tif (adjacentInline >= profile.get('inlineBreak')) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Another edge case: inline node contains node that should receive foramtting\n\tfor (let i = 0, il = node.children.length; i < il; i++) {\n\t\tif (shouldFormatNode(node.children[i], profile)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Check if given node contains inner formatting, e.g. any of its children should\n * be formatted\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {Boolean}\n */\nfunction hasInnerFormatting(node, profile) {\n\t// check if node if forced for inner formatting\n\tconst nodeName = (node.name || '').toLowerCase();\n\tif (profile.get('formatForce').indexOf(nodeName) !== -1) {\n\t\treturn true;\n\t}\n\n\t// check if any of children should receive formatting\n\t// NB don’t use `childrent.some()` to reduce memory allocations\n\tfor (let i = 0; i < node.children.length; i++) {\n\t\tif (shouldFormatNode(node.children[i], profile)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Outputs attributes of given abbreviation node as HTML attributes\n * @param  {OutputNode} outNode\n * @param  {Profile}    profile\n * @return {String}\n */\nfunction formatAttributes(outNode, profile) {\n\tconst node = outNode.node;\n\n\treturn node.attributes.map(attr => {\n\t\tif (attr.options.implied && attr.value == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst attrName = profile.attribute(attr.name);\n\t\tlet attrValue = null;\n\n\t\t// handle boolean attributes\n\t\tif (attr.options.boolean || profile.get('booleanAttributes').indexOf(attrName.toLowerCase()) !== -1) {\n\t\t\tif (profile.get('compactBooleanAttributes') && attr.value == null) {\n\t\t\t\treturn ` ${attrName}`;\n\t\t\t} else if (attr.value == null) {\n\t\t\t\tattrValue = attrName;\n\t\t\t}\n\t\t}\n\n\t\tif (attrValue == null) {\n\t\t\tattrValue = outNode.renderFields(attr.value);\n\t\t}\n\n\t\treturn attr.options.before && attr.options.after\n\t\t\t? ` ${attrName}=${attr.options.before+attrValue+attr.options.after}`\n\t\t\t: ` ${attrName}=${profile.quote(attrValue)}`;\n\t}).join('');\n}\n\n/**\n * Check if given node is inline-level\n * @param  {Node}  node\n * @param  {Profile}  profile\n * @return {Boolean}\n */\nfunction isInline(node, profile) {\n\treturn (node && node.isTextOnly) || isInlineElement(node, profile);\n}\n\n/**\n * Check if given node is inline-level element, e.g. element with explicitly\n * defined node name\n * @param  {Node}  node\n * @param  {Profile}  profile\n * @return {Boolean}\n */\nfunction isInlineElement(node, profile) {\n\treturn node && profile.isInline(node);\n}\n\n/**\n * Computes indent level for given node\n * @param  {Node} node\n * @param  {Profile} profile\n * @param  {Number} level\n * @return {Number}\n */\nfunction getIndentLevel(node, profile) {\n\t// Increase indent level IF NOT:\n\t// * parent is text-only node\n\t// * there’s a parent node with a name that is explicitly set to decrease level\n\tconst skip = profile.get('formatSkip') || [];\n\tlet level = node.parent.isTextOnly ? -2 : -1;\n\tlet ctx = node;\n\twhile (ctx = ctx.parent) {\n\t\tif (skip.indexOf( (ctx.name || '').toLowerCase() ) === -1) {\n\t\t\tlevel++;\n\t\t}\n\t}\n\n\treturn level < 0 ? 0 : level;\n}\n\n/**\n * Comments given output node, if required\n * @param  {OutputNode} outNode\n * @param  {Object} options\n */\nfunction commentNode(outNode, options) {\n\tconst node = outNode.node;\n\n\tif (!options.enabled || !options.trigger || !node.name) {\n\t\treturn;\n\t}\n\n\tconst attrs = outNode.node.attributes.reduce((out, attr) => {\n\t\tif (attr.name && attr.value != null) {\n\t\t\tout[attr.name.toUpperCase().replace(/-/g, '_')] = attr.value;\n\t\t}\n\n\t\treturn out;\n\t}, {});\n\n\t// add comment only if attribute trigger is present\n\tfor (let i = 0, il = options.trigger.length; i < il; i++) {\n\t\tif (options.trigger[i].toUpperCase() in attrs) {\n\t\t\toutNode.open = template(options.before, attrs) + outNode.open;\n\t\t\tif (outNode.close) {\n\t\t\t\toutNode.close += template(options.after, attrs);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction getFormatOptions(options) {\n\tconst format = Object.assign({}, options && options.format);\n\tformat.comment = Object.assign({}, commentOptions, format.comment);\n\treturn format;\n}\n","'use strict';\n\n/**\n * Common utility methods for indent-based syntaxes (Slim, Pug, etc.)\n */\n\nimport template from '../../lib/template';\nimport { isFirstChild, isRoot } from '../../lib/utils';\n\nconst reId = /^id$/i;\nconst reClass = /^class$/i;\nconst defaultAttrOptions = {\n\tprimary: attrs => attrs.join(''),\n\tsecondary: attrs => attrs.map(attr => attr.isBoolean ? attr.name : `${attr.name}=${attr.value}`).join(', ')\n};\n\nconst defaultNodeOptions = {\n\topen: null,\n\tclose: null,\n\tomitName: /^div$/i,\n\tattributes: defaultAttrOptions\n};\n\nexport default function indentFormat(outNode, profile, options) {\n\toptions = Object.assign({}, defaultNodeOptions, options);\n\tconst node = outNode.node;\n\n\toutNode.indent = profile.indent(getIndentLevel(node, profile));\n\toutNode.newline = '\\n';\n\n\t// Do not format the very first node in output\n\tif (!isRoot(node.parent) || !isFirstChild(node)) {\n\t\toutNode.beforeOpen = outNode.newline + outNode.indent;\n\t}\n\n\tif (node.name) {\n\t\tconst data = Object.assign({\n\t\t\tNAME: profile.name(node.name),\n\t\t\tSELF_CLOSE: node.selfClosing ? options.selfClose : null\n\t\t}, getAttributes(outNode, profile, options.attributes));\n\n\t\t// omit tag name if node has primary attributes\n\t\tif (options.omitName && options.omitName.test(data.NAME) && data.PRIMARY_ATTRS) {\n\t\t\tdata.NAME = null;\n\t\t}\n\n\t\tif (options.open != null) {\n\t\t\toutNode.open = template(options.open, data);\n\t\t}\n\n\t\tif (options.close != null) {\n\t\t\toutNode.close = template(options.close, data);\n\t\t}\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Formats attributes of given node into a string.\n * @param  {OutputNode} node          Output node wrapper\n * @param  {Profile}    profile       Output profile\n * @param  {Object}     options       Additional formatting options\n * @return {String}\n */\nexport function getAttributes(outNode, profile, options) {\n\toptions = Object.assign({}, defaultAttrOptions, options);\n\tconst primary = [], secondary = [];\n\tconst node = outNode.node;\n\n\tnode.attributes.forEach(attr => {\n\t\tif (attr.options.implied && attr.value == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst name = profile.attribute(attr.name);\n\t\tconst value = outNode.renderFields(attr.value);\n\n\t\tif (reId.test(name)) {\n\t\t\tvalue && primary.push(`#${value}`);\n\t\t} else if (reClass.test(name)) {\n\t\t\tvalue && primary.push(`.${value.replace(/\\s+/g, '.')}`);\n\t\t} else {\n\t\t\tconst isBoolean = attr.value == null\n\t\t\t\t&& (attr.options.boolean || profile.get('booleanAttributes').indexOf(name.toLowerCase()) !== -1);\n\n\t\t\tsecondary.push({ name, value, isBoolean });\n\t\t}\n\t});\n\n\treturn {\n\t\tPRIMARY_ATTRS: options.primary(primary) || null,\n\t\tSECONDARY_ATTRS: options.secondary(secondary) || null\n\t};\n}\n\n/**\n * Computes indent level for given node\n * @param  {Node} node\n * @return {Number}\n */\nexport function getIndentLevel(node) {\n\tlet level = node.parent.isTextOnly ? -2 : -1;\n\tlet ctx = node;\n\twhile (ctx = ctx.parent) {\n\t\tlevel++;\n\t}\n\n\treturn level < 0 ? 0 : level;\n}\n","'use strict';\n\nimport render from '@emmetio/output-renderer';\nimport indentFormat from './assets/indent-format';\nimport { splitByLines, handlePseudoSnippet } from '../lib/utils';\n\nconst reNl = /\\n|\\r/;\n\n/**\n * Renders given parsed Emmet abbreviation as HAML, formatted according to\n * `profile` options\n * @param  {Node}    tree      Parsed Emmet abbreviation\n * @param  {Profile} profile   Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nexport default function haml(tree, profile, options) {\n\toptions = options || {};\n\tconst nodeOptions = {\n\t\topen: '[%NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)][SELF_CLOSE]',\n\t\tselfClose: '/',\n\t\tattributes: {\n\t\t\tsecondary(attrs) {\n\t\t\t\treturn attrs.map(attr => attr.isBoolean\n\t\t\t\t\t? `${attr.name}${profile.get('compactBooleanAttributes') ? '' : '=true'}`\n\t\t\t\t\t: `${attr.name}=${profile.quote(attr.value)}`\n\t\t\t\t).join(' ');\n\t\t\t}\n\t\t}\n\t};\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = indentFormat(outNode, profile, nodeOptions);\n\t\toutNode = updateFormatting(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(formatNodeValue(node, profile));\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * NB Unlike HTML, HAML is indent-based format so some formatting options from\n * `profile` will not take effect, otherwise output will be broken\n * @param  {OutputNode} outNode Output wrapper of parsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction updateFormatting(outNode, profile) {\n\tconst node = outNode.node;\n\n\tif (!node.isTextOnly && node.value) {\n\t\t// node with text: put a space before single-line text\n\t\toutNode.beforeText = reNl.test(node.value)\n\t\t\t? outNode.newline + outNode.indent + profile.indent(1)\n\t\t\t: ' ';\n\t}\n\n\treturn outNode;\n}\n/**\n * Formats value of given node: for multiline text we should add a ` |` suffix\n * at the end of each line. Also ensure that text is perfectly aligned.\n * @param  {Node}    node\n * @param  {Profile} profile\n * @return {String|null}\n */\nfunction formatNodeValue(node, profile) {\n\tif (node.value != null && reNl.test(node.value)) {\n\t\tconst lines = splitByLines(node.value);\n\t\tconst indent = profile.indent(1);\n\t\tconst maxLength = lines.reduce((prev, line) => Math.max(prev, line.length), 0);\n\n\t\treturn lines.map((line, i) => `${i ? indent : ''}${pad(line, maxLength)} |`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n\nfunction pad(text, len) {\n\twhile (text.length < len) {\n\t\ttext += ' ';\n\t}\n\n\treturn text;\n}\n","'use strict';\n\nimport render from '@emmetio/output-renderer';\nimport indentFormat from './assets/indent-format';\nimport { splitByLines, handlePseudoSnippet, isRoot } from '../lib/utils';\n\nconst reNl = /\\n|\\r/;\nconst secondaryAttrs = {\n\tnone:   '[ SECONDARY_ATTRS]',\n\tround:  '[(SECONDARY_ATTRS)]',\n\tcurly:  '[{SECONDARY_ATTRS}]',\n\tsquare: '[[SECONDARY_ATTRS]'\n};\n\n/**\n * Renders given parsed Emmet abbreviation as Slim, formatted according to\n * `profile` options\n * @param  {Node}    tree      Parsed Emmet abbreviation\n * @param  {Profile} profile   Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nexport default function slim(tree, profile, options) {\n\toptions = options || {};\n\tconst SECONDARY_ATTRS = options.attributeWrap\n\t\t&& secondaryAttrs[options.attributeWrap]\n\t\t|| secondaryAttrs.none;\n\n\tconst booleanAttr = SECONDARY_ATTRS === secondaryAttrs.none\n\t\t? attr => `${attr.name}=true`\n\t\t: attr => attr.name;\n\n\tconst nodeOptions = {\n\t\topen: `[NAME][PRIMARY_ATTRS]${SECONDARY_ATTRS}[SELF_CLOSE]`,\n\t\tselfClose: '/',\n\t\tattributes: {\n\t\t\tsecondary(attrs) {\n\t\t\t\treturn attrs.map(attr => attr.isBoolean\n\t\t\t\t\t? booleanAttr(attr)\n\t\t\t\t\t: `${attr.name}=${profile.quote(attr.value)}`\n\t\t\t\t).join(' ');\n\t\t\t}\n\t\t}\n\t};\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = indentFormat(outNode, profile, nodeOptions);\n\t\toutNode = updateFormatting(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(formatNodeValue(node, profile));\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * NB Unlike HTML, Slim is indent-based format so some formatting options from\n * `profile` will not take effect, otherwise output will be broken\n * @param  {OutputNode} outNode Output wrapper of farsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction updateFormatting(outNode, profile) {\n\tconst node = outNode.node;\n\tconst parent = node.parent;\n\n\t// Edge case: a single inline-level child inside node without text:\n\t// allow it to be inlined\n\tif (profile.get('inlineBreak') === 0 && isInline(node, profile)\n\t\t&& !isRoot(parent) && parent.value == null && parent.children.length === 1) {\n\t\toutNode.beforeOpen = ': ';\n\t}\n\n\tif (!node.isTextOnly && node.value) {\n\t\t// node with text: put a space before single-line text\n\t\toutNode.beforeText = reNl.test(node.value)\n\t\t\t? outNode.newline + outNode.indent + profile.indent(1)\n\t\t\t: ' ';\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Formats value of given node: for multiline text we should precede each\n * line with `| ` with one-level deep indent\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {String|null}\n */\nfunction formatNodeValue(node, profile) {\n\tif (node.value != null && reNl.test(node.value)) {\n\t\tconst indent = profile.indent(1);\n\t\treturn splitByLines(node.value).map((line, i) => `${indent}${i ? ' ' : '|'} ${line}`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n\n/**\n * Check if given node is inline-level\n * @param  {Node}  node\n * @param  {Profile}  profile\n * @return {Boolean}\n */\nfunction isInline(node, profile) {\n\treturn node && (node.isTextOnly || profile.isInline(node));\n}\n","'use strict';\n\nimport render from '@emmetio/output-renderer';\nimport indentFormat from './assets/indent-format';\nimport { splitByLines, handlePseudoSnippet } from '../lib/utils';\n\nconst reNl = /\\n|\\r/;\n\n/**\n * Renders given parsed Emmet abbreviation as Pug, formatted according to\n * `profile` options\n * @param  {Node}    tree      Parsed Emmet abbreviation\n * @param  {Profile} profile   Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nexport default function pug(tree, profile, options) {\n\toptions = options || {};\n\tconst nodeOptions = {\n\t\topen: '[NAME][PRIMARY_ATTRS][(SECONDARY_ATTRS)]',\n\t\tattributes: {\n\t\t\tsecondary(attrs) {\n\t\t\t\treturn attrs.map(attr => attr.isBoolean ? attr.name : `${attr.name}=${profile.quote(attr.value)}`).join(', ');\n\t\t\t}\n\t\t}\n\t};\n\n\treturn render(tree, options.field, outNode => {\n\t\toutNode = indentFormat(outNode, profile, nodeOptions);\n\t\toutNode = updateFormatting(outNode, profile);\n\n\t\tif (!handlePseudoSnippet(outNode)) {\n\t\t\tconst node = outNode.node;\n\t\t\t// Do not generate fields for nodes with empty value and children\n\t\t\t// or if node is self-closed\n\t\t\tif (node.value || (!node.children.length && !node.selfClosing) ) {\n\t\t\t\toutNode.text = outNode.renderFields(formatNodeValue(node, profile));\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Updates formatting properties for given output node\n * NB Unlike HTML, Pug is indent-based format so some formatting options from\n * `profile` will not take effect, otherwise output will be broken\n * @param  {OutputNode} outNode Output wrapper of parsed abbreviation node\n * @param  {Profile}    profile Output profile\n * @return {OutputNode}\n */\nfunction updateFormatting(outNode, profile) {\n\tconst node = outNode.node;\n\n\tif (!node.isTextOnly && node.value) {\n\t\t// node with text: put a space before single-line text\n\t\toutNode.beforeText = reNl.test(node.value)\n\t\t\t? outNode.newline + outNode.indent + profile.indent(1)\n\t\t\t: ' ';\n\t}\n\n\treturn outNode;\n}\n\n/**\n * Formats value of given node: for multiline text we should precede each\n * line with `| ` with one-level deep indent\n * @param  {Node} node\n * @param  {Profile} profile\n * @return {String|null}\n */\nfunction formatNodeValue(node, profile) {\n\tif (node.value != null && reNl.test(node.value)) {\n\t\tconst indent = profile.indent(1);\n\t\treturn splitByLines(node.value).map(line => `${indent}| ${line}`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n","import { isNumber, isAlpha, eatQuoted, isWhiteSpace } from '@emmetio/stream-reader-utils';\nimport Node from '@emmetio/node';\nimport StreamReader from '@emmetio/stream-reader';\n\n/**\n * A wrapper for holding CSS value\n */\nclass CSSValue {\n\tconstructor() {\n\t\tthis.type = 'css-value';\n\t\tthis.value = [];\n\t}\n\n\tget size() {\n\t\treturn this.value.length;\n\t}\n\n\tadd(value) {\n\t\tthis.value.push(value);\n\t}\n\n\thas(value) {\n\t\treturn this.value.indexOf(value) !== -1;\n\t}\n\n\ttoString() {\n\t\treturn this.value.join(' ');\n\t}\n}\n\nconst HASH = 35; // #\nconst DOT  = 46; // .\n\n/**\n * Consumes a color token from given string\n * @param  {StreamReader} stream\n * @return {Color} Returns consumend color object, `undefined` otherwise\n */\nfunction consumeColor(stream) {\n\t// supported color variations:\n\t// #abc   → #aabbccc\n\t// #0     → #000000\n\t// #fff.5 → rgba(255, 255, 255, 0.5)\n\t// #t     → transparent\n\tif (stream.peek() === HASH) {\n\t\tstream.start = stream.pos;\n\t\tstream.next();\n\n\t\tstream.eat(116) /* t */ || stream.eatWhile(isHex);\n\t\tconst base = stream.current();\n\n\t\t// a hex color can be followed by `.num` alpha value\n\t\tstream.start = stream.pos;\n\t\tif (stream.eat(DOT) && !stream.eatWhile(isNumber)) {\n\t\t\tthrow stream.error('Unexpected character for alpha value of color');\n\t\t}\n\n\t\treturn new Color(base, stream.current());\n\t}\n}\n\nclass Color {\n\tconstructor(value, alpha) {\n\t\tthis.type = 'color';\n\t\tthis.raw = value;\n\t\tthis.alpha = Number(alpha != null && alpha !== '' ? alpha : 1);\n\t\tvalue = value.slice(1); // remove #\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tif (value === 't') {\n\t\t\tthis.alpha = 0;\n\t\t} else {\n\t\t\tswitch (value.length) {\n\t\t\t\tcase 0:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tr = g = b = value + value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tr = g = b = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tr = value[0] + value[0];\n\t\t\t\t\tg = value[1] + value[1];\n\t\t\t\t\tb = value[2] + value[2];\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvalue += value;\n\t\t\t\t\tr = value.slice(0, 2);\n\t\t\t\t\tg = value.slice(2, 4);\n\t\t\t\t\tb = value.slice(4, 6);\n\t\t\t}\n\t\t}\n\n\t\tthis.r = parseInt(r, 16);\n\t\tthis.g = parseInt(g, 16);\n\t\tthis.b = parseInt(b, 16);\n\t}\n\n\t/**\n\t * Output current color as hex value\n\t * @param {Boolean} shor Produce short value (e.g. #fff instead of #ffffff), if possible\n\t * @return {String}\n\t */\n\ttoHex(short) {\n\t\tconst fn = (short && isShortHex(this.r) && isShortHex(this.g) && isShortHex(this.b))\n\t\t\t? toShortHex : toHex;\n\n\t\treturn '#' + fn(this.r)  + fn(this.g) + fn(this.b);\n\t}\n\n\t/**\n\t * Output current color as `rgba?(...)` CSS color\n\t * @return {String}\n\t */\n\ttoRGB() {\n\t\tconst values = [this.r, this.g, this.b];\n\t\tif (this.alpha !== 1) {\n\t\t\tvalues.push(this.alpha.toFixed(8).replace(/\\.?0+$/, ''));\n\t\t}\n\n\t\treturn `${values.length === 3 ? 'rgb' : 'rgba'}(${values.join(', ')})`;\n\t}\n\n\ttoString(short) {\n\t\tif (!this.r && !this.g && !this.b && !this.alpha) {\n\t\t\treturn 'transparent';\n\t\t}\n\t\treturn this.alpha === 1 ? this.toHex(short) : this.toRGB();\n\t}\n}\n\n/**\n * Check if given code is a hex value (/0-9a-f/)\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isHex(code) {\n\treturn isNumber(code) || isAlpha(code, 65, 70); // A-F\n}\n\nfunction isShortHex(hex) {\n\treturn !(hex % 17);\n}\n\nfunction toShortHex(num) {\n\treturn (num >> 4).toString(16);\n}\n\nfunction toHex(num) {\n\treturn pad(num.toString(16), 2);\n}\n\nfunction pad(value, len) {\n\twhile (value.length < len) {\n\t\tvalue = '0' + value;\n\t}\n\treturn value;\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAlphaNumericWord(code) {\n\treturn isNumber(code) || isAlphaWord(code);\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAlphaWord(code) {\n\treturn code === 95 /* _ */ || isAlpha(code);\n}\n\nconst PERCENT = 37; // %\nconst DOT$1     = 46; // .\nconst DASH    = 45; // -\n\n/**\n * Consumes numeric CSS value (number with optional unit) from current stream,\n * if possible\n * @param  {StreamReader} stream\n * @return {NumericValue}\n */\nfunction consumeNumericValue(stream) {\n\tstream.start = stream.pos;\n\tif (eatNumber(stream)) {\n\t\tconst num = stream.current();\n\t\tstream.start = stream.pos;\n\n\t\t// eat unit, which can be a % or alpha word\n\t\tstream.eat(PERCENT) || stream.eatWhile(isAlphaWord);\n\t\treturn new NumericValue(num, stream.current());\n\t}\n}\n\n/**\n * A numeric CSS value with optional unit\n */\nclass NumericValue {\n\tconstructor(value, unit) {\n\t\tthis.type = 'numeric';\n\t\tthis.value = Number(value);\n\t\tthis.unit = unit || '';\n\t}\n\n\ttoString() {\n\t\treturn `${this.value}${this.unit}`;\n\t}\n}\n\n/**\n * Eats number value from given stream\n * @param  {StreamReader} stream\n * @return {Boolean} Returns `true` if number was consumed\n */\nfunction eatNumber(stream) {\n\tconst start = stream.pos;\n\tconst negative = stream.eat(DASH);\n\tconst afterNegative = stream.pos;\n\n\tstream.eatWhile(isNumber);\n\t\n\tconst prevPos = stream.pos;\n\tif (stream.eat(DOT$1) && !stream.eatWhile(isNumber)) {\n\t\t// Number followed by a dot, but then no number\n\t\tstream.pos = prevPos;\n\t}\n\n\t// Edge case: consumed dash only: not a number, bail-out\n\tif (stream.pos === afterNegative) {\n\t\tstream.pos = start;\n\t}\n\n\treturn stream.pos !== start;\n}\n\nconst DOLLAR = 36; // $\nconst DASH$1   = 45; // -\nconst AT     = 64; // @\n\n/**\n * Consumes a keyword: either a variable (a word that starts with $ or @) or CSS\n * keyword or shorthand\n * @param  {StreamReader} stream\n * @param  {Boolean} [short] Use short notation for consuming value.\n * The difference between “short” and “full” notation is that first one uses\n * alpha characters only and used for extracting keywords from abbreviation,\n * while “full” notation also supports numbers and dashes\n * @return {String} Consumed variable\n */\nfunction consumeKeyword(stream, short) {\n\tstream.start = stream.pos;\n\n\tif (stream.eat(DOLLAR) || stream.eat(AT)) {\n\t\t// SCSS or LESS variable\n\t\tstream.eatWhile(isVariableName);\n\t} else if (short) {\n\t\tstream.eatWhile(isAlphaWord);\n\t} else {\n\t\tstream.eatWhile(isKeyword);\n\t}\n\n\treturn stream.start !== stream.pos ? new Keyword(stream.current()) : null;\n}\n\nclass Keyword {\n\tconstructor(value) {\n\t\tthis.type = 'keyword';\n\t\tthis.value = value;\n\t}\n\n\ttoString() {\n\t\treturn this.value;\n\t}\n}\n\nfunction isKeyword(code) {\n\treturn isAlphaNumericWord(code) || code === DASH$1;\n}\n\nfunction isVariableName(code) {\n\treturn code === 45 /* - */ || isAlphaNumericWord(code);\n}\n\nconst opt = { throws: true };\n\n/**\n * Consumes 'single' or \"double\"-quoted string from given string, if possible\n * @param  {StreamReader} stream\n * @return {String}\n */\nfunction consumeQuoted(stream) {\n\tif (eatQuoted(stream, opt)) {\n\t\treturn new QuotedString(stream.current());\n\t}\n}\n\nclass QuotedString {\n\tconstructor(value) {\n\t\tthis.type = 'string';\n\t\tthis.value = value;\n\t}\n\n\ttoString() {\n\t\treturn this.value;\n\t}\n}\n\nconst LBRACE = 40; // (\nconst RBRACE = 41; // )\nconst COMMA  = 44; // ,\n\n/**\n * Consumes arguments from given string.\n * Arguments are comma-separated list of CSS values inside round braces, e.g.\n * `(1, a2, 'a3')`. Nested lists and quoted strings are supported\n * @param  {StreamReader} stream\n * @return {Array}        Array of arguments, `null` if arguments cannot be consumed\n */\nfunction consumeArgumentList(stream) {\n\tif (!stream.eat(LBRACE)) {\n\t\t// not an argument list\n\t\treturn null;\n\t}\n\n\tlet arg;\n\tconst argsList = [];\n\n\twhile (!stream.eof()) {\n\t\tif (arg = consumeArgument(stream)) {\n\t\t\targsList.push(arg);\n\t\t} else {\n\t\t\t// didn’t consumed argument, expect argument separator or end-of-arguments\n\t\t\tstream.eatWhile(isWhiteSpace);\n\n\t\t\tif (stream.eat(RBRACE)) {\n\t\t\t\t// end of arguments list\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!stream.eat(COMMA)) {\n\t\t\t\tthrow stream.error('Expected , or )');\n\t\t\t}\n\t\t}\n\t}\n\n\treturn argsList;\n}\n\n/**\n * Consumes a single argument. An argument is a `CSSValue`, e.g. it could be\n * a space-separated string of value\n * @param  {StreamReader} stream\n * @return {CSSValue}\n */\nfunction consumeArgument(stream) {\n\tconst result = new CSSValue();\n\tlet value;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\t\tvalue = consumeNumericValue(stream) || consumeColor(stream)\n\t\t\t|| consumeQuoted(stream) || consumeKeywordOrFunction(stream);\n\n\t\tif (!value) {\n\t\t\tbreak;\n\t\t}\n\n\t\tresult.add(value);\n\t}\n\n\treturn result.size ? result : null;\n}\n\n/**\n * Consumes either function call like `foo()` or keyword like `foo`\n * @param  {StreamReader} stream\n * @return {Keyword|FunctionCall}\n */\nfunction consumeKeywordOrFunction(stream) {\n\tconst kw = consumeKeyword(stream);\n\tif (kw) {\n\t\tconst args = consumeArgumentList(stream);\n\t\treturn args ? new FunctionCall(kw.toString(), args) : kw;\n\t}\n}\n\nclass FunctionCall {\n\t/**\n\t * @param {String} name Function name\n\t * @param {Array}  args Function arguments\n\t */\n\tconstructor(name, args) {\n\t\tthis.type = 'function';\n\t\tthis.name = name;\n\t\tthis.args = args || [];\n\t}\n\n\ttoString() {\n\t\treturn `${this.name}(${this.args.join(', ')})`;\n\t}\n}\n\nconst EXCL   = 33; // !\nconst DOLLAR$1 = 36; // $\nconst PLUS   = 43; // +\nconst DASH$2   = 45; // -\nconst COLON  = 58; // :\nconst AT$1     = 64; // @\n\n/**\n * Parses given Emmet CSS abbreviation and returns it as parsed Node tree\n * @param {String} abbr\n * @return {Node}\n */\nfunction index(abbr) {\n\tconst root = new Node();\n\tconst stream = new StreamReader(abbr);\n\n\twhile (!stream.eof()) {\n\t\tlet node = new Node(consumeIdent(stream));\n\t\tnode.value = consumeValue(stream);\n\n\t\tconst args = consumeArgumentList(stream);\n\t\tif (args) {\n\t\t\t// technically, arguments in CSS are anonymous Emmet Node attributes,\n\t\t\t// but since Emmet can support only one anonymous, `null`-name\n\t\t\t// attribute (for good reasons), we’ll use argument index as name\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tnode.setAttribute(String(i), args[i]);\n\t\t\t}\n\t\t}\n\n\t\t// Consume `!important` modifier at the end of expression\n\t\tif (stream.eat(EXCL)) {\n\t\t\tnode.value.add('!');\n\t\t}\n\n\t\troot.appendChild(node);\n\n\t\t// CSS abbreviations cannot be nested, only listed\n\t\tif (!stream.eat(PLUS)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!stream.eof()) {\n\t\tthrow stream.error('Unexpected character');\n\t}\n\n\treturn root;\n}\n\n/**\n * Consumes CSS property identifier from given stream\n * @param  {StreamReader} stream\n * @return {String}\n */\nfunction consumeIdent(stream) {\n\tstream.start = stream.pos;\n\tstream.eatWhile(isIdentPrefix);\n\tstream.eatWhile(isIdent);\n\treturn stream.start !== stream.pos ? stream.current() : null;\n}\n\n/**\n * Consumes embedded value from Emmet CSS abbreviation stream\n * @param  {StreamReader} stream\n * @return {CSSValue}\n */\nfunction consumeValue(stream) {\n\tconst values = new CSSValue();\n\tlet value;\n\n\twhile (!stream.eof()) {\n\t\t// use colon as value separator\n\t\tstream.eat(COLON);\n\t\tif (value = consumeNumericValue(stream) || consumeColor(stream)) {\n\t\t\t// edge case: a dash after unit-less numeric value or color should\n\t\t\t// be treated as value separator, not negative sign\n\t\t\tif (!value.unit) {\n\t\t\t\tstream.eat(DASH$2);\n\t\t\t}\n\t\t} else {\n\t\t\tstream.eat(DASH$2);\n\t\t\tvalue = consumeKeyword(stream, true);\n\t\t}\n\n\t\tif (!value) {\n\t\t\tbreak;\n\t\t}\n\n\t\tvalues.add(value);\n\t}\n\n\treturn values;\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isIdent(code) {\n\treturn isAlphaWord(code);\n}\n\n/**\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isIdentPrefix(code) {\n\treturn code === AT$1 || code === DOLLAR$1 || code === EXCL;\n}\n\nexport default index;\n","'use strict';\n\nconst DASH = 45; // -\n\n/**\n * Calculates fuzzy match score of how close `abbr` matches given `string`.\n * @param  {String} abbr        Abbreviation to score\n * @param  {String} string      String to match\n * @param  {Number} [fuzziness] Fuzzy factor\n * @return {Number}             Match score\n */\nexport default function(abbr, string) {\n\tabbr = abbr.toLowerCase();\n\tstring = string.toLowerCase();\n\n\tif (abbr === string) {\n\t\treturn 1;\n\t}\n\n\t// a string MUST start with the same character as abbreviation\n\tif (!string || abbr.charCodeAt(0) !== string.charCodeAt(0)) {\n\t\treturn 0;\n\t}\n\n\tconst abbrLength = abbr.length;\n\tconst stringLength = string.length;\n\tlet i = 1, j = 1, score = stringLength;\n\tlet ch1, ch2, found, acronym;\n\n\twhile (i < abbrLength) {\n\t\tch1 = abbr.charCodeAt(i);\n\t\tfound = false;\n\t\tacronym = false;\n\n\t\twhile (j < stringLength) {\n\t\t\tch2 = string.charCodeAt(j);\n\n\t\t\tif (ch1 === ch2) {\n\t\t\t\tfound = true;\n\t\t\t\tscore += (stringLength - j) * (acronym ? 2 : 1);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// add acronym bonus for exactly next match after unmatched `-`\n\t\t\tacronym = ch2 === DASH;\n\t\t\tj++;\n\t\t}\n\n\t\tif (!found) {\n\t\t\tbreak;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn score && score * (i / abbrLength) / sum(stringLength);\n}\n\n/**\n * Calculates sum of first `n` natural numbers, e.g. 1+2+3+...n\n * @param  {Number} n\n * @return {Number}\n */\nfunction sum(n) {\n\treturn n * (n + 1) / 2;\n}\n","'use strict';\n\nconst reProperty = /^([a-z-]+)(?:\\s*:\\s*([^\\n\\r]+))?$/;\nconst DASH = 45; // -\n\n/**\n * Creates a special structure for resolving CSS properties from plain CSS\n * snippets.\n * Almost all CSS snippets are aliases for real CSS properties with available\n * value variants, optionally separated by `|`. Most values are keywords that\n * can be fuzzy-resolved as well. Some CSS properties are shorthands for other,\n * more specific properties, like `border` and `border-style`. For such cases\n * keywords from more specific properties should be available in shorthands too.\n * @param {Snippet[]} snippets\n * @return {CSSSnippet[]}\n */\nexport default function(snippets) {\n\treturn nest( snippets.map(snippet => new CSSSnippet(snippet.key, snippet.value)) );\n}\n\nexport class CSSSnippet {\n\tconstructor(key, value) {\n\t\tthis.key = key;\n\t\tthis.value = value;\n\t\tthis.property = null;\n\n\t\t// detect if given snippet is a property\n\t\tconst m = value && value.match(reProperty);\n\t\tif (m) {\n\t\t\tthis.property = m[1];\n\t\t\tthis.value = m[2];\n\t\t}\n\n\t\tthis.dependencies = [];\n\t}\n\n\taddDependency(dep) {\n\t\tthis.dependencies.push(dep);\n\t}\n\n\tget defaultValue() {\n\t\treturn this.value != null ? splitValue(this.value)[0] : null;\n\t}\n\n\t/**\n\t * Returns list of unique keywords for current CSS snippet and its dependencies\n\t * @return {String[]}\n\t */\n\tkeywords() {\n\t\tconst stack = [];\n\t\tconst keywords = new Set();\n\t\tlet i = 0, item, candidates;\n\n\t\tif (this.property) {\n\t\t\t// scan valid CSS-properties only\n\t\t\tstack.push(this);\n\t\t}\n\n\t\twhile (i < stack.length) {\n\t\t\t// NB Keep items in stack instead of push/pop to avoid possible\n\t\t\t// circular references\n\t\t\titem = stack[i++];\n\n\t\t\tif (item.value) {\n\t\t\t\tcandidates = splitValue(item.value).filter(isKeyword);\n\n\t\t\t\t// extract possible keywords from snippet value\n\t\t\t\tfor (let j = 0; j < candidates.length; j++) {\n\t\t\t\t\tkeywords.add(candidates[j].trim());\n\t\t\t\t}\n\n\t\t\t\t// add dependencies into scan stack\n\t\t\t\tfor (let j = 0, deps = item.dependencies; j < deps.length; j++) {\n\t\t\t\t\tif (stack.indexOf(deps[j]) === -1) {\n\t\t\t\t\t\tstack.push(deps[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(keywords);\n\t}\n}\n\n/**\n * Nests more specific CSS properties into shorthand ones, e.g.\n * background-position-x -> background-position -> background\n * @param  {CSSSnippet[]} snippets\n * @return {CSSSnippet[]}\n */\nfunction nest(snippets) {\n\tsnippets = snippets.sort(snippetsSort);\n\tconst stack = [];\n\n\t// For sorted list of CSS properties, create dependency graph where each\n\t// shorthand property contains its more specific one, e.g.\n\t// background -> background-position -> background-position-x\n\tfor (let i = 0, cur, prev; i < snippets.length; i++) {\n\t\tcur = snippets[i];\n\n\t\tif (!cur.property) {\n\t\t\t// not a CSS property, skip it\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if current property belongs to one from parent stack.\n\t\t// Since `snippets` array is sorted, items are perfectly aligned\n\t\t// from shorthands to more specific variants\n\t\twhile (stack.length) {\n\t\t\tprev = stack[stack.length - 1];\n\n\t\t\tif (cur.property.indexOf(prev.property) === 0\n\t\t\t\t&& cur.property.charCodeAt(prev.property.length) === DASH) {\n\t\t\t\tprev.addDependency(cur);\n\t\t\t\tstack.push(cur);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tstack.pop();\n\t\t}\n\n\t\tif (!stack.length) {\n\t\t\tstack.push(cur);\n\t\t}\n\t}\n\n\treturn snippets;\n}\n\n/**\n * A sorting function for array of snippets\n * @param  {CSSSnippet} a\n * @param  {CSSSnippet} b\n * @return {Number}\n */\nfunction snippetsSort(a, b) {\n\tif (a.key === b.key) {\n\t\treturn 0;\n\t}\n\n\treturn a.key < b.key ? -1 : 1;\n}\n\n/**\n * Check if given string is a keyword candidate\n * @param  {String}  str\n * @return {Boolean}\n */\nfunction isKeyword(str) {\n\treturn /^\\s*[\\w-]+/.test(str);\n}\n\nfunction splitValue(value) {\n\treturn String(value).split('|');\n}\n","'use strict';\n\nimport render from '@emmetio/output-renderer';\nimport parseFields from '@emmetio/field-parser';\n\nconst defaultFormatOptions = {\n\tshortHex: true,\n\tbetween: ': ',\n\tafter: ';'\n};\n\n/**\n * Renders given parsed Emmet CSS abbreviation as CSS-like\n * stylesheet, formatted according to `profile` options\n * @param  {Node}     tree    Parsed Emmet abbreviation\n * @param  {Profile}  profile Output profile\n * @param  {Object}  [options] Additional formatter options\n * @return {String}\n */\nexport default function css(tree, profile, options) {\n\toptions = options || {};\n\tconst formatOpt = Object.assign({}, defaultFormatOptions, options && options.format);\n\n\treturn render(tree, options.field, outNode => {\n\t\tconst node = outNode.node;\n\t\tlet value = stringifyValue(node, formatOpt);\n\n\t\tif (node.attributes.length) {\n\t\t\tconst fieldValues = node.attributes.map(attr => stringifyValue(attr, formatOpt));\n\t\t\tvalue = injectFields(value, fieldValues);\n\t\t}\n\n\t\toutNode.open = node.name && profile.name(node.name);\n\t\toutNode.afterOpen = formatOpt.between;\n\t\toutNode.text = outNode.renderFields(value || null);\n\n\t\tif (outNode.open && (!outNode.text || !outNode.text.endsWith(';'))) {\n\t\t\toutNode.afterText = formatOpt.after;\n\t\t}\n\n\t\tif (profile.get('format')) {\n\t\t\toutNode.newline = '\\n';\n\t\t\tif (tree.lastChild !== node) {\n\t\t\t\toutNode.afterText += outNode.newline;\n\t\t\t}\n\t\t}\n\n\t\treturn outNode;\n\t});\n}\n\n/**\n * Injects given field values at each field of given string\n * @param  {String}   string\n * @param  {String[]} attributes\n * @return {FieldString}\n */\nfunction injectFields(string, values) {\n\tconst fieldsModel = parseFields(string);\n\tconst fieldsAmount = fieldsModel.fields.length;\n\n\tif (fieldsAmount) {\n\t\tvalues = values.slice();\n\t\tif (values.length > fieldsAmount) {\n\t\t\t// More values that output fields: collapse rest values into\n\t\t\t// a single token\n\t\t\tvalues = values.slice(0, fieldsAmount - 1)\n\t\t\t\t.concat(values.slice(fieldsAmount - 1).join(', '));\n\t\t}\n\n\t\twhile (values.length) {\n\t\t\tconst value = values.shift();\n\t\t\tconst field = fieldsModel.fields.shift();\n\t\t\tconst delta = value.length - field.length;\n\n\t\t\tfieldsModel.string = fieldsModel.string.slice(0, field.location)\n\t\t\t\t+ value\n\t\t\t\t+ fieldsModel.string.slice(field.location + field.length);\n\n\t\t\t// Update location of the rest fields in string\n\t\t\tfor (let i = 0, il = fieldsModel.fields.length; i < il; i++) {\n\t\t\t\tfieldsModel.fields[i].location += delta;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fieldsModel;\n}\n\nfunction stringifyValue(node, options) {\n\tif (node.value && typeof node.value === 'object' && node.value.type === 'css-value') {\n\t\treturn node.value.value\n\t\t.map(token => {\n\t\t\tif (token && typeof token === 'object') {\n\t\t\t\treturn token.type === 'color'\n\t\t\t\t\t? token.toString(options.shortHex)\n\t\t\t\t\t: token.toString();\n\t\t\t}\n\n\t\t\treturn String(token);\n\t\t})\n\t\t.join(' ');\n\t}\n\n\treturn node.value != null ? String(node.value) : '';\n}\n","var html = {\n\t\"a\": \"a[href]\",\n\t\"a:blank\": \"a[href='http://${0}' target='_blank' rel='noopener noreferrer']\",\n\t\"a:link\": \"a[href='http://${0}']\",\n\t\"a:mail\": \"a[href='mailto:${0}']\",\n\t\"a:tel\": \"a[href='tel:+${0}']\",\n\t\"abbr\": \"abbr[title]\",\n\t\"acr|acronym\": \"acronym[title]\",\n\t\"base\": \"base[href]/\",\n\t\"basefont\": \"basefont/\",\n\t\"br\": \"br/\",\n\t\"frame\": \"frame/\",\n\t\"hr\": \"hr/\",\n\t\"bdo\": \"bdo[dir]\",\n\t\"bdo:r\": \"bdo[dir=rtl]\",\n\t\"bdo:l\": \"bdo[dir=ltr]\",\n\t\"col\": \"col/\",\n\t\"link\": \"link[rel=stylesheet href]/\",\n\t\"link:css\": \"link[href='${1:style}.css']\",\n\t\"link:print\": \"link[href='${1:print}.css' media=print]\",\n\t\"link:favicon\": \"link[rel='shortcut icon' type=image/x-icon href='${1:favicon.ico}']\",\n\t\"link:mf|link:manifest\": \"link[rel='manifest' href='${1:manifest.json}']\",\n\t\"link:touch\": \"link[rel=apple-touch-icon href='${1:favicon.png}']\",\n\t\"link:rss\": \"link[rel=alternate type=application/rss+xml title=RSS href='${1:rss.xml}']\",\n\t\"link:atom\": \"link[rel=alternate type=application/atom+xml title=Atom href='${1:atom.xml}']\",\n\t\"link:im|link:import\": \"link[rel=import href='${1:component}.html']\",\n\t\"meta\": \"meta/\",\n\t\"meta:utf\": \"meta[http-equiv=Content-Type content='text/html;charset=UTF-8']\",\n\t\"meta:vp\": \"meta[name=viewport content='width=${1:device-width}, initial-scale=${2:1.0}']\",\n\t\"meta:compat\": \"meta[http-equiv=X-UA-Compatible content='${1:IE=7}']\",\n\t\"meta:edge\": \"meta:compat[content='${1:ie=edge}']\",\n\t\"meta:redirect\": \"meta[http-equiv=refresh content='0; url=${1:http://example.com}']\",\n\t\"style\": \"style\",\n\t\"script\": \"script[!src]\",\n\t\"script:src\": \"script[src]\",\n\t\"img\": \"img[src alt]/\",\n\t\"img:s|img:srcset\": \"img[srcset src alt]\",\n\t\"img:z|img:sizes\": \"img[sizes srcset src alt]\",\n\t\"picture\": \"picture\",\n\t\"src|source\": \"source/\",\n\t\"src:sc|source:src\": \"source[src type]\",\n\t\"src:s|source:srcset\": \"source[srcset]\",\n\t\"src:t|source:type\": \"source[srcset type='${1:image/}']\",\n\t\"src:z|source:sizes\": \"source[sizes srcset]\",\n\t\"src:m|source:media\": \"source[media='(${1:min-width: })' srcset]\",\n\t\"src:mt|source:media:type\": \"source:media[type='${2:image/}']\",\n\t\"src:mz|source:media:sizes\": \"source:media[sizes srcset]\",\n\t\"src:zt|source:sizes:type\": \"source[sizes srcset type='${1:image/}']\",\n\t\"iframe\": \"iframe[src frameborder=0]\",\n\t\"embed\": \"embed[src type]/\",\n\t\"object\": \"object[data type]\",\n\t\"param\": \"param[name value]/\",\n\t\"map\": \"map[name]\",\n\t\"area\": \"area[shape coords href alt]/\",\n\t\"area:d\": \"area[shape=default]\",\n\t\"area:c\": \"area[shape=circle]\",\n\t\"area:r\": \"area[shape=rect]\",\n\t\"area:p\": \"area[shape=poly]\",\n\t\"form\": \"form[action]\",\n\t\"form:get\": \"form[method=get]\",\n\t\"form:post\": \"form[method=post]\",\n\t\"label\": \"label[for]\",\n\t\"input\": \"input[type=${1:text}]/\",\n\t\"inp\": \"input[name=${1} id=${1}]\",\n\t\"input:h|input:hidden\": \"input[type=hidden name]\",\n\t\"input:t|input:text\": \"inp[type=text]\",\n\t\"input:search\": \"inp[type=search]\",\n\t\"input:email\": \"inp[type=email]\",\n\t\"input:url\": \"inp[type=url]\",\n\t\"input:p|input:password\": \"inp[type=password]\",\n\t\"input:datetime\": \"inp[type=datetime]\",\n\t\"input:date\": \"inp[type=date]\",\n\t\"input:datetime-local\": \"inp[type=datetime-local]\",\n\t\"input:month\": \"inp[type=month]\",\n\t\"input:week\": \"inp[type=week]\",\n\t\"input:time\": \"inp[type=time]\",\n\t\"input:tel\": \"inp[type=tel]\",\n\t\"input:number\": \"inp[type=number]\",\n\t\"input:color\": \"inp[type=color]\",\n\t\"input:c|input:checkbox\": \"inp[type=checkbox]\",\n\t\"input:r|input:radio\": \"inp[type=radio]\",\n\t\"input:range\": \"inp[type=range]\",\n\t\"input:f|input:file\": \"inp[type=file]\",\n\t\"input:s|input:submit\": \"input[type=submit value]\",\n\t\"input:i|input:image\": \"input[type=image src alt]\",\n\t\"input:b|input:button\": \"input[type=button value]\",\n    \"input:reset\": \"input:button[type=reset]\",\n\t\"isindex\": \"isindex/\",\n\t\"select\": \"select[name=${1} id=${1}]\",\n\t\"select:d|select:disabled\": \"select[disabled.]\",\n\t\"opt|option\": \"option[value]\",\n\t\"textarea\": \"textarea[name=${1} id=${1} cols=${2:30} rows=${3:10}]\",\n\t\"marquee\": \"marquee[behavior direction]\",\n\t\"menu:c|menu:context\": \"menu[type=context]\",\n\t\"menu:t|menu:toolbar\": \"menu[type=toolbar]\",\n\t\"video\": \"video[src]\",\n\t\"audio\": \"audio[src]\",\n\t\"html:xml\": \"html[xmlns=http://www.w3.org/1999/xhtml]\",\n\t\"keygen\": \"keygen/\",\n\t\"command\": \"command/\",\n\t\"btn:s|button:s|button:submit\" : \"button[type=submit]\",\n\t\"btn:r|button:r|button:reset\" : \"button[type=reset]\",\n\t\"btn:d|button:d|button:disabled\" : \"button[disabled.]\",\n\t\"fst:d|fset:d|fieldset:d|fieldset:disabled\" : \"fieldset[disabled.]\",\n\n\t\"bq\": \"blockquote\",\n\t\"fig\": \"figure\",\n\t\"figc\": \"figcaption\",\n\t\"pic\": \"picture\",\n\t\"ifr\": \"iframe\",\n\t\"emb\": \"embed\",\n\t\"obj\": \"object\",\n\t\"cap\": \"caption\",\n\t\"colg\": \"colgroup\",\n\t\"fst\": \"fieldset\",\n\t\"btn\": \"button\",\n\t\"optg\": \"optgroup\",\n\t\"tarea\": \"textarea\",\n\t\"leg\": \"legend\",\n\t\"sect\": \"section\",\n\t\"art\": \"article\",\n\t\"hdr\": \"header\",\n\t\"ftr\": \"footer\",\n\t\"adr\": \"address\",\n\t\"dlg\": \"dialog\",\n\t\"str\": \"strong\",\n\t\"prog\": \"progress\",\n\t\"mn\": \"main\",\n\t\"tem\": \"template\",\n\t\"fset\": \"fieldset\",\n\t\"datag\": \"datagrid\",\n\t\"datal\": \"datalist\",\n\t\"kg\": \"keygen\",\n\t\"out\": \"output\",\n\t\"det\": \"details\",\n\t\"cmd\": \"command\",\n\n\t\"ri:d|ri:dpr\": \"img:s\",\n\t\"ri:v|ri:viewport\": \"img:z\",\n\t\"ri:a|ri:art\": \"pic>src:m+img\",\n\t\"ri:t|ri:type\": \"pic>src:t+img\",\n\n\t\"!!!\": \"{<!DOCTYPE html>}\",\n\t\"doc\": \"html[lang=${lang}]>(head>meta[charset=${charset}]+meta:vp+title{${1:Document}})+body\",\n\t\"!|html:5\": \"!!!+doc\",\n\n\t\"c\": \"{<!-- ${0} -->}\",\n\t\"cc:ie\": \"{<!--[if IE]>${0}<![endif]-->}\",\n\t\"cc:noie\": \"{<!--[if !IE]><!-->${0}<!--<![endif]-->}\"\n};\n\nvar css = {\n\t\"@f\": \"@font-face {\\n\\tfont-family: ${1};\\n\\tsrc: url(${1});\\n}\",\n\t\"@ff\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\n\t\"@i|@import\": \"@import url(${0});\",\n\t\"@kf\": \"@keyframes ${1:identifier} {\\n\\t${2}\\n}\",\n\t\"@m|@media\": \"@media ${1:screen} {\\n\\t${0}\\n}\",\n\t\"ac\": \"align-content:start|end|flex-start|flex-end|center|space-between|space-around|stretch|space-evenly\",\n\t\"ai\": \"align-items:start|end|flex-start|flex-end|center|baseline|stretch\",\n\t\"anim\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode}\",\n\t\"animdel\": \"animation-delay:${1:time}\",\n\t\"animdir\": \"animation-direction:normal|reverse|alternate|alternate-reverse\",\n\t\"animdur\": \"animation-duration:${1:0}s\",\n\t\"animfm\": \"animation-fill-mode:both|forwards|backwards\",\n\t\"animic\": \"animation-iteration-count:1|infinite\",\n\t\"animn\": \"animation-name\",\n\t\"animps\": \"animation-play-state:running|paused\",\n\t\"animtf\": \"animation-timing-function:linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1})\",\n\t\"ap\": \"appearance:none\",\n\t\"as\": \"align-self:start|end|auto|flex-start|flex-end|center|baseline|stretch\",\n\t\"b\": \"bottom\",\n\t\"bd\": \"border:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdb\": \"border-bottom:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdbc\": \"border-bottom-color:${1:#000}\",\n\t\"bdbi\": \"border-bottom-image:url(${0})\",\n\t\"bdbk\": \"border-break:close\",\n\t\"bdbli\": \"border-bottom-left-image:url(${0})|continue\",\n\t\"bdblrs\": \"border-bottom-left-radius\",\n\t\"bdbri\": \"border-bottom-right-image:url(${0})|continue\",\n\t\"bdbrrs\": \"border-bottom-right-radius\",\n\t\"bdbs\": \"border-bottom-style\",\n\t\"bdbw\": \"border-bottom-width\",\n\t\"bdc\": \"border-color:${1:#000}\",\n\t\"bdci\": \"border-corner-image:url(${0})|continue\",\n\t\"bdcl\": \"border-collapse:collapse|separate\",\n\t\"bdf\": \"border-fit:repeat|clip|scale|stretch|overwrite|overflow|space\",\n\t\"bdi\": \"border-image:url(${0})\",\n\t\"bdl\": \"border-left:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdlc\": \"border-left-color:${1:#000}\",\n\t\"bdlen\": \"border-length\",\n\t\"bdli\": \"border-left-image:url(${0})\",\n\t\"bdls\": \"border-left-style\",\n\t\"bdlw\": \"border-left-width\",\n\t\"bdr\": \"border-right:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdrc\": \"border-right-color:${1:#000}\",\n\t\"bdri\": \"border-right-image:url(${0})\",\n\t\"bdrs\": \"border-radius\",\n\t\"bdrst\": \"border-right-style\",\n\t\"bdrw\": \"border-right-width\",\n\t\"bds\": \"border-style:none|hidden|dotted|dashed|solid|double|dot-dash|dot-dot-dash|wave|groove|ridge|inset|outset\",\n\t\"bdsp\": \"border-spacing\",\n\t\"bdt\": \"border-top:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdtc\": \"border-top-color:${1:#000}\",\n\t\"bdti\": \"border-top-image:url(${0})\",\n\t\"bdtli\": \"border-top-left-image:url(${0})|continue\",\n\t\"bdtlrs\": \"border-top-left-radius\",\n\t\"bdtri\": \"border-top-right-image:url(${0})|continue\",\n\t\"bdtrrs\": \"border-top-right-radius\",\n\t\"bdts\": \"border-top-style\",\n\t\"bdtw\": \"border-top-width\",\n\t\"bdw\": \"border-width\",\n\t\"bfv\": \"backface-visibility:hidden|visible\",\n\t\"bg\": \"background:${1:#000}\",\n\t\"bga\": \"background-attachment:fixed|scroll\",\n\t\"bgbk\": \"background-break:bounding-box|each-box|continuous\",\n\t\"bgc\": \"background-color:#${1:fff}\",\n\t\"bgcp\": \"background-clip:padding-box|border-box|content-box|no-clip\",\n\t\"bgi\": \"background-image:url(${0})\",\n\t\"bgo\": \"background-origin:padding-box|border-box|content-box\",\n\t\"bgp\": \"background-position:${1:0} ${2:0}\",\n\t\"bgpx\": \"background-position-x\",\n\t\"bgpy\": \"background-position-y\",\n\t\"bgr\": \"background-repeat:no-repeat|repeat-x|repeat-y|space|round\",\n\t\"bgsz\": \"background-size:contain|cover\",\n\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:#000}|none\",\n\t\"bxsz\": \"box-sizing:border-box|content-box|border-box\",\n\t\"c\": \"color:${1:#000}\",\n\t\"cl\": \"clear:both|left|right|none\",\n\t\"cm\": \"/* ${0} */\",\n\t\"cnt\": \"content:'${0}'|normal|open-quote|no-open-quote|close-quote|no-close-quote|attr(${0})|counter(${0})|counters({$0})\",\n\t\"coi\": \"counter-increment\",\n\t\"colm\": \"columns\",\n\t\"colmc\": \"column-count\",\n\t\"colmf\": \"column-fill\",\n\t\"colmg\": \"column-gap\",\n\t\"colmr\": \"column-rule\",\n\t\"colmrc\": \"column-rule-color\",\n\t\"colmrs\": \"column-rule-style\",\n\t\"colmrw\": \"column-rule-width\",\n\t\"colms\": \"column-span\",\n\t\"colmw\": \"column-width\",\n\t\"cor\": \"counter-reset\",\n\t\"cp\": \"clip:auto|rect(${1:top} ${2:right} ${3:bottom} ${4:left})\",\n\t\"cps\": \"caption-side:top|bottom\",\n\t\"cur\": \"cursor:pointer|auto|default|crosshair|hand|help|move|pointer|text\",\n\t\"d\": \"display:grid|inline-grid|subgrid|block|none|flex|inline-flex|inline|inline-block|list-item|run-in|compact|table|inline-table|table-caption|table-column|table-column-group|table-header-group|table-footer-group|table-row|table-row-group|table-cell|ruby|ruby-base|ruby-base-group|ruby-text|ruby-text-group\",\n\t\"ec\": \"empty-cells:show|hide\",\n\t\"f\": \"font:${1:1em} ${2:sans-serif}\",\n\t\"fd\": \"font-display:auto|block|swap|fallback|optional\",\n\t\"fef\": \"font-effect:none|engrave|emboss|outline\",\n\t\"fem\": \"font-emphasize\",\n\t\"femp\": \"font-emphasize-position:before|after\",\n\t\"fems\": \"font-emphasize-style:none|accent|dot|circle|disc\",\n\t\"ff\": \"font-family:serif|sans-serif|cursive|fantasy|monospace\",\n\t\"fft\": \"font-family:\\\"Times New Roman\\\", Times, Baskerville, Georgia, serif\",\n\t\"ffa\": \"font-family:Arial, \\\"Helvetica Neue\\\", Helvetica, sans-serif\",\n\t\"ffv\": \"font-family:Verdana, Geneva, sans-serif\",\n\t\"fl\": \"float:left|right|none\",\n\t\"fs\": \"font-style:italic|normal|oblique\",\n\t\"fsm\": \"font-smoothing:antialiased|subpixel-antialiased|none\",\n\t\"fst\": \"font-stretch:normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded\",\n\t\"fv\": \"font-variant:normal|small-caps\",\n\t\"fvs\": \"font-variation-settings:normal|inherit|initial|unset\",\n\t\"fw\": \"font-weight:normal|bold|bolder|lighter\",\n\t\"fx\": \"flex\",\n\t\"fxb\": \"flex-basis:fill|max-content|min-content|fit-content|content\",\n\t\"fxd\": \"flex-direction:row|row-reverse|column|column-reverse\",\n\t\"fxf\": \"flex-flow\",\n\t\"fxg\": \"flex-grow\",\n\t\"fxsh\": \"flex-shrink\",\n\t\"fxw\": \"flex-wrap:nowrap|wrap|wrap-reverse\",\n\t\"fz\": \"font-size\",\n\t\"fza\": \"font-size-adjust\",\n\t\"gtc\": \"grid-template-columns:repeat()|minmax()\",\n\t\"gtr\": \"grid-template-rows:repeat()|minmax()\",\n\t\"gta\": \"grid-template-areas\",\n\t\"gt\": \"grid-template\",\n\t\"gg\": \"grid-gap\",\n\t\"gcg\": \"grid-column-gap\",\n\t\"grg\": \"grid-row-gap\",\n\t\"gac\": \"grid-auto-columns:auto|minmax()\",\n\t\"gar\": \"grid-auto-rows:auto|minmax()\",\n\t\"gaf\": \"grid-auto-flow:row|column|dense|inherit|initial|unset\",\n\t\"gd\": \"grid\",\n\t\"gc\": \"grid-column\",\n\t\"gcs\": \"grid-column-start\",\n\t\"gce\": \"grid-column-end\",\n\t\"gr\": \"grid-row\",\n\t\"grs\": \"grid-row-start\",\n\t\"gre\": \"grid-row-end\",\n\t\"ga\": \"grid-area\",\n\t\"h\": \"height\",\n\t\"jc\": \"justify-content:start|end|stretch|flex-start|flex-end|center|space-between|space-around|space-evenly\",\n\t\"ji\": \"justify-items:start|end|center|stretch\",\n\t\"js\": \"justify-self:start|end|center|stretch\",\n\t\"l\": \"left\",\n\t\"lg\": \"background-image:linear-gradient(${1})\",\n\t\"lh\": \"line-height\",\n\t\"lis\": \"list-style\",\n\t\"lisi\": \"list-style-image\",\n\t\"lisp\": \"list-style-position:inside|outside\",\n\t\"list\": \"list-style-type:disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman\",\n\t\"lts\": \"letter-spacing:normal\",\n\t\"m\": \"margin\",\n\t\"mah\": \"max-height\",\n\t\"mar\": \"max-resolution\",\n\t\"maw\": \"max-width\",\n\t\"mb\": \"margin-bottom\",\n\t\"mih\": \"min-height\",\n\t\"mir\": \"min-resolution\",\n\t\"miw\": \"min-width\",\n\t\"ml\": \"margin-left\",\n\t\"mr\": \"margin-right\",\n\t\"mt\": \"margin-top\",\n\t\"ol\": \"outline\",\n\t\"olc\": \"outline-color:${1:#000}|invert\",\n\t\"olo\": \"outline-offset\",\n\t\"ols\": \"outline-style:none|dotted|dashed|solid|double|groove|ridge|inset|outset\",\n\t\"olw\": \"outline-width|thin|medium|thick\",\n\t\"op\": \"opacity\",\n\t\"ord\": \"order\",\n\t\"ori\": \"orientation:landscape|portrait\",\n\t\"orp\": \"orphans\",\n\t\"ov\": \"overflow:hidden|visible|hidden|scroll|auto\",\n\t\"ovs\": \"overflow-style:scrollbar|auto|scrollbar|panner|move|marquee\",\n\t\"ovx\": \"overflow-x:hidden|visible|hidden|scroll|auto\",\n\t\"ovy\": \"overflow-y:hidden|visible|hidden|scroll|auto\",\n\t\"p\": \"padding\",\n\t\"pb\": \"padding-bottom\",\n\t\"pgba\": \"page-break-after:auto|always|left|right\",\n\t\"pgbb\": \"page-break-before:auto|always|left|right\",\n\t\"pgbi\": \"page-break-inside:auto|avoid\",\n\t\"pl\": \"padding-left\",\n\t\"pos\": \"position:relative|absolute|relative|fixed|static\",\n\t\"pr\": \"padding-right\",\n\t\"pt\": \"padding-top\",\n\t\"q\": \"quotes\",\n\t\"qen\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019'\",\n\t\"qru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C'\",\n\t\"r\": \"right\",\n\t\"rsz\": \"resize:none|both|horizontal|vertical\",\n\t\"t\": \"top\",\n\t\"ta\": \"text-align:left|center|right|justify\",\n\t\"tal\": \"text-align-last:left|center|right\",\n\t\"tbl\": \"table-layout:fixed\",\n\t\"td\": \"text-decoration:none|underline|overline|line-through\",\n\t\"te\": \"text-emphasis:none|accent|dot|circle|disc|before|after\",\n\t\"th\": \"text-height:auto|font-size|text-size|max-size\",\n\t\"ti\": \"text-indent\",\n\t\"tj\": \"text-justify:auto|inter-word|inter-ideograph|inter-cluster|distribute|kashida|tibetan\",\n\t\"to\": \"text-outline:${1:0} ${2:0} ${3:#000}\",\n\t\"tov\": \"text-overflow:ellipsis|clip\",\n\t\"tr\": \"text-replace\",\n\t\"trf\": \"transform:${1}|skewX(${1:angle})|skewY(${1:angle})|scale(${1:x}, ${2:y})|scaleX(${1:x})|scaleY(${1:y})|scaleZ(${1:z})|scale3d(${1:x}, ${2:y}, ${3:z})|rotate(${1:angle})|rotateX(${1:angle})|rotateY(${1:angle})|rotateZ(${1:angle})|translate(${1:x}, ${2:y})|translateX(${1:x})|translateY(${1:y})|translateZ(${1:z})|translate3d(${1:tx}, ${2:ty}, ${3:tz})\",\n\t\"trfo\": \"transform-origin\",\n\t\"trfs\": \"transform-style:preserve-3d\",\n\t\"trs\": \"transition:${1:prop} ${2:time}\",\n\t\"trsde\": \"transition-delay:${1:time}\",\n\t\"trsdu\": \"transition-duration:${1:time}\",\n\t\"trsp\": \"transition-property:${1:prop}\",\n\t\"trstf\": \"transition-timing-function:${1:fn}\",\n\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000}\",\n\t\"tt\": \"text-transform:uppercase|lowercase|capitalize|none\",\n\t\"tw\": \"text-wrap:none|normal|unrestricted|suppress\",\n\t\"us\": \"user-select:none\",\n\t\"v\": \"visibility:hidden|visible|collapse\",\n\t\"va\": \"vertical-align:top|super|text-top|middle|baseline|bottom|text-bottom|sub\",\n\t\"w\": \"width\",\n\t\"whs\": \"white-space:nowrap|pre|pre-wrap|pre-line|normal\",\n\t\"whsc\": \"white-space-collapse:normal|keep-all|loose|break-strict|break-all\",\n\t\"wid\": \"widows\",\n\t\"wm\": \"writing-mode:lr-tb|lr-tb|lr-bt|rl-tb|rl-bt|tb-rl|tb-lr|bt-lr|bt-rl\",\n\t\"wob\": \"word-break:normal|keep-all|break-all\",\n\t\"wos\": \"word-spacing\",\n\t\"wow\": \"word-wrap:none|unrestricted|suppress|break-word|normal\",\n\t\"z\": \"z-index\",\n\t\"zom\": \"zoom:1\"\n};\n\nvar xsl = {\n    \"tm|tmatch\": \"xsl:template[match mode]\",\n    \"tn|tname\": \"xsl:template[name]\",\n    \"call\": \"xsl:call-template[name]\",\n    \"ap\": \"xsl:apply-templates[select mode]\",\n    \"api\": \"xsl:apply-imports\",\n    \"imp\": \"xsl:import[href]\",\n    \"inc\": \"xsl:include[href]\",\n    \"ch\": \"xsl:choose\",\n    \"wh|xsl:when\": \"xsl:when[test]\",\n    \"ot\": \"xsl:otherwise\",\n    \"if\": \"xsl:if[test]\",\n    \"par\": \"xsl:param[name]\",\n    \"pare\": \"xsl:param[name select]\",\n    \"var\": \"xsl:variable[name]\",\n    \"vare\": \"xsl:variable[name select]\",\n    \"wp\": \"xsl:with-param[name select]\",\n    \"key\": \"xsl:key[name match use]\",\n    \"elem\": \"xsl:element[name]\",\n    \"attr\": \"xsl:attribute[name]\",\n    \"attrs\": \"xsl:attribute-set[name]\",\n    \"cp\": \"xsl:copy[select]\",\n    \"co\": \"xsl:copy-of[select]\",\n    \"val\": \"xsl:value-of[select]\",\n    \"for|each\": \"xsl:for-each[select]\",\n    \"tex\": \"xsl:text\",\n    \"com\": \"xsl:comment\",\n    \"msg\": \"xsl:message[terminate=no]\",\n    \"fall\": \"xsl:fallback\",\n    \"num\": \"xsl:number[value]\",\n    \"nam\": \"namespace-alias[stylesheet-prefix result-prefix]\",\n    \"pres\": \"xsl:preserve-space[elements]\",\n    \"strip\": \"xsl:strip-space[elements]\",\n    \"proc\": \"xsl:processing-instruction[name]\",\n    \"sort\": \"xsl:sort[select order]\",\n    \"choose\": \"xsl:choose>xsl:when+xsl:otherwise\",\n    \"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\",\n    \"!!!\": \"{<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>}\"\n};\n\nvar index = { html, css, xsl };\n\nexport default index;\n","import resolveImplicitTag from '@emmetio/implicit-tag';\n\nvar latin = {\n\t\"common\": [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipisicing\", \"elit\"],\n\t\"words\": [\"exercitationem\", \"perferendis\", \"perspiciatis\", \"laborum\", \"eveniet\",\n\t\t\"sunt\", \"iure\", \"nam\", \"nobis\", \"eum\", \"cum\", \"officiis\", \"excepturi\",\n\t\t\"odio\", \"consectetur\", \"quasi\", \"aut\", \"quisquam\", \"vel\", \"eligendi\",\n\t\t\"itaque\", \"non\", \"odit\", \"tempore\", \"quaerat\", \"dignissimos\",\n\t\t\"facilis\", \"neque\", \"nihil\", \"expedita\", \"vitae\", \"vero\", \"ipsum\",\n\t\t\"nisi\", \"animi\", \"cumque\", \"pariatur\", \"velit\", \"modi\", \"natus\",\n\t\t\"iusto\", \"eaque\", \"sequi\", \"illo\", \"sed\", \"ex\", \"et\", \"voluptatibus\",\n\t\t\"tempora\", \"veritatis\", \"ratione\", \"assumenda\", \"incidunt\", \"nostrum\",\n\t\t\"placeat\", \"aliquid\", \"fuga\", \"provident\", \"praesentium\", \"rem\",\n\t\t\"necessitatibus\", \"suscipit\", \"adipisci\", \"quidem\", \"possimus\",\n\t\t\"voluptas\", \"debitis\", \"sint\", \"accusantium\", \"unde\", \"sapiente\",\n\t\t\"voluptate\", \"qui\", \"aspernatur\", \"laudantium\", \"soluta\", \"amet\",\n\t\t\"quo\", \"aliquam\", \"saepe\", \"culpa\", \"libero\", \"ipsa\", \"dicta\",\n\t\t\"reiciendis\", \"nesciunt\", \"doloribus\", \"autem\", \"impedit\", \"minima\",\n\t\t\"maiores\", \"repudiandae\", \"ipsam\", \"obcaecati\", \"ullam\", \"enim\",\n\t\t\"totam\", \"delectus\", \"ducimus\", \"quis\", \"voluptates\", \"dolores\",\n\t\t\"molestiae\", \"harum\", \"dolorem\", \"quia\", \"voluptatem\", \"molestias\",\n\t\t\"magni\", \"distinctio\", \"omnis\", \"illum\", \"dolorum\", \"voluptatum\", \"ea\",\n\t\t\"quas\", \"quam\", \"corporis\", \"quae\", \"blanditiis\", \"atque\", \"deserunt\",\n\t\t\"laboriosam\", \"earum\", \"consequuntur\", \"hic\", \"cupiditate\",\n\t\t\"quibusdam\", \"accusamus\", \"ut\", \"rerum\", \"error\", \"minus\", \"eius\",\n\t\t\"ab\", \"ad\", \"nemo\", \"fugit\", \"officia\", \"at\", \"in\", \"id\", \"quos\",\n\t\t\"reprehenderit\", \"numquam\", \"iste\", \"fugiat\", \"sit\", \"inventore\",\n\t\t\"beatae\", \"repellendus\", \"magnam\", \"recusandae\", \"quod\", \"explicabo\",\n\t\t\"doloremque\", \"aperiam\", \"consequatur\", \"asperiores\", \"commodi\",\n\t\t\"optio\", \"dolor\", \"labore\", \"temporibus\", \"repellat\", \"veniam\",\n\t\t\"architecto\", \"est\", \"esse\", \"mollitia\", \"nulla\", \"a\", \"similique\",\n\t\t\"eos\", \"alias\", \"dolore\", \"tenetur\", \"deleniti\", \"porro\", \"facere\",\n\t\t\"maxime\", \"corrupti\"]\n};\n\nvar ru = {\n\t\"common\": [\"далеко-далеко\", \"за\", \"словесными\", \"горами\", \"в стране\", \"гласных\", \"и согласных\", \"живут\", \"рыбные\", \"тексты\"],\n\t\"words\": [\"вдали\", \"от всех\", \"они\", \"буквенных\", \"домах\", \"на берегу\", \"семантика\",\n\t\t\"большого\", \"языкового\", \"океана\", \"маленький\", \"ручеек\", \"даль\",\n\t\t\"журчит\", \"по всей\", \"обеспечивает\", \"ее\",\"всеми\", \"необходимыми\",\n\t\t\"правилами\", \"эта\", \"парадигматическая\", \"страна\", \"которой\", \"жаренные\",\n\t\t\"предложения\", \"залетают\", \"прямо\", \"рот\", \"даже\", \"всемогущая\",\n\t\t\"пунктуация\", \"не\", \"имеет\", \"власти\", \"над\", \"рыбными\", \"текстами\",\n\t\t\"ведущими\", \"безорфографичный\", \"образ\", \"жизни\", \"однажды\", \"одна\",\n\t\t\"маленькая\", \"строчка\",\"рыбного\", \"текста\", \"имени\", \"lorem\", \"ipsum\",\n\t\t\"решила\", \"выйти\", \"большой\", \"мир\", \"грамматики\", \"великий\", \"оксмокс\",\n\t\t\"предупреждал\", \"о\", \"злых\", \"запятых\", \"диких\", \"знаках\", \"вопроса\",\n\t\t\"коварных\", \"точках\", \"запятой\", \"но\", \"текст\", \"дал\", \"сбить\",\n\t\t\"себя\", \"толку\", \"он\", \"собрал\", \"семь\", \"своих\", \"заглавных\", \"букв\",\n\t\t\"подпоясал\", \"инициал\", \"за\", \"пояс\", \"пустился\", \"дорогу\",\n\t\t\"взобравшись\", \"первую\", \"вершину\", \"курсивных\", \"гор\", \"бросил\",\n\t\t\"последний\", \"взгляд\", \"назад\", \"силуэт\", \"своего\", \"родного\", \"города\",\n\t\t\"буквоград\", \"заголовок\", \"деревни\", \"алфавит\", \"подзаголовок\", \"своего\",\n\t\t\"переулка\", \"грустный\", \"реторический\", \"вопрос\", \"скатился\", \"его\",\n\t\t\"щеке\", \"продолжил\", \"свой\", \"путь\", \"дороге\", \"встретил\", \"рукопись\",\n\t\t\"она\", \"предупредила\",  \"моей\", \"все\", \"переписывается\", \"несколько\",\n\t\t\"раз\", \"единственное\", \"что\", \"меня\", \"осталось\", \"это\", \"приставка\",\n\t\t\"возвращайся\", \"ты\", \"лучше\", \"свою\", \"безопасную\", \"страну\", \"послушавшись\",\n\t\t\"рукописи\", \"наш\", \"продолжил\", \"свой\", \"путь\", \"вскоре\", \"ему\",\n\t\t\"повстречался\", \"коварный\", \"составитель\", \"рекламных\", \"текстов\",\n\t\t\"напоивший\", \"языком\", \"речью\", \"заманивший\", \"свое\", \"агентство\",\n\t\t\"которое\", \"использовало\", \"снова\", \"снова\", \"своих\", \"проектах\",\n\t\t\"если\", \"переписали\", \"то\", \"живет\", \"там\", \"до\", \"сих\", \"пор\"]\n};\n\nvar sp = {\n\t\"common\": [\"mujer\", \"uno\", \"dolor\", \"más\", \"de\", \"poder\", \"mismo\", \"si\"],\n\t\"words\": [\"ejercicio\", \"preferencia\", \"perspicacia\", \"laboral\", \"paño\",\n\t\t\"suntuoso\", \"molde\", \"namibia\", \"planeador\", \"mirar\", \"demás\", \"oficinista\", \"excepción\",\n\t\t\"odio\", \"consecuencia\", \"casi\", \"auto\", \"chicharra\", \"velo\", \"elixir\",\n\t\t\"ataque\", \"no\", \"odio\", \"temporal\", \"cuórum\", \"dignísimo\",\n\t\t\"facilismo\", \"letra\", \"nihilista\", \"expedición\", \"alma\", \"alveolar\", \"aparte\",\n\t\t\"león\", \"animal\", \"como\", \"paria\", \"belleza\", \"modo\", \"natividad\",\n\t\t\"justo\", \"ataque\", \"séquito\", \"pillo\", \"sed\", \"ex\", \"y\", \"voluminoso\",\n\t\t\"temporalidad\", \"verdades\", \"racional\", \"asunción\", \"incidente\", \"marejada\",\n\t\t\"placenta\", \"amanecer\", \"fuga\", \"previsor\", \"presentación\", \"lejos\",\n\t\t\"necesariamente\", \"sospechoso\", \"adiposidad\", \"quindío\", \"pócima\",\n\t\t\"voluble\", \"débito\", \"sintió\", \"accesorio\", \"falda\", \"sapiencia\",\n\t\t\"volutas\", \"queso\", \"permacultura\", \"laudo\", \"soluciones\", \"entero\",\n\t\t\"pan\", \"litro\", \"tonelada\", \"culpa\", \"libertario\", \"mosca\", \"dictado\",\n\t\t\"reincidente\", \"nascimiento\", \"dolor\", \"escolar\", \"impedimento\", \"mínima\",\n\t\t\"mayores\", \"repugnante\", \"dulce\", \"obcecado\", \"montaña\", \"enigma\",\n\t\t\"total\", \"deletéreo\", \"décima\", \"cábala\", \"fotografía\", \"dolores\",\n\t\t\"molesto\", \"olvido\", \"paciencia\", \"resiliencia\", \"voluntad\", \"molestias\",\n\t\t\"magnífico\", \"distinción\", \"ovni\", \"marejada\", \"cerro\", \"torre\", \"y\",\n\t\t\"abogada\", \"manantial\", \"corporal\", \"agua\", \"crepúsculo\", \"ataque\", \"desierto\",\n\t\t\"laboriosamente\", \"angustia\", \"afortunado\", \"alma\", \"encefalograma\",\n\t\t\"materialidad\", \"cosas\", \"o\", \"renuncia\", \"error\", \"menos\", \"conejo\",\n\t\t\"abadía\", \"analfabeto\", \"remo\", \"fugacidad\", \"oficio\", \"en\", \"almácigo\", \"vos\", \"pan\",\n\t\t\"represión\", \"números\", \"triste\", \"refugiado\", \"trote\", \"inventor\",\n\t\t\"corchea\", \"repelente\", \"magma\", \"recusado\", \"patrón\", \"explícito\",\n\t\t\"paloma\", \"síndrome\", \"inmune\", \"autoinmune\", \"comodidad\",\n\t\t\"ley\", \"vietnamita\", \"demonio\", \"tasmania\", \"repeler\", \"apéndice\",\n\t\t\"arquitecto\", \"columna\", \"yugo\", \"computador\", \"mula\", \"a\", \"propósito\",\n\t\t\"fantasía\", \"alias\", \"rayo\", \"tenedor\", \"deleznable\", \"ventana\", \"cara\",\n\t\t\"anemia\", \"corrupto\"]\n};\n\nconst langs = { latin, ru, sp };\n\nconst defaultOptions = {\n\twordCount: 30,\n\tskipCommon: false,\n\tlang: 'latin'\n};\n\n/**\n * Replaces given parsed Emmet abbreviation node with nodes filled with\n * Lorem Ipsum stub text.\n * @param {Node} node\n * @return {Node}\n */\nvar index = function(node, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\tconst dict = langs[options.lang] || langs.latin;\n    const startWithCommon = !options.skipCommon && !isRepeating(node);\n\n\tif (!node.repeat && !isRoot(node.parent)) {\n\t\t// non-repeating element, insert text stub as a content of parent node\n\t\t// and remove current one\n\t\tnode.parent.value = paragraph(dict, options.wordCount, startWithCommon);\n\t\tnode.remove();\n\t} else {\n\t\t// Replace named node with generated content\n\t\tnode.value = paragraph(dict, options.wordCount, startWithCommon);\n\t\tnode.name = node.parent.name ? resolveImplicitTag(node.parent.name) : null;\n\t}\n\n\treturn node;\n};\n\nfunction isRoot(node) {\n\treturn !node.parent;\n}\n\n/**\n * Returns random integer between <code>from</code> and <code>to</code> values\n * @param {Number} from\n * @param {Number} to\n * @returns {Number}\n */\nfunction rand(from, to) {\n\treturn Math.floor(Math.random() * (to - from) + from);\n}\n\n/**\n * @param {Array} arr\n * @param {Number} count\n * @returns {Array}\n */\nfunction sample(arr, count) {\n\tconst len = arr.length;\n\tconst iterations = Math.min(len, count);\n\tconst result = new Set();\n\n\twhile (result.size < iterations) {\n\t\tresult.add(arr[rand(0, len)]);\n\t}\n\n\treturn Array.from(result);\n}\n\nfunction choice(val) {\n\treturn val[rand(0, val.length - 1)];\n}\n\nfunction sentence(words, end) {\n\tif (words.length) {\n\t\twords = [capitalize(words[0])].concat(words.slice(1));\n\t}\n\n\treturn words.join(' ') + (end || choice('?!...')); // more dots than question marks\n}\n\nfunction capitalize(word) {\n\treturn word[0].toUpperCase() + word.slice(1);\n}\n\n/**\n * Insert commas at randomly selected words. This function modifies values\n * inside <code>words</code> array\n * @param {Array} words\n */\nfunction insertCommas(words) {\n\tif (words.length < 2) {\n\t\treturn words;\n\t}\n\n\twords = words.slice();\n\tconst len = words.length;\n\tconst hasComma = /,$/;\n\tlet totalCommas = 0;\n\n\tif (len > 3 && len <= 6) {\n\t\ttotalCommas = rand(0, 1);\n\t} else if (len > 6 && len <= 12) {\n\t\ttotalCommas = rand(0, 2);\n\t} else {\n\t\ttotalCommas = rand(1, 4);\n\t}\n\n\tfor (let i = 0, pos, word; i < totalCommas; i++) {\n\t\tpos = rand(0, len - 2);\n\t\tif (!hasComma.test(words[pos])) {\n\t\t\twords[pos] += ',';\n\t\t}\n\t}\n\n\treturn words;\n}\n\n/**\n * Generate a paragraph of \"Lorem ipsum\" text\n * @param {Object} dict Words dictionary (see `lang/*.json`)\n * @param {Number} wordCount Words count in paragraph\n * @param {Boolean} startWithCommon Should paragraph start with common\n * \"lorem ipsum\" sentence.\n * @returns {String}\n */\nfunction paragraph(dict, wordCount, startWithCommon) {\n\tconst result = [];\n\tlet totalWords = 0;\n\tlet words;\n\n\tif (startWithCommon && dict.common) {\n\t\twords = dict.common.slice(0, wordCount);\n\t\ttotalWords += words.length;\n\t\tresult.push(sentence(insertCommas(words), '.'));\n\t}\n\n\twhile (totalWords < wordCount) {\n\t\twords = sample(dict.words, Math.min(rand(2, 30), wordCount - totalWords));\n\t\ttotalWords += words.length;\n\t\tresult.push(sentence(insertCommas(words)));\n\t}\n\n\treturn result.join(' ');\n}\n\n/**\n * Check if given node is in repeating context, e.g. node itself or one of its\n * parent is repeated\n * @param  {Node}  node\n * @return {Boolean}\n */\nfunction isRepeating(node) {\n    while (node.parent) {\n        if (node.repeat && node.repeat.value && node.repeat.value > 1) {\n            return true;\n        }\n\n        node = node.parent;\n    }\n\n    return false;\n}\n\nexport default index;\n","class Snippet {\n    constructor(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n}\n\nclass SnippetsStorage {\n    constructor(data) {\n        this._string = new Map();\n        this._regexp = new Map();\n        this._disabled = false;\n\n        this.load(data);\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    /**\n     * Disables current store. A disabled store always returns `undefined`\n     * on `get()` method\n     */\n    disable() {\n        this._disabled = true;\n    }\n\n    /**\n     * Enables current store.\n     */\n    enable() {\n        this._disabled = false;\n    }\n\n    /**\n     * Registers a new snippet item\n     * @param {String|Regexp} key\n     * @param {String|Function} value\n     */\n    set(key, value) {\n        if (typeof key === 'string') {\n            key.split('|').forEach(k => this._string.set(k, new Snippet(k, value)));\n        } else if (key instanceof RegExp) {\n            this._regexp.set(key, new Snippet(key, value));\n        } else {\n            throw new Error('Unknow snippet key: ' + key);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns a snippet matching given key. It first tries to find snippet\n     * exact match in a string key map, then tries to match one with regexp key\n     * @param {String} key\n     * @return {Snippet}\n     */\n    get(key) {\n        if (this.disabled) {\n            return undefined;\n        }\n\n        if (this._string.has(key)) {\n            return this._string.get(key);\n        }\n\n        const keys = Array.from(this._regexp.keys());\n        for (let i = 0, il = keys.length; i < il; i++) {\n            if (keys[i].test(key)) {\n                return this._regexp.get(keys[i]);\n            }\n        }\n    }\n\n    /**\n     * Batch load of snippets data\n     * @param {Object|Map} data\n     */\n    load(data) {\n        this.reset();\n        if (data instanceof Map) {\n            data.forEach((value, key) => this.set(key, value));\n        } else if (data && typeof data === 'object') {\n            Object.keys(data).forEach(key => this.set(key, data[key]));\n        }\n    }\n\n    /**\n     * Clears all stored snippets\n     */\n    reset() {\n        this._string.clear();\n        this._regexp.clear();\n    }\n\n    /**\n     * Returns all available snippets from given store\n     */\n    values() {\n        if (this.disabled) {\n            return [];\n        }\n        \n        const string = Array.from(this._string.values());\n        const regexp = Array.from(this._regexp.values());\n        return string.concat(regexp);\n    }\n}\n\n/**\n * A snippets registry. Contains snippets, separated by store and sorted by\n * priority: a store with higher priority takes precedence when resolving snippet\n * for given key\n */\nclass SnippetsRegistry {\n    /**\n     * Creates snippets registry, filled with given `data`\n     * @param {Object|Array} data Registry snippets. If array is given, adds items\n     * from array in order of precedence, registers global snippets otherwise\n     */\n    constructor(data) {\n        this._registry = [];\n\n        if (Array.isArray(data)) {\n            data.forEach((snippets, level) => this.add(level, snippets));\n        } else if (typeof data === 'object') {\n            this.add(data);\n        }\n    }\n\n    /**\n     * Return store for given level\n     * @param {Number} level\n     * @return {SnippetsStorage}\n     */\n    get(level) {\n        for (let i = 0; i < this._registry.length; i++) {\n            const item = this._registry[i];\n            if (item.level === level) {\n                return item.store;\n            }\n        }\n    }\n\n    /**\n     * Adds new store for given level\n     * @param {Number} [level] Store level (priority). Store with higher level\n     * takes precedence when resolving snippets\n     * @param {Object} [snippets] A snippets data for new store\n     * @return {SnipetsStorage}\n     */\n    add(level, snippets) {\n        if (level != null && typeof level === 'object') {\n            snippets = level;\n            level = 0;\n        }\n\n        const store = new SnippetsStorage(snippets);\n\n        // remove previous store from same level\n        this.remove(level);\n\n        this._registry.push({level, store});\n        this._registry.sort((a, b) => b.level - a.level);\n\n        return store;\n    }\n\n    /**\n     * Remove registry with given level or store\n     * @param {Number|SnippetsStorage} data Either level or snippets store\n     */\n    remove(data) {\n        this._registry = this._registry\n        .filter(item => item.level !== data && item.store !== data);\n    }\n\n    /**\n     * Returns snippet from registry that matches given name\n     * @param {String} name\n     * @return {Snippet}\n     */\n    resolve(name) {\n        for (let i = 0; i < this._registry.length; i++) {\n            const snippet = this._registry[i].store.get(name);\n            if (snippet) {\n                return snippet;\n            }\n        }\n    }\n\n    /**\n     * Returns all available snippets from current registry. Snippets with the\n     * same key are resolved by their storage priority.\n     * @param {Object} options\n     * @param {Object} options.type Return snippets only of given type: 'string'\n     * or 'regexp'. Returns all snippets if not defined\n     * @return {Array}\n     */\n    all(options) {\n        options = options || {};\n        const result = new Map();\n\n        const fillResult = snippet => {\n            const type = snippet.key instanceof RegExp ? 'regexp' : 'string';\n            if ((!options.type || options.type === type) && !result.has(snippet.key)) {\n                result.set(snippet.key, snippet);\n            }\n        };\n\n        this._registry.forEach(item => {\n            item.store.values().forEach(fillResult);\n        });\n\n        return Array.from(result.values());\n    }\n\n    /**\n     * Removes all stores from registry\n     */\n    clear() {\n        this._registry.length = 0;\n    }\n}\n\nexport default SnippetsRegistry;\n","/**\n * @type {EmmetOutputProfile}\n */\nvar defaultOptions = {\n\tindent: '\\t',\n\ttagCase: '',\n\tattributeCase: '',\n\tattributeQuotes: 'double',\n\tformat: true,\n\tformatSkip: ['html'],\n\tformatForce: ['body'],\n\tinlineBreak: 3,\n\tcompactBooleanAttributes: false,\n\tbooleanAttributes: ['contenteditable', 'seamless', 'async', 'autofocus',\n\t\t'autoplay', 'checked', 'controls', 'defer', 'disabled', 'formnovalidate',\n\t\t'hidden', 'ismap', 'loop', 'multiple', 'muted', 'novalidate', 'readonly',\n\t\t'required', 'reversed', 'selected', 'typemustmatch'],\n\tselfClosingStyle: 'html',\n\tinlineElements: ['a', 'abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo',\n\t\t'big', 'br', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i',\n\t\t'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'object', 'q',\n\t\t's', 'samp', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup',\n\t\t'textarea', 'tt', 'u', 'var']\n};\n\n/**\n * Creates output profile for given options\n */\nclass Profile {\n\t/**\n\t * @param {EmmetOutputProfile} options \n\t */\n    constructor(options) {\n\t\t/** @type {EmmetOutputProfile} */\n\t\tthis.options = Object.assign({}, defaultOptions, options);\n\t\tthis.quoteChar = this.options.attributeQuotes === 'single' ? '\\'' : '\"';\n    }\n\n\t/**\n\t * Returns value of given option name\n\t * @param {String} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this.options[name];\n\t}\n\n    /**\n     * Quote given string according to profile\n     * @param {String} str String to quote\n     * @return {String}\n     */\n    quote(str) {\n        return `${this.quoteChar}${str != null ? str : ''}${this.quoteChar}`;\n    }\n\n    /**\n     * Output given tag name according to options\n     * @param {String} name\n     * @return {String}\n     */\n    name(name) {\n        return strcase(name, this.options.tagCase);\n    }\n\n\t/**\n\t * Outputs attribute name according to current settings\n\t * @param {String} attr Attribute name\n\t * @return {String}\n\t */\n    attribute(attr) {\n        return strcase(attr, this.options.attributeCase);\n    }\n\n    /**\n     * Check if given attribute is boolean\n     * @param {Object} attr\n     * @return {Boolean}\n     */\n    isBooleanAttribute(attr) {\n        return attr.options.boolean\n\t\t\t|| this.get('booleanAttributes').indexOf((attr.name || '').toLowerCase()) !== -1;\n    }\n\n\t/**\n\t * Returns a token for self-closing tag, depending on current options\n\t * @return {String}\n\t */\n\tselfClose() {\n\t\tswitch (this.options.selfClosingStyle) {\n\t\t\tcase 'xhtml': return ' /';\n\t\t\tcase 'xml':   return '/';\n\t\t\tdefault:      return '';\n\t\t}\n\t}\n\n\t/**\n\t * Returns indent for given level\n\t * @param {Number} level Indentation level\n\t * @return {String}\n\t */\n\tindent(level) {\n\t\tlevel = level || 0;\n\t\tlet output = '';\n\t\twhile (level--) {\n\t\t\toutput += this.options.indent;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\t/**\n\t * Check if given tag name belongs to inline-level element\n\t * @param {Object|String} node Parsed node or tag name\n\t * @return {Boolean}\n\t */\n\tisInline(node) {\n        if (typeof node === 'string') {\n            return this.get('inlineElements').indexOf(node.toLowerCase()) !== -1;\n        }\n\n        // inline node is a node either with inline-level name or text-only node\n        return node.name != null ? this.isInline(node.name) : node.isTextOnly;\n\t}\n\n\t/**\n\t * Outputs formatted field for given params\n\t * @param {Number} index Field index\n\t * @param {String} [placeholder] Field placeholder, can be empty\n\t * @return {String}\n\t */\n\tfield(index, placeholder) {\n\t\treturn this.options.field(index, placeholder);\n\t}\n}\nfunction strcase(string, type) {\n    if (type) {\n        return type === 'upper' ? string.toUpperCase() : string.toLowerCase();\n\t}\n\t\n    return string;\n}\n\nexport default Profile;\n","'use strict';\n\nimport parseAbbreviation from '@emmetio/abbreviation';\nimport resolveSnippets from '@emmetio/html-snippets-resolver';\nimport transform from '@emmetio/html-transform';\nimport resolveVariables from '@emmetio/variable-resolver';\nimport format from '@emmetio/markup-formatters';\n\n/**\n * Expands given abbreviation into code\n * @param  {String|Node} abbr    Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = Object.assign({}, config);\n\n\tif (typeof abbr === 'string') {\n\t\tabbr = parse(abbr, config);\n\t}\n\n\treturn format(abbr, config.profile, config.syntax, config);\n}\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n * @param {String} Abbreviation to parse\n * @param  {Object} config\n * @return {Node}\n */\nexport function parse(abbr, config) {\n\treturn parseAbbreviation(abbr)\n\t\t.use(resolveSnippets, config.snippets)\n\t\t.use(resolveVariables, config.variables)\n\t\t.use(transform, config.text, config.options);\n}\n","'use strict';\n\nimport parseAbbreviation from '@emmetio/css-abbreviation';\nimport resolveSnippets from '@emmetio/css-snippets-resolver';\nimport format from '@emmetio/stylesheet-formatters';\n\n/**\n * Expands given abbreviation into code\n * @param  {String|Node} abbr    Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {String}\n */\nexport function expand(abbr, config) {\n\tconfig = config || {};\n\n\tif (typeof abbr === 'string') {\n\t\tabbr = parse(abbr, config);\n\t}\n\n\treturn format(abbr, config.profile, config.syntax, config);\n}\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n * @param {String|Node} abbr Abbreviation to parse or already parsed abbreviation\n * @param  {Object} config\n * @return {Node}\n */\nexport function parse(abbr, config) {\n\tif (typeof abbr === 'string') {\n\t\tabbr = parseAbbreviation(abbr);\n\t}\n\n\treturn abbr.use(resolveSnippets, config.snippets, config.options);\n}\n","'use strict';\n\nimport defaultSnippets from '@emmetio/snippets';\nimport lorem from '@emmetio/lorem';\nimport SnippetsRegistry from '@emmetio/snippets-registry';\n\nconst reLorem = /^lorem([a-z]*)(\\d*)$/i;\n\n/**\n * Constructs a snippets registry, filled with snippets, for given options\n * @param  {String} syntax  Abbreviation syntax\n * @param  {Object|Object[]} snippets Additional snippets\n * @return {SnippetsRegistry}\n */\nexport default function(type, syntax, snippets) {\n\tconst registrySnippets = [];\n\n\tif (type === 'markup') {\n\t\tregistrySnippets.push(defaultSnippets.html);\n\t} else if (type === 'stylesheet') {\n\t\tregistrySnippets.push(defaultSnippets.css);\n\t}\n\n\tif (syntax in defaultSnippets && registrySnippets.indexOf(defaultSnippets[syntax]) === -1) {\n\t\tregistrySnippets.push(defaultSnippets[syntax]);\n\t}\n\n\tif (Array.isArray(snippets)) {\n\t\tsnippets.forEach(item => {\n\t\t\t// if array item is a string, treat it as a reference to globally\n\t\t\t// defined snippets\n\t\t\tregistrySnippets.push(typeof item === 'string' ? defaultSnippets[item] : item);\n\t\t});\n\t} else if (typeof snippets === 'object') {\n\t\tregistrySnippets.push(snippets);\n\t}\n\n\tconst registry = new SnippetsRegistry(registrySnippets.filter(Boolean));\n\n\t// for non-stylesheet syntaxes add Lorem Ipsum generator\n\tif (type !== 'stylesheet') {\n\t\tregistry.get(0).set(reLorem, loremGenerator);\n\t}\n\n\treturn registry;\n}\n\nfunction loremGenerator(node) {\n\tconst options = {};\n\tconst m = node.name.match(reLorem);\n\tif (m[1]) {\n\t\toptions.lang = m[1];\n\t}\n\n\tif (m[2]) {\n\t\toptions.wordCount = +m[2];\n\t}\n\n\treturn lorem(node, options);\n}\n","import StreamReader from '@emmetio/stream-reader';\nimport { eatPair, eatQuoted, isAlphaNumeric, isQuote, isSpace } from '@emmetio/stream-reader-utils';\n\nclass Node {\n\tconstructor(stream, type, open, close) {\n\t\tthis.stream = stream;\n\t\tthis.type = type;\n\t\tthis.open = open;\n\t\tthis.close = close;\n\n\t\tthis.children = [];\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Returns node name\n\t * @return {String}\n\t */\n\tget name() {\n\t\tif (this.type === 'tag' && this.open) {\n\t\t\treturn this.open && this.open.name && this.open.name.value;\n\t\t}\n\n\t\treturn '#' + this.type;\n\t}\n\n\t/**\n\t * Returns attributes of current node\n\t * @return {Array}\n\t */\n\tget attributes() {\n\t\treturn this.open && this.open.attributes;\n\t}\n\n\t/**\n\t * Returns node’s start position in stream\n\t * @return {*}\n\t */\n\tget start() {\n\t\treturn this.open && this.open.start;\n\t}\n\n\t/**\n\t * Returns node’s start position in stream\n\t * @return {*}\n\t */\n\tget end() {\n\t\treturn this.close ? this.close.end : this.open && this.open.end;\n\t}\n\n\tget firstChild() {\n\t\treturn this.children[0];\n\t}\n\n\tget nextSibling() {\n\t\tconst ix = this.getIndex();\n\t\treturn ix !== -1 ? this.parent.children[ix + 1] : null;\n\t}\n\n\tget previousSibling() {\n\t\tconst ix = this.getIndex();\n\t\treturn ix !== -1 ? this.parent.children[ix - 1] : null;\n\t}\n\n\t/**\n\t * Returns current element’s index in parent list of child nodes\n\t * @return {Number}\n\t */\n\tgetIndex() {\n\t\treturn this.parent ? this.parent.children.indexOf(this) : -1;\n\t}\n\n\t/**\n\t * Adds given node as a child\n\t * @param {Node} node\n\t * @return {Node} Current node\n\t */\n\taddChild(node) {\n\t\tthis.removeChild(node);\n\t\tthis.children.push(node);\n\t\tnode.parent = this;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes given node from current node’s child list\n\t * @param  {Node} node\n\t * @return {Node} Current node\n\t */\n\tremoveChild(node) {\n\t\tconst ix = this.children.indexOf(node);\n\t\tif (ix !== -1) {\n\t\t\tthis.children.splice(ix, 1);\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\n/**\n * A token factory method\n * @param  {StreamReader}   stream\n * @param  {Point|Function} start  Tokens’ start location or stream consumer\n * @param  {Point}          [end]  Tokens’ end location\n * @return {Token}\n */\nvar token = function(stream, start, end) {\n\treturn typeof start === 'function'\n\t\t? eatToken(stream, start)\n\t\t: new Token(stream, start, end);\n};\n\n/**\n * Consumes characters from given stream that matches `fn` call and returns it\n * as token, if consumed\n * @param  {StreamReader} stream\n * @param  {Function} test\n * @return {Token}\n */\nfunction eatToken(stream, test) {\n\tconst start = stream.pos;\n\tif (stream.eatWhile(test)) {\n\t\treturn new Token(stream, start, stream.pos);\n\t}\n\n\tstream.pos = start;\n}\n\n/**\n * A structure describing text fragment in content stream\n */\nclass Token {\n\t/**\n\t * @param {ContentStreamReader} stream\n\t * @param {Point} start         Tokens’ start location in content stream\n\t * @param {Point} end           Tokens’ end location in content stream\n\t */\n\tconstructor(stream, start, end) {\n\t\tthis.stream = stream;\n\t\tthis.start = start != null ? start : stream.start;\n\t\tthis.end   = end   != null ? end   : stream.pos;\n\t\tthis._value = null;\n\t}\n\n\t/**\n\t * Returns token textual value\n\t * NB implemented as getter to reduce unnecessary memory allocations for\n\t * strings that not required\n\t * @return {String}\n\t */\n\tget value() {\n\t\tif (this._value === null) {\n\t\t\tconst start = this.stream.start;\n\t\t\tconst end = this.stream.pos;\n\n\t\t\tthis.stream.start = this.start;\n\t\t\tthis.stream.pos = this.end;\n\t\t\tthis._value = this.stream.current();\n\n\t\t\tthis.stream.start = start;\n\t\t\tthis.stream.pos = end;\n\t\t}\n\n\t\treturn this._value;\n\t}\n\n\ttoString() {\n\t\treturn this.value;\n\t}\n\n\tvalueOf() {\n\t\treturn `${this.value} [${this.start}; ${this.end}]`;\n\t}\n}\n\nconst LANGLE  = 60;\nconst RANGLE  = 62;  // < and >\nconst LSQUARE = 91;\nconst RSQUARE = 93;  // [ and ]\nconst LROUND  = 40;\nconst RROUND  = 41;  // ( and )\nconst LCURLY  = 123;\nconst RCURLY  = 125; // { and }\n\nconst opt = { throws: true };\n\n/**\n * Consumes paired tokens (like `[` and `]`) with respect of nesting and embedded\n * quoted values\n * @param  {StreamReader} stream\n * @return {Token} A token with consumed paired character\n */\nvar eatPaired = function(stream) {\n\tconst start = stream.pos;\n\tconst consumed = eatPair(stream, LANGLE, RANGLE, opt)\n\t\t|| eatPair(stream, LSQUARE, RSQUARE, opt)\n\t\t|| eatPair(stream, LROUND,  RROUND,  opt)\n\t\t|| eatPair(stream, LCURLY,  RCURLY,  opt);\n\n\tif (consumed) {\n\t\treturn token(stream, start);\n\t}\n};\n\nconst SLASH$1        = 47;  // /\nconst EQUALS       = 61;  // =\nconst RIGHT_ANGLE$1  = 62;  // >\n\n/**\n * Consumes attributes from given stream\n * @param {StreamReader} stream\n * @return {Array} Array of consumed attributes\n */\nvar eatAttributes = function(stream) {\n\tconst result = [];\n\tlet name, value, attr;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isSpace);\n\t\tattr = { start: stream.pos };\n\n\t\t// A name could be a regular name or expression:\n\t\t// React-style – <div {...props}>\n\t\t// Angular-style – <div [ng-for]>\n\t\tif (attr.name = eatAttributeName(stream)) {\n\t\t\t// Consumed attribute name. Can be an attribute with name\n\t\t\t// or boolean attribute. The value can be React-like expression\n\t\t\tif (stream.eat(EQUALS)) {\n\t\t\t\tattr.value = eatAttributeValue(stream);\n\t\t\t} else {\n\t\t\t\tattr.boolean = true;\n\t\t\t}\n\t\t\tattr.end = stream.pos;\n\t\t\tresult.push(attr);\n\t\t} else if (isTerminator(stream.peek())) {\n\t\t\t// look for tag terminator in order to skip any other possible characters\n\t\t\t// (maybe junk)\n\t\t\tbreak;\n\t\t} else {\n\t\t\tstream.next();\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Consumes attribute name from current location\n * @param  {StreamReader} stream\n * @return {Token}\n */\nfunction eatAttributeName(stream) {\n\treturn eatPaired(stream) || token(stream, isAttributeName);\n}\n\n/**\n * Consumes attribute value from given location\n * @param  {StreamReader} stream\n * @return {Token}\n */\nfunction eatAttributeValue(stream) {\n\tconst start = stream.pos;\n\tif (eatQuoted(stream)) {\n\t\t// Should return token that points to unquoted value.\n\t\t// Use stream readers’ public API to traverse instead of direct\n\t\t// manipulation\n\t\tconst current = stream.pos;\n\t\tlet valueStart, valueEnd;\n\n\t\tstream.pos = start;\n\t\tstream.next();\n\t\tvalueStart = stream.start = stream.pos;\n\n\t\tstream.pos = current;\n\t\tstream.backUp(1);\n\t\tvalueEnd = stream.pos;\n\n\t\tconst result = token(stream, valueStart, valueEnd);\n\t\tstream.pos = current;\n\t\treturn result;\n\t}\n\n\treturn eatPaired(stream) || eatUnquoted(stream);\n}\n\n/**\n * Check if given code belongs to attribute name.\n * NB some custom HTML variations allow non-default values in name, like `*ngFor`\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isAttributeName(code) {\n\treturn code !== EQUALS && !isTerminator(code) && !isSpace(code);\n}\n\n/**\n * Check if given code is tag terminator\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isTerminator(code) {\n\treturn code === RIGHT_ANGLE$1 || code === SLASH$1;\n}\n\n/**\n * Eats unquoted value from stream\n * @param  {StreamReader} stream\n * @return {Token}\n */\nfunction eatUnquoted(stream) {\n\treturn token(stream, isUnquoted);\n}\n\n/**\n * Check if given character code is valid unquoted value\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isUnquoted(code) {\n\treturn !isNaN(code) && !isQuote(code) && !isSpace(code) && !isTerminator(code);\n}\n\nconst DASH        = 45; // -\nconst DOT         = 46; // .\nconst SLASH       = 47; // /\nconst COLON       = 58; // :\nconst LEFT_ANGLE  = 60; // <\nconst RIGHT_ANGLE = 62; // >\nconst UNDERSCORE  = 95; // _\n\n/**\n * Parses tag definition (open or close tag) from given stream state\n * @param {StreamReader} stream Content stream reader\n * @return {Object}\n */\nvar tag = function(stream) {\n\tconst start = stream.pos;\n\n\tif (stream.eat(LEFT_ANGLE)) {\n\t\tconst model = { type: stream.eat(SLASH) ? 'close' : 'open' };\n\n\t\tif (model.name = eatTagName(stream)) {\n\t\t\tif (model.type !== 'close') {\n\t\t\t\tmodel.attributes = eatAttributes(stream);\n\t\t\t\tstream.eatWhile(isSpace);\n\t\t\t\tmodel.selfClosing = stream.eat(SLASH);\n\t\t\t}\n\n\t\t\tif (stream.eat(RIGHT_ANGLE)) {\n\t\t\t\t// tag properly closed\n\t\t\t\treturn Object.assign(token(stream, start), model);\n\t\t\t}\n\t\t}\n\t}\n\n\t// invalid tag, revert to original position\n\tstream.pos = start;\n\treturn null;\n};\n\n/**\n * Eats HTML identifier (tag or attribute name) from given stream\n * @param  {StreamReader} stream\n * @return {Token}\n */\nfunction eatTagName(stream) {\n\treturn token(stream, isTagName);\n}\n\n/**\n * Check if given character code can be used as HTML/XML tag name\n * @param  {Number}  code\n * @return {Boolean}\n */\nfunction isTagName(code) {\n\treturn isAlphaNumeric(code)\n\t\t|| code === COLON // colon is used for namespaces\n\t\t|| code === DOT   // in rare cases declarative tag names may have dots in names\n\t\t|| code === DASH\n\t\t|| code === UNDERSCORE;\n}\n\n/**\n * Eats array of character codes from given stream\n * @param  {StreamReader} stream\n * @param  {Number[]} codes  Array of character codes\n * @return {Boolean}\n */\nfunction eatArray(stream, codes) {\n\tconst start = stream.pos;\n\n\tfor (let i = 0; i < codes.length; i++) {\n\t\tif (!stream.eat(codes[i])) {\n\t\t\tstream.pos = start;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tstream.start = start;\n\treturn true;\n}\n\n/**\n * Consumes section from given string which starts with `open` character codes\n * and ends with `close` character codes\n * @param  {StreamReader} stream\n * @param  {Number[]} open\n * @param  {Number[]} close\n * @return {Boolean}  Returns `true` if section was consumed\n */\nfunction eatSection(stream, open, close, allowUnclosed) {\n\tconst start = stream.pos;\n\tif (eatArray(stream, open)) {\n\t\t// consumed `<!--`, read next until we find ending part or reach the end of input\n\t\twhile (!stream.eof()) {\n\t\t\tif (eatArray(stream, close)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tstream.next();\n\t\t}\n\n\t\t// unclosed section is allowed\n\t\tif (allowUnclosed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tstream.pos = start;\n\t\treturn false;\n\t}\n\n\t// unable to find section, revert to initial position\n\tstream.pos = start;\n\treturn null;\n}\n\n/**\n * Converts given string into array of character codes\n * @param  {String} str\n * @return {Number[]}\n */\nfunction toCharCodes(str) {\n\treturn str.split('').map(ch => ch.charCodeAt(0));\n}\n\nconst open  = toCharCodes('<!--');\nconst close = toCharCodes('-->');\n\n/**\n * Consumes HTML comment from given stream\n * @param  {StreamReader} stream\n * @return {Token}\n */\nvar comment = function(stream) {\n\tconst start = stream.pos;\n\tif (eatSection(stream, open, close, true)) {\n\t\tconst result = token(stream, start);\n\t\tresult.type = 'comment';\n\t\treturn result;\n\t}\n\n\treturn null;\n};\n\nconst open$1  = toCharCodes('<![CDATA[');\nconst close$1 = toCharCodes(']]>');\n\n/**\n * Consumes CDATA from given stream\n * @param  {StreamReader} stream\n * @return {Token}\n */\nvar cdata = function(stream) {\n\tconst start = stream.pos;\n\tif (eatSection(stream, open$1, close$1, true)) {\n\t\tconst result = token(stream, start);\n\t\tresult.type = 'cdata';\n\t\treturn result;\n\t}\n\n\treturn null;\n};\n\nconst defaultOptions = {\n\t/**\n\t * Expect XML content in searching content. It alters how should-be-empty\n\t * elements are treated: for example, in XML mode parser will try to locate\n\t * closing pair for `<br>` tag\n\t * @type {Boolean}\n\t */\n\txml: false,\n\n\tspecial: ['script', 'style'],\n\n\t/**\n\t * List of elements that should be treated as empty (e.g. without closing tag)\n\t * in non-XML syntax\n\t * @type {Array}\n\t */\n\tempty: ['img', 'meta', 'link', 'br', 'base', 'hr', 'area', 'wbr','col', 'embed', 'input', 'param', 'source', 'track']\n};\n\n/**\n * Parses given content into a DOM-like structure\n * @param  {String|StreamReader} content\n * @param  {Object} options\n * @return {Node}\n */\nfunction parse(content, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\tconst stream = typeof content === 'string'\n\t\t? new StreamReader(content)\n\t\t: content;\n\n\tconst root = new Node(stream, 'root');\n\tconst empty = new Set(options.empty);\n\tconst special = options.special.reduce(\n\t\t(map, name) => map.set(name, toCharCodes(`</${name}>`)), new Map());\n\tconst isEmpty = (token, name) =>\n\t\ttoken.selfClosing || (!options.xml && empty.has(name));\n\n\tlet m, node, name, stack = [root];\n\n\twhile (!stream.eof()) {\n\t\tif (m = match(stream)) {\n\t\t\tname = getName(m);\n\n\t\t\tif (m.type === 'open') {\n\t\t\t\t// opening tag\n\t\t\t\tnode = new Node(stream, 'tag', m);\n\t\t\t\tlast(stack).addChild(node);\n\t\t\t\tif (special.has(name)) {\n\t\t\t\t\tnode.close = consumeSpecial(stream, special.get(name));\n\t\t\t\t} else if (!isEmpty(m, name)) {\n\t\t\t\t\tstack.push(node);\n\t\t\t\t}\n\t\t\t} else if (m.type === 'close') {\n\t\t\t\t// closing tag, find it’s matching opening tag\n\t\t\t\tfor (let i = stack.length - 1; i > 0; i--) {\n\t\t\t\t\tif (stack[i].name.toLowerCase() === name) {\n\t\t\t\t\t\tstack[i].close = m;\n\t\t\t\t\t\tstack = stack.slice(0, i);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlast(stack).addChild(new Node(stream, m.type, m));\n\t\t\t}\n\t\t} else {\n\t\t\tstream.next();\n\t\t}\n\t}\n\n\treturn root;\n}\n\n/**\n * Matches known token in current state of given stream\n * @param  {ContentStreamReader} stream\n * @return {Token}\n */\nfunction match(stream) {\n\t// fast-path optimization: check for `<` code\n\tif (stream.peek() === 60 /* < */) {\n\t\treturn comment(stream) || cdata(stream) || tag(stream);\n\t}\n}\n\n/**\n * @param  {StreamReader} stream\n * @param  {Number[]} codes\n * @return {Token}\n */\nfunction consumeSpecial(stream, codes) {\n\tconst start = stream.pos;\n\tlet m;\n\n\twhile (!stream.eof()) {\n\t\tif (eatArray(stream, codes)) {\n\t\t\tstream.pos = stream.start;\n\t\t\treturn tag(stream);\n\t\t}\n\t\tstream.next();\n\t}\n\n\tstream.pos = start;\n\treturn null;\n}\n\n/**\n * Returns name of given matched token\n * @param  {Token} tag\n * @return {String}\n */\nfunction getName(tag$$1) {\n\treturn tag$$1.name ? tag$$1.name.value.toLowerCase() : `#${tag$$1.type}`;\n}\n\nfunction last(arr) {\n\treturn arr[arr.length - 1];\n}\n\nexport { defaultOptions, match };export default parse;\n","'use strict';\n\nimport expandAbbreviation from './lib/commands/expand-abbreviation';\nimport emmetInsertLineBreak from './lib/commands/formatted-line-break';\nimport emmetWrapWithAbbreviation from './lib/commands/wrap-with-abbreviation';\nimport markAbbreviation from './lib/abbreviation-marker';\nimport getAbbreviation, { findMarker, clearMarkers, createMarker } from './lib/abbreviation';\nimport autocompleteProvider from './lib/autocomplete';\nimport getModel, { getCachedModel, resetCachedModel } from './lib/model/index';\nimport matchTag, { clearTagMatch } from './lib/match-tag';\nimport renameTag from './lib/rename-tag';\n\n/**\n * Registers Emmet extension on given CodeMirror constructor.\n * This file is designed to be imported somehow into the app (CommonJS, ES6,\n * Rollup/Webpack/whatever). If you simply want to add a <script> into your page\n * that registers Emmet extension on global CodeMirror constructor, use\n * `browser.js` instead\n */\nexport default function registerEmmetExtension(CodeMirror) {\n\t// Register Emmet commands\n\tObject.assign(CodeMirror.commands, {\n\t\temmetExpandAbbreviation: editor => expandAbbreviation(editor, true),\n\t\temmetExpandAbbreviationAll: editor => expandAbbreviation(editor, false),\n\t\temmetInsertLineBreak,\n\t\temmetWrapWithAbbreviation\n\t});\n\tconst markOnEditorChange = editor => markAbbreviation(editor, editor.getCursor());\n\n\t// Defines options that allows abbreviation marking in text editor\n\tCodeMirror.defineOption('markEmmetAbbreviation', true, (editor, value) => {\n\t\tif (value) {\n\t\t\teditor.on('change', markOnEditorChange);\n\t\t} else {\n\t\t\teditor.off('change', markOnEditorChange);\n\t\t\tclearMarkers(editor);\n\t\t}\n\t});\n\n\tCodeMirror.defineOption('autoRenameTags', true, (editor, value) => {\n\t\tvalue ? editor.on('change', renameTag) : editor.off('change', renameTag);\n\t});\n\n\t// Enable/disable leading angle bracket for JSX abbreviations\n\tCodeMirror.defineOption('jsxBracket', true);\n\n\tCodeMirror.defineOption('markTagPairs', false, (editor, value) => {\n\t\tif (value) {\n\t\t\teditor.on('cursorActivity', matchTag);\n\t\t\teditor.on('change', resetCachedModel);\n\t\t} else {\n\t\t\teditor.off('cursorActivity', matchTag);\n\t\t\teditor.off('change', resetCachedModel);\n\t\t\tresetCachedModel(editor);\n\t\t\tclearTagMatch(editor);\n\t\t}\n\t});\n\n\t// Emmet config: https://github.com/emmetio/config\n\tCodeMirror.defineOption('emmet', {});\n\n\t/**\n\t * Returns Emmet completions for context from `pos` position.\n\t * Abbreviations are calculated for marked abbreviation at given position.\n\t * If no parsed abbreviation marker is available and `force` argument is\n\t * given, tries to mark abbreviation and populate completions list again.\n\t * @param  {CodeMirror.Position} [pos]\n\t * @param  {Boolean} [force]\n\t * @return {EmmetCompletion[]}\n\t */\n\tCodeMirror.defineExtension('getEmmetCompletions', function(pos, force) {\n\t\tconst editor = this;\n\t\tif (typeof pos === 'boolean') {\n\t\t\tforce = pos;\n\t\t\tpos = null;\n\t\t}\n\n\t\tpos = pos || editor.getCursor();\n\n\t\tconst autocomplete = autocompleteProvider(editor, pos);\n\t\tif (autocomplete && autocomplete.completions.length) {\n\t\t\tif (editor.getOption('markEmmetAbbreviation')) {\n\t\t\t\t// Ensure abbreviation marker exists\n\t\t\t\tif (!findMarker(editor, pos) && force) {\n\t\t\t\t\tclearMarkers(editor);\n\t\t\t\t\tcreateMarker(autocomplete.model);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfrom: autocomplete.abbreviation.range.from,\n\t\t\t\tto: autocomplete.abbreviation.range.to,\n\t\t\t\tlist: autocomplete.completions\n\t\t\t};\n\t\t}\n\t});\n\n\t/**\n\t * Returns valid Emmet abbreviation and its location in editor from given\n\t * position\n\t * @param  {CodeMirror.Pos} [pos] Position from which abbreviation should be\n\t * extracted. If not given, current cursor position is used\n\t * @return {Abbreviation}\n\t */\n\tCodeMirror.defineExtension('getEmmetAbbreviation', function(pos, contextAware) {\n\t\treturn getAbbreviation(this, pos || this.getCursor(), contextAware);\n\t});\n\n\tCodeMirror.defineExtension('findEmmetMarker', function(pos) {\n\t\treturn findMarker(this, pos || this.getCursor());\n\t});\n\n\tCodeMirror.defineExtension('getEmmetDocumentModel', function() {\n\t\tconst editor = this;\n\t\treturn editor.getOption('markTagPairs')\n\t\t\t? getCachedModel(editor)\n\t\t\t: getModel(editor);\n\t});\n}\n","'use strict';\n\nimport resolveConfig from '@emmetio/config';\n\nconst editorField = (index, placeholder = '') => `\\${${index}${placeholder ? ':' + placeholder : ''}}`;\n\n/**\n * Returns resolved Emmet config for `pos` location of given editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} [pos]  Point in editor where syntax should be detected.\n * Uses `editor.getCursor()` if not given\n * @param  {Object} [options] Additional options to override before config resolve\n * @return {Object}\n */\nexport default function createConfig(editor, pos, options) {\n\tpos = pos || editor.getCursor();\n\tconst syntax = getSyntax(editor, pos);\n\n\t/** @type {EmmetConfig} */\n\tconst config = resolveConfig(Object.assign(\n\t\t{ field: editorField },\n\t\teditor.getOption('emmet'),\n\t\toptions\n\t), { syntax });\n\n\tconst mode = editor.getModeAt(pos);\n\tif (syntax === 'jsx') {\n\t\tconfig.profile = Object.assign({ selfClosingStyle: 'xml' }, config.profile);\n\t\tconfig.options = Object.assign({ jsx: true }, config.options);\n\t} else if (mode.name === 'xml') {\n\t\tconfig.profile = Object.assign({ selfClosingStyle: mode.configuration }, config.profile);\n\t}\n\n\treturn config;\n}\n\n/**\n * Detect Emmet syntax from given editor’s position.\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} [pos]\n * @return {String} Returns `null` if Emmet syntax can’t be detected\n */\nexport function getSyntax(editor, pos) {\n\tconst rootMode = editor.getMode();\n\tif (rootMode.name === 'jsx' || rootMode.name === 'javascript') {\n\t\treturn rootMode.name;\n\t}\n\n\tconst mode = editor.getModeAt(pos);\n\treturn mode.name === 'xml' ? 'html' : mode.name;\n}\n","'use strict';\n\nimport StreamReader from '@emmetio/stream-reader';\n\nconst LINE_END = 10; // \\n\n\n/**\n * A stream reader for CodeMirror editor\n */\nexport default class CodeMirrorStreamReader extends StreamReader {\n\t/**\n\t * @param  {CodeMirror.Editor} editor\n\t * @param  {CodeMirror.Position} [pos]\n\t * @param  {CodeMirror.Range} [limit]\n\t */\n\tconstructor(editor, pos, limit) {\n\t\tsuper();\n\t\tconst CodeMirror = editor.constructor;\n\t\tthis.editor = editor;\n\t\tthis.start = this.pos = pos || CodeMirror.Pos(0, 0);\n\n\t\tconst lastLine = editor.lastLine();\n\t\tthis._eof = limit ? limit.to   : CodeMirror.Pos(lastLine, this._lineLength(lastLine));\n\t\tthis._sof = limit ? limit.from : CodeMirror.Pos(0, 0);\n\t}\n\n\t/**\n\t * Returns true only if the stream is at the beginning of the file.\n\t * @returns {Boolean}\n\t */\n\tsof() {\n\t\treturn comparePos(this.pos, this._sof) <= 0;\n\t}\n\n\t/**\n\t * Returns true only if the stream is at the end of the file.\n\t * @returns {Boolean}\n\t */\n\teof() {\n\t\treturn comparePos(this.pos, this._eof) >= 0;\n\t}\n\n\t/**\n\t * Creates a new stream instance which is limited to given `start` and `end`\n\t * points for underlying buffer\n\t * @param  {CodeMirror.Pos} start\n\t * @param  {CodeMirror.Pos} end\n\t * @return {CodeMirrorStreamReader}\n\t */\n\tlimit(from, to) {\n\t\treturn new this.constructor(this.editor, from, { from, to });\n\t}\n\n\t/**\n\t * Returns the next character code in the stream without advancing it.\n\t * Will return NaN at the end of the file.\n\t * @returns {Number}\n\t */\n\tpeek() {\n\t\tconst { line, ch } = this.pos;\n\t\tconst lineStr = this.editor.getLine(line);\n\t\treturn ch < lineStr.length ? lineStr.charCodeAt(ch) : LINE_END;\n\t}\n\n\t/**\n\t * Returns the next character in the stream and advances it.\n\t * Also returns NaN when no more characters are available.\n\t * @returns {Number}\n\t */\n\tnext() {\n\t\tif (!this.eof()) {\n\t\t\tconst code = this.peek();\n\t\t\tthis.pos = Object.assign({}, this.pos, { ch: this.pos.ch + 1 });\n\n\t\t\tif (this.pos.ch >= this._lineLength(this.pos.line)) {\n\t\t\t\tthis.pos.line++;\n\t\t\t\tthis.pos.ch = 0;\n\t\t\t}\n\n\t\t\tif (this.eof()) {\n\t\t\t\t// handle edge case where position can move on next line\n\t\t\t\t// after EOF\n\t\t\t\tthis.pos = Object.assign({}, this._eof);\n\t\t\t}\n\n\t\t\treturn code;\n\t\t}\n\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Backs up the stream n characters. Backing it up further than the\n\t * start of the current token will cause things to break, so be careful.\n\t * @param {Number} n\n\t */\n\tbackUp(n) {\n\t\tconst CodeMirror = this.editor.constructor;\n\n\t\tlet { line, ch } = this.pos;\n\t\tch -= (n || 1);\n\n\t\twhile (line >= 0 && ch < 0) {\n\t\t\tline--;\n\t\t\tch += this._lineLength(line);\n\t\t}\n\n\t\tthis.pos = line < 0 || ch < 0\n\t\t\t? CodeMirror.Pos(0, 0)\n\t\t\t: CodeMirror.Pos(line, ch);\n\n\t\treturn this.peek();\n\t}\n\n\t/**\n\t * Get the string between the start of the current token and the\n\t * current stream position.\n\t * @returns {String}\n\t */\n\tcurrent() {\n\t\treturn this.substring(this.start, this.pos);\n\t}\n\n\t/**\n\t * Returns contents for given range\n\t * @param  {Point} from\n\t * @param  {Point} to\n\t * @return {String}\n\t */\n\tsubstring(from, to) {\n\t\treturn this.editor.getRange(from, to);\n\t}\n\n\t/**\n\t * Creates error object with current stream state\n\t * @param {String} message\n\t * @return {Error}\n\t */\n\terror(message) {\n\t\tconst err = new Error(`${message} at line ${this.pos.line}, column ${this.pos.ch}`);\n\t\terr.originalMessage = message;\n\t\terr.pos = this.pos;\n\t\terr.string = this.string;\n\t\treturn err;\n\t}\n\n\t/**\n\t * Returns length of given line, including line ending\n\t * @param  {Number} line\n\t * @return {Number}\n\t */\n\t_lineLength(line) {\n\t\tconst isLast = line === this.editor.lastLine();\n\t\treturn this.editor.getLine(line).length + (isLast ? 0 : 1);\n\t}\n}\n\nfunction comparePos(a, b) {\n\treturn a.line - b.line || a.ch - b.ch;\n}\n","'use strict';\n\nimport extract from '@emmetio/extract-abbreviation';\nimport createConfig from './config';\nimport { isCSSPropertyValue, getCSSPropertyName } from './utils';\n\n/**\n * Context-aware abbreviation extraction from given editor.\n * Detects syntax context in `pos` editor location and, if it allows Emmet\n * abbreviation to be extracted here, returns object with extracted abbreviation,\n * its location and config.\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} pos\n */\nexport default function extractAbbreviation(editor, pos, contextAware) {\n\tconst config = createConfig(editor, pos);\n\n\tif (contextAware && !canExtract(editor, pos, config)) {\n\t\treturn null;\n\t}\n\n\tconst extracted = extract(editor.getLine(pos.line), pos.ch, {\n\t\tlookAhead: true,\n\t\tsyntax: config.type,\n\t\tprefix: config.syntax === 'jsx' && editor.getOption('jsxBracket') ? '<' : ''\n\t});\n\n\tif (extracted) {\n\t\tconst from = {\n\t\t\tline: pos.line,\n\t\t\tch: extracted.start\n\t\t};\n\t\tconst to = {\n\t\t\tline: pos.line,\n\t\t\tch: extracted.end\n\t\t};\n\n\t\tif (config.type === 'stylesheet' && contextAware) {\n\t\t\t// In case of stylesheet syntaxes (CSS, LESS) we should narrow down\n\t\t\t// expand context to property value, if possible\n\t\t\tif (isCSSPropertyValue(editor, pos)) {\n\t\t\t\tconfig.options = Object.assign({ property: getCSSPropertyName(editor, pos) }, config.options);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tabbreviation: extracted.abbreviation,\n\t\t\trange: { from, to },\n\t\t\tconfig\n\t\t};\n\t}\n}\n\n/**\n * Check if abbreviation can be extracted from given position\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} pos\n * @param {Object} config\n * @return {Boolean}\n */\nfunction canExtract(editor, pos, config) {\n\tconst tokenType = editor.getTokenTypeAt(pos);\n\n\tif (config.type === 'stylesheet') {\n\t\treturn tokenType !== 'comment' && tokenType !== 'string';\n\t}\n\n\tif (config.syntax === 'html') {\n\t\treturn tokenType === null;\n\t}\n\n\tif (config.syntax === 'slim' || config.syntax === 'pug') {\n\t\treturn tokenType === null || tokenType === 'tag'\n\t\t\t|| (tokenType && /attribute/.test(tokenType));\n\t}\n\n\tif (config.syntax === 'haml') {\n\t\treturn tokenType === null || tokenType === 'attribute';\n\t}\n\n\tif (config.syntax === 'jsx') {\n\t\t// JSX a bit tricky, delegate it to caller\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nimport parseFields from '@emmetio/field-parser';\nimport { normalizeText } from './utils';\n\n/**\n * Replaces `range` in `editor` with `text` snippet. A snippet is a string containing\n * tabstops/fields like `${index:placeholder}`: this function will locate such \n * fields and place cursor at first one.\n * Inserted snippet will be automatically matched with current editor indentation\n * @param {CodeMirror.Editor} editor \n * @param {CodeMirror.Range} range \n * @param {String} text\n */\nexport default function insertSnippet(editor, range, text) {\n\tconst line = editor.getLine(range.from.line);\n\tconst matchIndent = line.match(/^\\s+/);\n\tlet snippet = normalizeText(editor, text, matchIndent && matchIndent[0]);\n\tconst fieldModel = parseFields(snippet);\n\t\n\treturn editor.operation(() => {\n\t\teditor.replaceRange(fieldModel.string, range.from, range.to);\n\n\t\t// Position cursor\n\t\tconst startIx = editor.indexFromPos(range.from);\n\t\tif (fieldModel.fields.length) {\n\t\t\tconst field = fieldModel.fields[0];\n\t\t\tconst from = editor.posFromIndex(field.location + startIx);\n\t\t\tconst to = editor.posFromIndex(field.location + field.length + startIx);\n\t\t\teditor.setSelection(from, to);\n\t\t} else {\n\t\t\teditor.setCursor(editor.posFromIndex(startIx + fieldModel.string.length));\n\t\t}\n\n\t\treturn true;\n\t});\n}\n","'use strict';\n\nimport { expand, parse } from '@emmetio/expand-abbreviation';\nimport extract from './extract-abbreviation';\nimport insertSnippet from './snippet';\nimport { removeFields, isCSSPropertyValue } from './utils';\n\nconst emmetMarkerClass = 'emmet-abbreviation';\n\n/**\n * Returns parsed abbreviation from given position in `editor`, if possible.\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} pos\n * @param {Boolean} [contextAware] Use context-aware abbreviation detection\n * @returns {Abbreviation}\n */\nexport default function abbreviationFromPosition(editor, pos, contextAware) {\n\t// Try to find abbreviation marker from given position\n\tconst marker = findMarker(editor, pos);\n\tif (marker && marker.model) {\n\t\treturn marker.model;\n\t}\n\n\t// Try to extract abbreviation from given position\n\tconst extracted = extract(editor, pos, contextAware);\n\tif (extracted) {\n\t\ttry {\n\t\t\tconst abbr = new Abbreviation(extracted.abbreviation, extracted.range, extracted.config);\n\t\t\treturn abbr.valid(editor, contextAware) ? abbr : null;\n\t\t} catch (err) {\n\t\t\t// skip\n\t\t\t// console.warn(err);\n\t\t}\n\t}\n}\n\n/**\n * Returns *valid* Emmet abbreviation marker (if any) for given position of editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} [pos]\n * @return {CodeMirror.TextMarker}\n */\nexport function findMarker(editor, pos) {\n\tconst markers = editor.findMarksAt(pos);\n\tfor (let i = 0, marker; i < markers.length; i++) {\n\t\tmarker = markers[i];\n\t\tif (marker.className === emmetMarkerClass) {\n\t\t\tif (isValidMarker(editor, marker)) {\n\t\t\t\treturn marker;\n\t\t\t}\n\n\t\t\tmarker.clear();\n\t\t}\n\t}\n}\n\n/**\n * Removes Emmet abbreviation markers from given editor\n * @param {CodeMirror.Editor} editor\n */\nexport function clearMarkers(editor) {\n\tconst markers = editor.getAllMarks();\n\tfor (let i = 0; i < markers.length; i++) {\n\t\tif (markers[i].className === emmetMarkerClass) {\n\t\t\tmarkers[i].clear();\n\t\t}\n\t}\n}\n\n/**\n * Marks Emmet abbreviation for given editor position, if possible\n * @param  {CodeMirror.Editor} editor Editor where abbreviation marker should be created\n * @param  {Abbreviation} model Parsed abbreviation model\n * @return {CodeMirror.TextMarker} Returns `undefined` if no valid abbreviation under caret\n */\nexport function createMarker(editor, model) {\n\tconst { from, to } = model.range;\n\tconst marker = editor.markText(from, to, {\n\t\tinclusiveLeft: true,\n\t\tinclusiveRight: true,\n\t\tclearWhenEmpty: true,\n\t\tclassName: emmetMarkerClass\n\t});\n\tmarker.model = model;\n\treturn marker;\n}\n\n/**\n * Ensures that given editor Emmet abbreviation marker contains valid Emmet abbreviation\n * and updates abbreviation model if required\n * @param {CodeMirror} editor\n * @param {CodeMirror.TextMarket} marker\n * @return {Boolean} `true` if marker contains valid abbreviation\n */\nfunction isValidMarker(editor, marker) {\n\tconst range = marker.find();\n\n\t// No newlines inside abbreviation\n\tif (range.from.line !== range.to.line) {\n\t\treturn false;\n\t}\n\n\t// Make sure marker contains valid abbreviation\n\tlet text = editor.getRange(range.from, range.to);\n\tif (!text || /^\\s|\\s$/g.test(text)) {\n\t\treturn false;\n\t}\n\n\tif (marker.model && marker.model.config.syntax === 'jsx' && text[0] === '<') {\n\t\ttext = text.slice(1);\n\t}\n\n\tif (!marker.model || marker.model.abbreviation !== text) {\n\t\t// marker contents was updated, re-parse abbreviation\n\t\ttry {\n\t\t\tmarker.model = new Abbreviation(text, range, marker.model.config);\n\t\t\tif (!marker.model.valid(editor, true)) {\n\t\t\t\tmarker.model = null;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.warn(err);\n\t\t\tmarker.model = null;\n\t\t}\n\t}\n\n\treturn Boolean(marker.model && marker.model.snippet);\n}\n\nexport class Abbreviation {\n\t/**\n\t * @param {String} abbreviation Abbreviation string\n\t * @param {CodeMirror.Range} range Abbreviation location in editor\n\t * @param {Object} [config]\n\t */\n\tconstructor(abbreviation, range, config) {\n\t\tthis.abbreviation = abbreviation;\n\t\tthis.range = range;\n\t\tthis.config = config;\n\t\tthis.ast = parse(abbreviation, config);\n\t\tthis.snippet = expand(this.ast, config);\n\t\tthis.preview = removeFields(this.snippet);\n\t}\n\n\t/**\n\t * Inserts current expanded abbreviation into given `editor` by replacing\n\t * `range`\n\t * @param {CodeMirror.Editor} editor\n\t * @param {CodeMirror.Range} [range]\n\t */\n\tinsert(editor, range) {\n\t\treturn insertSnippet(editor, range || this.range, this.snippet);\n\t}\n\n\t/**\n\t * Check if parsed abbreviation is valid\n\t * @param {Boolean} [contextAware] Perform context-aware validation: ensure \n\t * that expanded result is expected at abbreviation location\n\t */\n\tvalid(editor, contextAware) {\n\t\tif (this.preview && this.abbreviation !== this.preview) {\n\t\t\treturn contextAware && this.config.type === 'stylesheet'\n\t\t\t\t? this._isValidForStylesheet(editor)\n\t\t\t\t: true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t_isValidForStylesheet(editor) {\n\t\tconst pos = this.range.from;\n\t\tconst token = editor.getTokenAt(pos);\n\n\t\tif (/^[#!]/.test(this.abbreviation)) {\n\t\t\t// Abbreviation is a property value\n\t\t\treturn isCSSPropertyValue(editor, pos);\n\t\t}\n\n\t\t// All expanded nodes are properties? Properties has names, regular snippets don’t.\n\t\tconst isProperty = this.ast.children.every(node => node.name);\n\t\tconst state = token.state && token.state.localState || token.state;\n\n\t\tif (isProperty) {\n\t\t\t// Expanded abbreviation consists of properties: make sure we’re inside \n\t\t\t// block context\n\t\t\t// NB: in Sass, no actual block context since it’s indetation-based\n\t\t\treturn this.config.syntax === 'sass' \n\t\t\t\t|| (state && state.context && state.context.type === 'block');\n\t\t}\n\n\t\t// Expanded abbreviations are basic snippets: allow them everywhere, but forbid\n\t\t// if expanded result equals abbreviation (meaningless).\n\t\treturn true;\n\t}\n}\n","'use strict';\n\nimport getAbbreviation, { clearMarkers } from '../abbreviation';\n\n/**\n * Expand abbreviation command\n * @param {CodeMirror.Editor} editor\n * @param {Boolean} contextAware\n */\nexport default function(editor, contextAware) {\n\tif (editor.somethingSelected()) {\n\t\treturn editor.constructor.Pass;\n\t}\n\n\tconst abbr = getAbbreviation(editor, editor.getCursor(), contextAware);\n\n\tif (abbr) {\n\t\tabbr.insert(editor);\n\t\tclearMarkers(editor);\n\t\treturn true;\n\t}\n\n\t// If no abbreviation was expanded, allow editor to handle different\n\t// action for keyboard shortcut (Tab key mostly)\n\treturn editor.constructor.Pass;\n}\n","'use strict';\n\nexport default function(editor) {\n\tconst between = editor.listSelections().map(sel => betweenTags(editor, sel));\n\n\tif (!between.some(Boolean)) {\n\t\treturn editor.constructor.Pass;\n\t}\n\n\teditor.operation(() => {\n\t\tlet sels = editor.listSelections();\n\t\tconst singleSep = editor.doc.lineSeparator();\n\t\tconst doubleSep = singleSep + singleSep;\n\n\t\t// Step 1: insert newlines either single or double depending on selection\n\t\tfor (let i = sels.length - 1; i >= 0; i--) {\n\t\t\teditor.replaceRange(between[i] ? doubleSep : singleSep, sels[i].anchor, sels[i].head, '+newline');\n\t\t}\n\n\t\t// Step 2: indent inserted lines\n\t\tsels = editor.listSelections();\n\t\tfor (let i = 0; i < sels.length; i++) {\n\t\t\teditor.indentLine(sels[i].from().line, null, true);\n\n\t\t\tif (between[i]) {\n\t\t\t\teditor.indentLine(sels[i].from().line - 1, null, true);\n\t\t\t}\n\t\t}\n\n\t\t// Step 3: adjust caret positions\n\t\teditor.setSelections(editor.listSelections().map((sel, i) => {\n\t\t\tif (between[i]) {\n\t\t\t\tconst line = sel.from().line - 1;\n\t\t\t\tconst cursor = {\n\t\t\t\t\tline,\n\t\t\t\t\tch: editor.getLine(line).length\n\t\t\t\t};\n\t\t\t\treturn { anchor: cursor, head: cursor };\n\t\t\t}\n\n\t\t\treturn sel;\n\t\t}));\n\t});\n}\n\n/**\n * Check if given range is a single caret between tags\n * @param {CodeMirror} editor\n * @param {CodeMirror.range} range\n */\nfunction betweenTags(editor, range) {\n\tif (equalCursorPos(range.anchor, range.head)) {\n\t\tconst cursor = range.anchor;\n\t\tconst mode = editor.getModeAt(cursor);\n\n\t\tif (mode.name === 'xml') {\n\t\t\tconst left = editor.getTokenAt(cursor);\n\t\t\tconst right = editor.getTokenAt(Object.assign({}, cursor, { ch: cursor.ch + 1 }));\n\n\t\t\treturn left.type === 'tag bracket' && left.string === '>'\n\t\t\t\t&& right.type === 'tag bracket' && right.string === '</';\n\t\t}\n\t}\n}\n\n// Compare two positions, return 0 if they are the same, a negative\n// number when a is less, and a positive number otherwise.\nfunction cmp(a, b) {\n\treturn a.line - b.line || a.ch - b.ch;\n}\n\nfunction equalCursorPos(a, b) {\n\treturn a.sticky === b.sticky && cmp(a, b) === 0;\n}\n\n","'use strict';\n\nimport { containsPos, rangeFromNode, narrowToNonSpace, comparePos } from '../utils';\nimport createConfig from '../config';\nimport { Abbreviation } from '../abbreviation';\n\n/**\n * Marks selected text or matched node content with abbreviation\n * @param {CodeMirror} editor \n */\nexport default function wrapWithAbbreviation(editor) {\n\tconst range = getWrappingContentRange(editor);\n\n\tif (range) {\n\t\tconst prompt = editor.getOption('emmetPrompt') || defaultPrompt;\n\t\tconst text = editor.getRange(range.from, range.to, '\\n')\n\t\t\t.split('\\n')\n\t\t\t.map(line => line.trim());\n\n\t\tprompt(editor, 'Enter abbreviation to wrap with:', abbr => {\n\t\t\tif (abbr) {\n\t\t\t\tconst model = new Abbreviation(abbr, range, createConfig(editor, range.from, { text }));\n\t\t\t\tmodel.insert(editor);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconsole.warn('Nothing to wrap');\n\t}\n}\n\n/**\n * Returns content range that should be wrapped\n * @param {CodeMirror} editor \n */\nfunction getWrappingContentRange(editor) {\n\tif (editor.somethingSelected()) {\n\t\tconst sel = editor.listSelections().filter(sel => sel.anchor !== sel.head)[0];\n\t\tif (sel) {\n\t\t\treturn  comparePos(sel.anchor, sel.head) < 0\n\t\t\t\t? { from: sel.anchor, to: sel.head }\n\t\t\t\t: { from: sel.head, to: sel.anchor };\n\t\t}\n\t}\n\n\t// Nothing selected, find parent HTML node and return range for its content\n\treturn getTagRangeForPos(editor, editor.getCursor());\n}\n\n/**\n * Returns either inner or outer tag range (depending on `pos` location) \n * for given position\n * @param {CodeMirror} editor \n * @param {Object} pos \n * @return {Object}\n */\nfunction getTagRangeForPos(editor, pos) {\n\tconst model = editor.getEmmetDocumentModel();\n\tconst tag = model && model.nodeForPoint(pos);\n\n\tif (!tag) {\n\t\treturn null;\n\t}\n\n\t// Depending on given position, return either outer or inner tag range\n\tif (inRange(tag.open, pos) || inRange(tag.close, pos)) {\n\t\t// Outer range\n\t\treturn rangeFromNode(tag);\n\t}\n\n\t// Inner range\n\tconst from = tag.open.end;\n\tconst to = tag.close ? tag.close.start : tag.open.end;\n\n\treturn narrowToNonSpace(editor, from, to);\n}\n\nfunction inRange(tag, pos) {\n\treturn tag && containsPos(rangeFromNode(tag), pos);\n}\n\nfunction defaultPrompt(editor, message, callback) {\n\tcallback(window.prompt(message));\n}\n","'use strict';\n\nimport getAbbreviation, { findMarker, createMarker, clearMarkers } from './abbreviation';\n\n/**\n * Marks Emmet abbreviation for given editor position, if possible\n * @param  {CodeMirror.Editor} editor Editor where abbreviation marker should be created\n * @param  {CodeMirror.Position} pos Editor position where abbreviation marker\n * should be created. Abbreviation will be automatically extracted from given position\n * @return {CodeMirror.TextMarker} Returns `undefined` if no valid abbreviation under caret\n */\nexport default function markAbbreviation(editor, pos) {\n\tconst marker = findMarker(editor, pos);\n\tif (marker) {\n\t\t// there’s active marker with valid abbreviation\n\t\treturn marker;\n\t}\n\n\t// No active marker: remove previous markers and create new one, if possible\n\tclearMarkers(editor);\n\n\tconst model = getAbbreviation(editor, pos, true);\n\n\tif (model) {\n\t\treturn createMarker(editor, model);\n\t}\n}\n","'use strict';\n\nimport { createSnippetsRegistry, expand } from '@emmetio/expand-abbreviation';\nimport { convertToCSSSnippets } from '@emmetio/css-snippets-resolver';\nimport createConfig from './config';\nimport getAbbreviation, { clearMarkers } from './abbreviation';\nimport { removeFields } from './utils';\nimport insertSnippet from './snippet';\n\n/**\n * Returns available completions from given editor\n * @param  {CodeMirror.Editor} editor\n * @param  {Abbreviation} abbrModel Parsed Emmet abbreviation model for which\n * completions should be populated\n * @param  {CodeMirror.Position} abbrPos Abbreviation location in editor\n * @param  {CodeMirror.Position} [pos] Cursor position in editor\n * @return {EmmetCompletion[]}\n */\nexport default function(editor, pos) {\n\tpos = pos || editor.getCursor();\n\tlet completions = [];\n\n\t// Provide two types of completions:\n\t// 1. Expanded abbreviation\n\t// 2. Snippets\n\n\tconst abbreviation = getAbbreviation(editor, pos, true);\n\t// NB: Check for edge case: expanded abbreviation equals to original\n\t// abbreviation (for example, `li.item` expands to `li.item` in Slim),\n\t// no need to provide completion for this case\n\tif (abbreviation && abbreviation.abbreviation !== abbreviation.snippet) {\n\t\tcompletions.push(expandedAbbreviationCompletion(editor, pos, abbreviation));\n\t}\n\n\tconst config = abbreviation ? abbreviation.config : createConfig(editor, pos);\n\n\tif (config.type === 'stylesheet') {\n\t\tcompletions = completions.concat(getStylesheetCompletions(editor, pos, config));\n\t} else {\n\t\tcompletions = completions.concat(getMarkupCompletions(editor, pos, config));\n\t}\n\n\treturn {\n\t\ttype: config.type,\n\t\tsyntax: config.syntax,\n\t\tabbreviation,\n\t\tcompletions: completions.filter(Boolean)\n\t};\n}\n\n/**\n * Returns completions for markup syntaxes (HTML, Slim, Pug etc.)\n * @param  {CodeMirror} editor\n * @param  {CodeMirror.Position} pos Cursor position in editor\n * @param  {Object} config Resolved Emmet config\n * @return {EmmetCompletion[]}\n */\nfunction getMarkupCompletions(editor, pos, config) {\n\tconst line = editor.getLine(pos.line).slice(0, pos.ch);\n\tconst prefix = extractPrefix(line, /[\\w:\\-$@]/);\n\n\t// Make sure that current position precedes element name (e.g. not attribute,\n\t// class, id etc.)\n\tif (prefix) {\n\t\tconst prefixRange = {\n\t\t\tfrom: { line: pos.line, ch: pos.ch - prefix.length },\n\t\t\tto: pos\n\t\t};\n\n\t\treturn getSnippetCompletions(editor, pos, config)\n\t\t\t.filter(completion => completion.key !== prefix && completion.key.indexOf(prefix) === 0)\n\t\t\t.map(completion => new EmmetCompletion('snippet', editor, prefixRange, completion.key, completion.preview, completion.snippet));\n\t}\n\n\treturn [];\n}\n\n/**\n * Returns completions for stylesheet syntaxes\n * @param  {CodeMirror} editor\n * @param  {CodeMirror.Position} pos Cursor position in editor\n * @param  {Object} config Resolved Emmet config\n * @return {EmmetCompletion[]}\n */\nfunction getStylesheetCompletions(editor, pos, config) {\n\tconst line = editor.getLine(pos.line).slice(0, pos.ch);\n\tconst prefix = extractPrefix(line, /[\\w-@$]/);\n\n\tif (prefix) {\n\t\t// Make sure that current position precedes element name (e.g. not attribute,\n\t\t// class, id etc.)\n\t\tconst prefixRange = {\n\t\t\tfrom: { line: pos.line, ch: pos.ch - prefix.length },\n\t\t\tto: pos\n\t\t};\n\n\t\tif (config.options && config.options.property) {\n\t\t\tconst lowerProp = config.options.property.toLowerCase();\n\t\t\t// Find matching CSS property snippet for keyword completions\n\t\t\tconst completion = getSnippetCompletions(editor, pos, config)\n\t\t\t\t.find(item => item.property && item.property === lowerProp);\n\n\t\t\tif (completion && completion.keywords.length) {\n\t\t\t\treturn completion.keywords.map(kw => {\n\t\t\t\t\treturn kw.key.indexOf(prefix) === 0 && new EmmetCompletion('value', editor, prefixRange, kw.key, kw.preview, kw.snippet);\n\t\t\t\t}).filter(Boolean);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getSnippetCompletions(editor, pos, config)\n\t\t\t\t.filter(completion => completion.key !== prefix && completion.key.indexOf(prefix) === 0)\n\t\t\t\t.map(completion => new EmmetCompletion('snippet', editor, prefixRange, completion.key, completion.preview, completion.snippet));\n\t\t}\n\t}\n\n\treturn [];\n}\n\n/**\n * Returns all possible snippets completions for given editor context.\n * Completions are cached in editor for for re-use\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} pos\n * @param  {Object} config\n * @return {Array}\n */\nfunction getSnippetCompletions(editor, pos, config) {\n\tconst { type, syntax } = config;\n\n\tif (!editor.state.emmetCompletions) {\n\t\teditor.state.emmetCompletions = {};\n\t}\n\n\tconst cache = editor.state.emmetCompletions;\n\n\tif (!(syntax in cache)) {\n\t\tconst registry = createSnippetsRegistry(type, syntax, config.snippets);\n\n\t\tcache[syntax] = type === 'stylesheet'\n\t\t\t? getStylesheetSnippets(registry, config)\n\t\t\t: getMarkupSnippets(registry, config);\n\t}\n\n\treturn cache[syntax];\n}\n\n/**\n * Returns stylesheet snippets list\n * @param {SnippetsRegistry} registry\n * @return {Array}\n */\nfunction getStylesheetSnippets(registry) {\n\treturn convertToCSSSnippets(registry).map(snippet => {\n\t\tlet preview = snippet.property;\n\t\tconst keywords = snippet.keywords();\n\t\tif (keywords.length) {\n\t\t\tpreview += `: ${removeFields(keywords.join(' | '))}`;\n\t\t} else if (snippet.value) {\n\t\t\tpreview += `: ${removeFields(snippet.value)}`;\n\t\t}\n\n\t\treturn {\n\t\t\tkey: snippet.key,\n\t\t\tvalue: snippet.value,\n\t\t\tsnippet: snippet.key,\n\t\t\tproperty: snippet.property,\n\t\t\tkeywords: keywords.map(kw => {\n\t\t\t\tconst m = kw.match(/^[\\w-]+/);\n\t\t\t\treturn m && {\n\t\t\t\t\tkey: m[0],\n\t\t\t\t\tpreview: removeFields(kw),\n\t\t\t\t\tsnippet: kw\n\t\t\t\t};\n\t\t\t}).filter(Boolean),\n\t\t\tpreview\n\t\t};\n\t});\n}\n\n/**\n * Returns markup snippets list\n * @param {SnippetsRegistry} registry\n * @param {Object} config\n * @return {Array}\n */\nfunction getMarkupSnippets(registry, config) {\n\treturn registry.all({ type: 'string' }).map(snippet => ({\n\t\tkey: snippet.key,\n\t\tvalue: snippet.value,\n\t\tpreview: removeFields(expand(snippet.value, config)),\n\t\tsnippet: snippet.key\n\t}));\n}\n\nfunction expandedAbbreviationCompletion(editor, pos, abbrModel) {\n\tlet preview = abbrModel.preview;\n\tif (preview.length > 500) {\n\t\tpreview = preview.slice(0, 500) + '...';\n\t}\n\n\treturn new EmmetCompletion('expanded-abbreviation', editor, abbrModel.range,\n\t\t'Expand abbreviation', preview, (editor, range) => abbrModel.insert(editor, range));\n}\n\n/**\n * Extracts prefix from the end of given string that matches `match` regexp\n * @param {String} str\n * @param {RegExp} match\n * @return {String} Extracted prefix\n */\nfunction extractPrefix(str, match) {\n\tlet offset = str.length;\n\n\twhile (offset > 0) {\n\t\tif (!match.test(str[offset - 1])) {\n\t\t\tbreak;\n\t\t}\n\t\toffset--;\n\t}\n\n\treturn str.slice(offset);\n}\n\nclass EmmetCompletion {\n\t/**\n\t * @param {String} type\n\t * @param {CodeMirror.Editor} editor\n\t * @param {CodeMirror.Range} range\n\t * @param {String} name\n\t * @param {String} preview\n\t * @param {Function} snippet\n\t */\n\tconstructor(type, editor, range, name, preview, snippet) {\n\t\tthis.type = type;\n\t\tthis.editor = editor;\n\t\tthis.range = range;\n\t\tthis.name = name;\n\t\tthis.preview = preview;\n\t\tthis.snippet = snippet;\n\n\t\tthis._inserted = false;\n\t}\n\n\tinsert() {\n\t\tif (!this._inserted) {\n\t\t\tthis._inserted = true;\n\t\t\tif (typeof this.snippet === 'function') {\n\t\t\t\tthis.snippet(this.editor, this.range);\n\t\t\t} else {\n\t\t\t\tinsertSnippet(this.editor, this.range, this.snippet);\n\t\t\t}\n\t\t\tclearMarkers(this.editor);\n\t\t}\n\t}\n}\n","'use strict';\n\nimport { containsPos, rangeFromNode } from '../utils';\n\n/**\n * A syntax-specific model container, used to get unified access to underlying\n * parsed document\n */\nexport default class SyntaxModel {\n\t/**\n\t * @param  {Object} dom      Parsed document tree\n\t * @param  {String} type     Type of document (html, stylesheet, etc.)\n\t * @param  {String} [syntax] Optional document syntax like html, xhtml or xml\n\t */\n\tconstructor(dom, type, syntax) {\n\t\tthis.dom = dom;\n\t\tthis.type = type;\n\t\tthis.syntax = syntax;\n\t}\n\n\t/**\n\t * Returns best matching node for given point\n\t * @param  {CodeMirror.Pos}   pos\n\t * @param  {Boolean} [exclude] Exclude node’s start and end positions from\n\t *                             search\n\t * @return {Node}\n\t */\n\tnodeForPoint(pos, exclude) {\n\t\tlet ctx = this.dom.firstChild;\n\t\tlet found = null;\n\n\t\twhile (ctx) {\n\t\t\tif (containsPos(rangeFromNode(ctx), pos, exclude)) {\n\t\t\t\t// Found matching tag. Try to find deeper, more accurate match\n\t\t\t\tfound = ctx;\n\t\t\t\tctx = ctx.firstChild;\n\t\t\t} else {\n\t\t\t\tctx = ctx.nextSibling;\n\t\t\t}\n\t\t}\n\n\t\treturn found;\n\t}\n}\n","'use strict';\n\nimport parseHTML from '@emmetio/html-matcher';\nimport SyntaxModel from './syntax-model';\nimport StreamReader from '../stream-reader';\n\n/**\n * Creates DOM-like model for given text editor\n * @param  {CodeMirror} editor\n * @param  {String}     syntax\n * @return {Node}\n */\nexport default function create(editor, syntax) {\n\tconst stream = new StreamReader(editor);\n\tconst xml = syntax === 'xml';\n\n\ttry {\n\t\treturn new SyntaxModel(parseHTML(stream, { xml }), 'html', syntax || 'html');\n\t} catch (err) {\n\t\tconsole.warn(err);\n\t}\n}\n","'use strict';\n\nimport parseHTML from './html';\n\nexport default function getModel(editor) {\n\tconst syntax = getSyntax(editor);\n\treturn parseHTML(editor, syntax);\n}\n\nexport function getCachedModel(editor) {\n\tif (!editor.state._emmetModel) {\n\t\teditor.state._emmetModel = getModel(editor);\n\t}\n\n\treturn editor.state._emmetModel;\n}\n\nexport function resetCachedModel(editor) {\n\teditor.state._emmetModel = null;\n}\n\n/**\n * Returns parser-supported syntax of given editor (like 'html', 'css' etc.).\n * Returns `null` if editor’s syntax is unsupported\n * @param  {CodeMirror} editor\n * @return {String}\n */\nfunction getSyntax(editor) {\n\tconst mode = editor.getMode();\n\n\tif (mode.name === 'htmlmixed') {\n\t\treturn 'html';\n\t}\n\n\treturn mode.name === 'xml' ? mode.configuration : mode.name;\n}\n","'use strict';\n\nimport { containsPos } from './utils';\n\nconst openTagMark = 'emmet-open-tag';\nconst closeTagMark = 'emmet-close-tag';\n\n/**\n * Finds matching tag pair for given position in editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} pos\n * @return {Object}\n */\nexport default function matchTag(editor, pos) {\n\tpos = pos || editor.getCursor();\n\n\t// First, check if there are tag markers in editor\n\tconst marked = getMarkedTag(editor);\n\n\t// If marks found, validate them: make sure cursor is either in open\n\t// or close tag\n\tif (marked) {\n\t\tif (containsPos(marked.open.find(), pos)) {\n\t\t\t// Point is inside open tag, make sure if there’s a closing tag,\n\t\t\t// it matches open tag content\n\t\t\tif (!marked.close || text(editor, marked.open) === text(editor, marked.close)) {\n\t\t\t\treturn marked;\n\t\t\t}\n\t\t} else if (marked.close) {\n\t\t\t// There’s a close tag, make sure pointer is inside it and it matches\n\t\t\t// open tag\n\t\t\tif (containsPos(marked.close.find(), pos) && text(editor, marked.open) === text(editor, marked.close)) {\n\t\t\t\treturn marked;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Markers are not valid anymore, remove them\n\tclearTagMatch(editor);\n\n\t// Find new tag pair from parsed HTML model and mark them\n\tconst node = findTagPair(editor, pos);\n\tif (node && node.type === 'tag') {\n\t\treturn {\n\t\t\topen: createTagMark(editor, node.open.name, openTagMark),\n\t\t\tclose: node.close && createTagMark(editor, node.close.name, closeTagMark)\n\t\t};\n\t}\n}\n\nexport function getMarkedTag(editor) {\n\tlet open, close;\n\teditor.getAllMarks().forEach(mark => {\n\t\tif (mark.className === openTagMark) {\n\t\t\topen = mark;\n\t\t} else if (mark.className === closeTagMark) {\n\t\t\tclose = mark;\n\t\t}\n\t});\n\n\treturn open ? { open, close } : null;\n}\n\n/**\n * Removes all matched tag pair markers from editor\n * @param  {CodeMirror.Editor} editor\n */\nexport function clearTagMatch(editor) {\n\teditor.getAllMarks().forEach(mark => {\n\t\tif (mark.className === openTagMark || mark.className === closeTagMark) {\n\t\t\tmark.clear();\n\t\t}\n\t});\n}\n\n/**\n * Finds tag pair (open and close, if any) form parsed HTML model of given editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} pos\n * @return {Object}\n */\nexport function findTagPair(editor, pos) {\n\tconst model = editor.getEmmetDocumentModel();\n\treturn model && model.nodeForPoint(pos || editor.getCursor());\n}\n\nfunction createTagMark(editor, tag, className) {\n\treturn editor.markText(tag.start, tag.end, {\n\t\tclassName,\n\t\tinclusiveLeft: true,\n\t\tinclusiveRight: true,\n\t\tclearWhenEmpty: false\n\t});\n}\n\nfunction text(editor, mark) {\n\tconst range = mark.find();\n\treturn range ? editor.getRange(range.from, range.to) : '';\n}\n","'use strict';\n\nimport { getMarkedTag, clearTagMatch } from './match-tag';\nimport { containsPos } from './utils';\n\nexport default function renameTag(editor, obj) {\n\tconst tag = getMarkedTag(editor);\n\tconst pos = obj.from;\n\n\tif (!tag) {\n\t\treturn;\n\t}\n\n\tif (containsPos(tag.open.find(), pos) && tag.close) {\n\t\t// Update happened inside open tag, update close tag as well\n\t\tupdateTag(editor, tag.open, tag.close);\n\t} else if (tag.close && containsPos(tag.close.find(), pos)) {\n\t\t// Update happened inside close tag, update open tag as well\n\t\tupdateTag(editor, tag.close, tag.open);\n\t}\n}\n\nexport function updateTag(editor, source, dest) {\n\tconst name = text(editor, source);\n\tconst range = dest.find();\n\tconst m = name.match(/[\\w:.-]+/);\n\tconst newName = !name ? '' : (m && m[0]);\n\n\tif (newName != null) {\n\t\tif (editor.getRange(range.from, range.to) !== newName) {\n\t\t\teditor.replaceRange(newName, range.from, range.to);\n\t\t}\n\t} else {\n\t\t// User entered something that wasn’t a valid tag name.\n\t\tclearTagMatch(editor);\n\t}\n}\n\nfunction text(editor, mark) {\n\tconst range = mark.find();\n\treturn range ? editor.getRange(range.from, range.to) : '';\n}\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","import * as firebase from \"firebase/app\";\n\nimport marked from 'marked';\nimport emmet from '@emmetio/codemirror-plugin';\n\nimport {\n  rAF,\n  trim,\n  goTo,\n  select,\n  selectAll,\n  countDown,\n  extractCode,\n  dateTimeDiff,\n  isWithinDeadline,\n  loadCodemirrorAssets\n} from '../../commons/js/utils.js';\n\nlet spec;\nlet toast;\nlet device;\nlet editor;\nlet GARelay;\nlet appUser;\nlet testId;\nlet projectId;\nlet assessment;\nlet instructions;\nlet sandboxWindow;\n\nlet batchedProgress = [];\nlet assessmentProgress = {};\nlet savingBatchedProgress = false;\n\nconst SPECS = firebase.firestore().collection('specs');\nconst SUBMISSIONS = firebase.firestore().collection('submissions');\n\nconst challengeInfo = select('[data-challenge-info]');\nconst testOverMsg = 'This assessment is closed. Your changes will not be saved or evaluated';\n\nconst notify = (msg) => {\n  let message = trim(msg);\n  if (message === '') return;\n\n  if(message === 'ERROR') {\n    message = `You've Got One Or More Syntax Errors In Your Code!`;\n  }\n\n  const toastr = select('#toast');\n  if (!toast) toast = mdc.snackbar.MDCSnackbar.attachTo(toastr);\n  // toast.close();\n\n  toastr.querySelector('.mdc-snackbar__label').textContent = message;\n  toast.timeoutMs = 10000;\n  toast.open();\n};\n\nconst signOut = event => {\n  event.preventDefault();\n  firebase.auth().signOut();\n\n  GARelay.ga('send', {\n    hitType: 'event',\n    eventCategory: 'Playground',\n    eventAction: 'signout',\n    eventLabel: `${assessment.slug}`\n  });\n};\n\nconst setupAccount = () => {\n  const userIconBtn = select('button[data-profile]');\n  if(appUser.photoURL) {\n    const img = document.createElement(\"img\");\n    img.src = appUser.photoURL;\n    userIconBtn.appendChild(img);\n\n    userIconBtn.classList.add('has-usr-photo');\n  }\n  \n  const usrMenu = mdc.menu.MDCMenu.attachTo(select('.mdc-menu'));\n  userIconBtn.addEventListener('click', event => {\n    event.preventDefault();\n    if (!usrMenu.open) {\n      usrMenu.open = true;\n    }\n  });\n  usrMenu.setFixedPosition(true);\n  select('#signout').addEventListener('click', signOut);\n};\n\nconst prepareEmulatorPreview = () => {\n  if(device) device.classList.remove('live');\n  if(instructions) instructions.classList.remove('live');\n};\n\nconst switchPreviewToEmulator = () => {\n  if(instructions) {\n    instructions.classList.remove('live');\n  }\n\n  if(device) {\n    device.classList.add('live');\n  }\n\n  select('#toggle-viewer').classList.add('mdc-icon-button--on');\n};\n\nconst switchPreviewToInstructions = () => {\n  if(device) {\n    device.classList.remove('live');\n  }\n  \n  if(instructions) {\n    instructions.classList.add('live');\n  }\n\n  select('#toggle-viewer').classList.remove('mdc-icon-button--on');\n};\n\nconst showCountdown = async () => {\n  if (!('RelativeTimeFormat' in Intl)) {\n    await import('intl-relative-time-format');\n  }\n\n  const { endingAt } = assessment;\n  const deadline = new Date(`${endingAt}`);\n\n  const timeSplainer = select(`[data-timer]`);\n  const timer = timeSplainer.querySelector('span');\n  const rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n  const displayCountdown = ({ diff, diffType }) => {\n    if (diff < 0 && diffType === 'second') {\n      let type = 'hour';\n      let ellapsedDiff = dateTimeDiff({ to: deadline, type });\n\n      if(ellapsedDiff > 24) {\n        type = 'day'\n        ellapsedDiff = dateTimeDiff({ to: deadline, type });\n      }\n\n      timer.textContent = rtf.format(ellapsedDiff, type);\n      return;\n    }\n    timer.textContent = rtf.format(diff, `${diffType}`);\n    timeSplainer.setAttribute('data-timer-on', 'why-not');\n  };\n\n  countDown({ to: deadline, callback: displayCountdown });\n};\n\nconst updateProjectWork = changes => SUBMISSIONS.doc(projectId).update(changes);\n\nconst createProject = async (email) => {\n  let { starterCodebase } = spec;\n\n  // TODO remove this after fully migrating\n  // all starter code into SPECs\n  if(!starterCodebase) {\n    const response = await fetch('/engines/tpl/start.html');\n    starterCodebase = await response.text();\n  }\n\n  const entry = {\n    email,\n    assessment: testId,\n    firstSeen: Date.now(),\n    code: starterCodebase\n  };\n\n  const ref = await SUBMISSIONS.add(entry);\n  projectId = ref.id;\n  const project = await SUBMISSIONS.doc(projectId).get();  \n  return project;\n};\n\nconst updateLastSeenTime = async (project) => {\n  projectId = project.id;\n  const entry = {\n    lastSeen: Date.now()\n  };\n\n  await updateProjectWork(entry);\n  const updated = await SUBMISSIONS.doc(projectId).get();\n  return updated;\n};\n\nconst createOrUpdateProject = async () =>  {\n    const { email } = appUser;\n    const query = SUBMISSIONS\n      .where('assessment', '==', testId)\n      .where('email', '==', email);\n    \n    const snapshot = await query.get();\n    if(snapshot.empty === true) {\n      notify('Initialising your assessment, please wait ...');\n      const created = await createProject(email);\n      return created;\n    } \n\n    const [doc] = snapshot.docs;\n    const updated = await updateLastSeenTime({\n      id: doc.id, \n      data: doc.data()\n    });\n    return updated;\n};\n\nconst setupInstructions = async (challengeIndex) => {\n  if (challengeIndex < 0) {\n    let assessmentName = assessment.name || 'Andela Fellowship';\n    assessmentName = assessmentName.replace(/\\s+\\w+-\\d{2,}$/, '');\n\n    const response = await fetch(`/engines/tpl/intro.md`);\n    const text = await response.text();\n    return text\n      .replace('{name}', appUser.displayName || '')\n      .replace('{program}', assessmentName)\n      .replace('{app}', spec.about)\n      .replace('{challenges}', spec.challenges.length || 'a few')\n      .replace('{specname}', spec.name || 'your app')\n      .replace('{specname}', spec.name || 'your app');\n  }\n\n  if (challengeIndex >= spec.challenges.length) {\n    const response = await fetch(`/engines/tpl/outro.md`);\n    const text = await response.text();\n    return text.replace('{name}', appUser.displayName || '');\n  }\n\n  return spec.challenges[challengeIndex].guide;\n};\n\nconst safelyIncrementChallengeIndex = (challengeLength, challengeIndex) => {\n    const normalised =\n      challengeIndex >= challengeLength ? challengeLength : challengeIndex + 1;\n    return normalised;\n};\n\nconst navigateToChallengeInstructions = async (challengeIndex) => {\n  const intructions = await setupInstructions(challengeIndex);\n  if(challengeInfo) {\n    challengeInfo.innerHTML = marked(intructions, {\n      gfm: true,\n      smartLists: true\n    });\n  }\n\n  const appTitle = select('#instructions span.what');\n  const progress = select('#instructions span.step');\n\n  const challengeLen = spec.challenges.length;\n  const normalised = safelyIncrementChallengeIndex(challengeLen, challengeIndex);\n  \n  if (appTitle && progress) {\n    appTitle.textContent = spec.name;\n    progress.textContent =\n      challengeIndex < 0\n        ? 'Mini App!'\n        : `Challenge ${normalised} of ${challengeLen}`;\n\n    if(normalised > challengeLen) {\n      progress.textContent = `You've Completed ${progress.textContent}`\n    }\n  }\n  return instructions;\n};\n\nconst displayProgressAndInstructions = async (challengeIndex) => {\n  await navigateToChallengeInstructions(challengeIndex);\n  const challengeLen = spec.challenges.length;\n  const normalised = safelyIncrementChallengeIndex(challengeLen, challengeIndex);\n\n  localStorage.setItem(\n    'challengeIndex',\n    normalised === challengeLen ? normalised - 1 : normalised\n  );\n\n  if(challengeIndex >= 0) {\n\n    Array.from(selectAll(`button[data-challange-step]`))\n    .map(btn => {\n      if(btn) {\n        // btn.setAttribute('disabled', 'disabled');\n        btn.removeAttribute('data-challange-status');\n        btn.removeAttribute('data-challange-audit');\n      }\n      return btn;\n    });\n\n    const challangeSlots = Array.from({length: challengeLen + 1}, (x, i) => i);\n    const slotsCoverage = challangeSlots.slice(0, challangeSlots.indexOf(challengeIndex));\n\n    // tick off challenges the candidate has completed\n    slotsCoverage.forEach(slot => {\n      const btn = select(`button[data-challange-step='${slot}']`);\n      if(btn) {\n        btn.setAttribute('data-challange-audit', 'passing');\n      }\n    });\n\n    // indicate the current challenge\n    const btn = select(`button[data-challange-step='${challengeIndex}']`);\n    if(btn) {\n      btn.setAttribute('data-challange-status', 'active');\n    }\n  }\n};\n\nconst getAssessmentSpec = async () => {\n  if(!spec || spec.id !== assessment.spec) {\n    const specification = await SPECS.doc(assessment.spec).get();\n    spec = {\n      id: specification.id,\n      ...specification.data()\n    };\n  } \n\n  return spec;\n};\n\nconst progressTo = async (challengeIndex) => {\n  await getAssessmentSpec();\n  displayProgressAndInstructions(challengeIndex);\n};\n\nconst getCode = () => {\n  let codebase = editor.getValue();\n  if (!codebase) {\n    const { code } = JSON.parse(localStorage.getItem('work'));\n    codebase = code;\n  }\n  return codebase;\n};\n\nconst initProject = async () => {\n  const challengeIndex = 0;\n  const started = Date.now();\n\n  let aName = [''];\n  if(appUser && appUser.displayName) {\n    aName = appUser.displayName.split(/\\s+/);\n  }\n\n  await updateProjectWork({ started, challengeIndex, displayName:aName.join(' ') });\n  assessmentProgress = {challengeIndex, completedChallenge: -1};\n  select('body').setAttribute('data-assessment', started);\n  \n  progressTo(challengeIndex);\n  notify(`Yo, you can now begin the assessment. Take it away ${aName[0]}!`);\n  rAF({ wait: 500 }).then(() => {\n    select('body').classList.remove('mdc-dialog-scroll-lock', 'mdc-dialog--open');\n  });\n\n  GARelay.ga('send', {\n    hitType: 'event',\n    eventCategory: 'Playground',\n    eventAction: 'assessment-started',\n    eventLabel: `${assessment.slug}`\n  });\n};\n\nconst challengeIntro = async () => {\n  select('button.action-begin').addEventListener('click', () => {\n    select('body').classList.add('mdc-dialog-scroll-lock', 'mdc-dialog--open');\n\n    let aName = [''];\n    if(appUser && appUser.displayName) {\n      aName = appUser.displayName.split(/\\s+/);\n    }\n\n    notify(`Thats right ${aName[0]}! Please wait while we start things off for you ...`);\n    initProject();\n    \n    GARelay.ga('send', {\n      hitType: 'event',\n      eventCategory: 'Playground',\n      eventAction: 'begin-assessment',\n      eventLabel: `${assessment.slug}`\n    });\n  });\n\n  // await getAssessmentSpec();\n  displayProgressAndInstructions(-1);\n  switchPreviewToInstructions();\n};\n\nconst playCode = () => {\n  const challengeIndex = parseInt(localStorage.getItem('challengeIndex'), 10);\n  if (challengeIndex < 0) {\n    initProject();\n  }\n\n  const code = getCode();\n  if (!code) return;\n\n  notify('Lets Run Your Code ...');\n\n  prepareEmulatorPreview();\n  const payload = extractCode(code);\n  sandboxWindow.postMessage(\n    {\n      payload,\n      spec: spec.id,\n      assessment: testId\n    },\n    window.location.origin\n  );\n};\n\nconst handleChallengeNavClicks = (event) => {\n  event.preventDefault();\n  \n  const target = event.target.closest('button');\n  const isActive = target.getAttribute('data-challange-status') === 'active';\n  const isPassing = target.getAttribute('data-challange-audit') === 'passing';\n  const navState = isActive || isPassing;\n\n  GARelay.ga('send', {\n    hitType: 'event',\n    eventCategory: 'Playground',\n    eventAction: 'challenge-nav',\n    eventLabel: `${assessment.slug}`\n  });\n  \n  if(navState) {\n    const step = target.getAttribute('data-challange-step') || 0;\n    navigateToChallengeInstructions( parseInt(step, 10) );\n    switchPreviewToInstructions();\n  }\n};\n\nconst setTheStage = async (challengeIndex, started) => {\n  localStorage.setItem('challengeIndex', challengeIndex);\n  notify('building your playground ...');\n\n  mdc.topAppBar.MDCTopAppBar.attachTo(select('.mdc-top-app-bar'));\n  setupAccount();\n\n  select('#runit').addEventListener('click', (event) => {\n    event.preventDefault();\n    playCode();\n\n    GARelay.ga('send', {\n      hitType: 'event',\n      eventCategory: 'Playground',\n      eventAction: 'play-code-btn',\n      eventLabel: `${assessment.slug}`\n    });\n  });\n\n  Array.from(selectAll(`button[data-challange-step]`)).forEach(btn => {\n    btn.addEventListener('click', handleChallengeNavClicks);\n    const btnRipple = mdc.ripple.MDCRipple.attachTo(btn);\n    btnRipple.unbounded = true;\n  });\n\n  const toggleViewer = new mdc.iconButton.MDCIconButtonToggle(select('#toggle-viewer'));\n  toggleViewer.listen('MDCIconButtonToggle:change', ({detail}) => {\n    if(detail.isOn === true) {\n      switchPreviewToEmulator();\n      GARelay.ga('send', {\n        hitType: 'event',\n        eventCategory: 'Playground',\n        eventAction: 'toggle-to-emulator',\n        eventLabel: `${assessment.slug}`\n      });\n    } else {\n      switchPreviewToInstructions();\n      GARelay.ga('send', {\n        hitType: 'event',\n        eventCategory: 'Playground',\n        eventAction: 'toggle-to-instructions',\n        eventLabel: `${assessment.slug}`\n      });\n    }\n  });\n\n  notify('building your auto-grader ...');\n\n  const sandbox = select('#sandbox');\n  const viewer = select('#viewer');\n  sandbox.setAttribute('src', '/engines/sandbox.html');\n  sandboxWindow = sandbox.contentWindow;\n\n  if (challengeIndex >= 0 && started) {\n    select('body').setAttribute('data-assessment', started);\n  }\n\n  await loadCodemirrorAssets({ mode: 'htmlmixed' });\n  emmet(CodeMirror);\n  const codeEditor = CodeMirror(select('#code'), {\n    theme: 'idea',\n    autofocus: true,\n    lineNumbers: true,\n    lineWrapping: true,\n    matchBrackets: true,\n    autoCloseBrackets: true,\n    mode: { name: 'htmlmixed' },\n    extraKeys: {\n      Tab: 'emmetExpandAbbreviation',\n      Enter: 'emmetInsertLineBreak'\n    }\n  });\n\n  notify('DONE!');\n  return { codeEditor, sandbox, viewer };\n};\n\nconst saveWorkBatched = async () => {\n  savingBatchedProgress = true;\n  const start = {completedChallenge: -1, challengeIndex: 0};\n  const performance = batchedProgress.reduce((perf, {completedChallenge, challengeIndex}) => {\n    if(completedChallenge > perf.completedChallenge) {\n      return {completedChallenge, challengeIndex};\n    }\n    return perf;\n  }, start);\n\n  await updateProjectWork({\n    ...performance,\n    lastRun: Date.now(),\n    code: editor.getValue()\n  });\n\n  batchedProgress = [];\n  savingBatchedProgress = false;\n  assessmentProgress = {...assessmentProgress, ...performance};\n};\n\nconst saveWork = ({completedChallenge, challengeIndex}) => {\n  if(batchedProgress.length === 0) {\n    rAF({wait: 5000})\n    .then(() => {\n      saveWorkBatched();\n    });\n  }\n\n  if(savingBatchedProgress === true) return;\n\n  batchedProgress.push({completedChallenge, challengeIndex});\n};\n\nconst handleSandboxMessages = async (event) => {\n  if (event.origin !== window.location.origin) return;\n\n  const { feedback, advancement } = event.data;\n\n  if (feedback) {\n    notify(feedback.message);\n  }\n\n  const { endingAt } = assessment;\n  if (isWithinDeadline({ endingAt })) {\n\n    if(advancement) {\n      const { index, completed } = advancement;\n      const normalisedIndex = index >= spec.challenges.length ? completed : index;\n\n      saveWork({\n        completedChallenge: completed,\n        challengeIndex: normalisedIndex\n      });\n      progressTo(index);\n    } else {\n      saveWork({\n        challengeIndex: assessmentProgress.challengeIndex,\n        completedChallenge: assessmentProgress.completedChallenge\n      });\n    }\n  } else {\n    notify( testOverMsg );\n  }\n\n  switchPreviewToEmulator();\n};\n\nconst handleSpecialKeyCombinations = () => {\n  document.addEventListener('keyup', event => {\n    const key = event.which || event.keyCode;\n\n    if (event.ctrlKey && key === 13) {\n      playCode();\n\n      GARelay.ga('send', {\n        hitType: 'event',\n        eventCategory: 'Playground',\n        eventAction: 'play-code-keys',\n        eventLabel: `${assessment.slug}`\n      });\n    }\n  });\n};\n\nconst proceed = async (project) => {\n  const { code, started, challengeIndex } = project;\n  const whereAmI = !started ? -1 : parseInt(challengeIndex, 10); \n\n  const stage = await setTheStage(whereAmI, started);\n  const { codeEditor, viewer } = stage;\n  device = viewer;\n  editor = codeEditor;\n  editor.setValue(code);\n\n  // editor.on(\"beforeChange\", (_, change) => {\n  //   if (change.origin === 'paste') change.cancel();\n  // });\n  // editor.refresh();\n\n  instructions = select('#instructions');\n  rAF({ wait: 500 }).then(() => showCountdown());\n  window.addEventListener('message', handleSandboxMessages);\n  handleSpecialKeyCombinations();\n\n  if (whereAmI === -1) {\n    challengeIntro();\n  } \n  \n  if (whereAmI >= 0) {\n    await progressTo(whereAmI);\n    const existingWork = await SUBMISSIONS.doc(projectId).get();\n    const data = existingWork.data();\n    assessmentProgress = {...assessmentProgress, ...{\n      challengeIndex: data.challengeIndex,\n      completedChallenge: data.completedChallenge \n    }};\n\n    const { endingAt } = assessment;\n    if (isWithinDeadline({ endingAt })) {\n      if((whereAmI + 1) >= spec.challenges.length) {\n        // though within deadline, this user has completed this assessment. \n        playCode();\n        return;\n      } \n      switchPreviewToInstructions();\n      return;\n    }\n    playCode();\n  }\n\n};\n\nconst deferredEnter = async (args) => {\n  const { user, test, assessmentDoc } = args;\n  testId = test;\n  appUser = user;\n\n  assessment = {\n    id: assessmentDoc.id,\n    ...assessmentDoc.data()\n  };\n\n  goTo('playground', { test });\n\n  import('../../commons/js/GARelay.js')\n  .then(module => {\n    GARelay = module.default;\n  });\n\n  await getAssessmentSpec();\n  const project = await createOrUpdateProject();\n  proceed(project.data());\n};\n\nexport const enter = async (args = {}) => {\n  notify('Building your playground, please wait ...');\n  deferredEnter(args); \n};\nexport default { enter };\n\n\n","module.exports = function loadJSBundle(bundle) {\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement('script');\n    script.async = true;\n    script.type = 'text/javascript';\n    script.charset = 'utf-8';\n    script.src = bundle;\n    script.onerror = function (e) {\n      script.onerror = script.onload = null;\n      reject(e);\n    };\n\n    script.onload = function () {\n      script.onerror = script.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n};\n"]}