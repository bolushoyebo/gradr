{"version":3,"sources":["../commons/js/GARelay.js"],"names":["GARelay","resendInterval","blocked","NUM_SENT_PER_BATCH","BATCH_TIMEOUT","RETRY_INTERVAL","ga","navigator","onLine","arguments","cache","args","gaCache","getCache","push","timeStamp","Date","now","setCache","setResendInterval","tryResend","self","i","length","req","pop","setTimeout","clearResendInterval","setInterval","clearInterval","JSON","parse","localStorage","getItem","err","val","setItem","stringify","error","console","warn","message"],"mappings":";AAoFeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,6CAAAA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAlFf,IAAMA,EAAU,CACdC,gBAAgB,EAChBC,SAAS,EAGTC,mBAAoB,EACpBC,cAAe,IACfC,eAAgB,IAEhBC,GATc,SAAA,GAAA,SAAA,IAAA,OAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,SAAA,WAAA,OAAA,EAAA,YAAA,EAAA,CASR,WACAC,UAAUC,OACZF,GAAA,WAAMG,EAAAA,WAEDC,KAAAA,MAAUD,MAAAA,UAAAA,MAAAA,KAAAA,cAInBC,MAAOC,SAAAA,GACCC,IAAAA,EAAU,KAAKC,WACrBD,EAAQE,KAAK,CACXH,KAAAA,EACAI,UAAWC,KAAKC,QAEbC,KAAAA,SAASN,GACTO,KAAAA,qBAGPC,UAAa,WACP,GAACb,UAAUC,SAAU,KAAKN,QAA1B,CAIC,IAFCmB,IAAAA,EAAO,KACPT,EAAU,KAAKC,WACZS,EAAI,EAAGA,EAAIV,EAAQW,OAAQD,GAAK,EAAG,CACpCE,IAAAA,EAAMZ,EAAQa,MAGhB,GAFJJ,EAAKf,GAALe,MAAAA,GAAWG,EAAAA,EAAAA,SAAAA,EAAIb,OAEX,KAAKR,mBAAqB,IAAMmB,EAOlC,OANKJ,KAAAA,SAASN,GACdS,EAAKnB,SAAU,EACViB,KAAAA,yBACLO,WAAW,WACTL,EAAKnB,SAAU,GACd,KAAKE,eAIPc,KAAAA,SAAS,IACTS,KAAAA,wBAGPR,kBAAqB,WACf,IAAA,KAAKlB,eAAL,CACEoB,IAAAA,EAAO,KACRpB,KAAAA,eAAiB2B,YAAY,WAChCP,EAAKD,aACJ,KAAKf,kBAGVsB,oBAAuB,YACO,IAAxB,KAAK1B,iBACP4B,cAAc,KAAK5B,gBACdA,KAAAA,gBAAiB,IAI1BY,SAAY,WACN,IACKiB,OAAAA,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GACtD,MAAOC,GACA,MAAA,KAIXhB,SAAUiB,SAAAA,GACJ,IACFH,aAAaI,QAAQ,UAAWN,KAAKO,UAAUF,IAC/C,MAAOG,GACPC,QAAQC,KAAKF,EAAMG,YAKVzC,EAAAA,EAAAA,QAAAA,QAAAA","file":"GARelay.71bce292.js","sourceRoot":"../../src/playground","sourcesContent":["// NOTE: This script does not save the actual event timestamps, because GA ignores events if they are older than a few hours.\n\nconst GARelay = {\n  resendInterval: false,\n  blocked: false,\n  // Play with these two values to change behaviour of resending cached events.\n  // Just sending 1 request at a time with 1s Timeout seemed to give the least ignored events\n  NUM_SENT_PER_BATCH: 1,\n  BATCH_TIMEOUT: 1000,\n  RETRY_INTERVAL: 5000,\n\n  ga () {\n    if (navigator.onLine) {\n      ga(...arguments);\n    } else {\n      this.cache([...arguments]);\n    }\n  },\n\n  cache (args) {\n    const gaCache = this.getCache();\n    gaCache.push({\n      args,\n      timeStamp: Date.now()\n    });\n    this.setCache(gaCache);\n    this.setResendInterval();\n  },\n\n  tryResend () {\n    if (!navigator.onLine || this.blocked) return;\n\n    const self = this;\n    const gaCache = this.getCache();\n    for (let i = 0; i < gaCache.length; i += 1) {\n      const req = gaCache.pop();\n      self.ga(...req.args);\n\n      if (this.NUM_SENT_PER_BATCH - 1 === i) {\n        this.setCache(gaCache);\n        self.blocked = true;\n        this.setResendInterval();\n        setTimeout(() => {\n          self.blocked = false;\n        }, this.BATCH_TIMEOUT);\n        return;\n      }\n    }\n    this.setCache([]);\n    this.clearResendInterval();\n  },\n\n  setResendInterval () {\n    if (this.resendInterval) return;\n    const self = this;\n    this.resendInterval = setInterval(() => {\n      self.tryResend(); \n    }, this.RETRY_INTERVAL);\n  },\n\n  clearResendInterval () {\n    if (this.resendInterval !== false) {\n      clearInterval(this.resendInterval);\n      this.resendInterval = false;\n    }\n  },\n\n  getCache () {\n    try {\n      return JSON.parse(localStorage.getItem('gaCache')) || [];\n    } catch (err) {\n      return [];\n    }\n  },\n\n  setCache (val) {\n    try {\n      localStorage.setItem('gaCache', JSON.stringify(val));\n    } catch (error) {\n      console.warn(error.message);\n    }\n  }\n};\n\nexport default GARelay;\n"]}